   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"TMCL.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	1
  18              		.p2align 2,,3
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	tmcl_handleAxisParameter.part.0:
  24              	.LVL0:
  25              	.LFB16:
  26              		.file 1 "TMCL.c"
   1:TMCL.c        **** /*
   2:TMCL.c        ****  * TMCL.c
   3:TMCL.c        ****  *
   4:TMCL.c        ****  *  Created on: 31.03.2019
   5:TMCL.c        ****  *      Author: ED / MO
   6:TMCL.c        ****  */
   7:TMCL.c        **** 
   8:TMCL.c        **** #include "TMCL.h"
   9:TMCL.c        **** #include "BLDC.h"
  10:TMCL.c        **** #include "hal/tmcl/TMCL-Defines.h"
  11:TMCL.c        **** #include "hal/system/IO.h"
  12:TMCL.c        **** #include "hal/system/SysTick.h"
  13:TMCL.c        **** #include "hal/system/SystemInfo.h"
  14:TMCL.c        **** #include "hal/comm/SPI.h"
  15:TMCL.c        **** #include "hal/comm/Eeprom.h"
  16:TMCL.c        **** #include "hal/ic/LIS2DH12.h"
  17:TMCL.c        **** #include "hal/Flags.h"
  18:TMCL.c        **** #include "hal/Debug.h"
  19:TMCL.c        **** #include "Sensor.h"
  20:TMCL.c        **** #include "Button.h"
  21:TMCL.c        **** 
  22:TMCL.c        **** #if defined(USE_CAN_INTERFACE)
  23:TMCL.c        **** 	#include "hal/comm/CAN.h"
  24:TMCL.c        **** #endif
  25:TMCL.c        **** 
  26:TMCL.c        **** #if defined(USE_UART_INTERFACE)
  27:TMCL.c        **** 	#include "hal/comm/UART.h"
  28:TMCL.c        **** #endif
  29:TMCL.c        **** 
  30:TMCL.c        **** 	uint8_t ResetRequested = false;
  31:TMCL.c        **** 	uint8_t TMCLReplyFormat;
  32:TMCL.c        **** 	uint8_t SpecialReply[9];
  33:TMCL.c        **** 	TTMCLCommand ActualCommand;
  34:TMCL.c        **** 	TTMCLReply ActualReply;
  35:TMCL.c        **** 
  36:TMCL.c        **** 	extern const char *VersionString;
  37:TMCL.c        **** 
  38:TMCL.c        **** 	// local used functions
  39:TMCL.c        **** 	void tmcl_setOutput();
  40:TMCL.c        **** 	void tmcl_getInput();
  41:TMCL.c        **** 	void tmcl_getVersion();
  42:TMCL.c        **** 	void tmcl_boot();
  43:TMCL.c        **** 	void tmcl_handleAxisParameter(uint8_t command);
  44:TMCL.c        **** 	void tmcl_handleGlobalParameter(uint8_t command);
  45:TMCL.c        **** 	void tmcl_softwareReset();
  46:TMCL.c        **** 	void tmcl_factoryDefault();
  47:TMCL.c        **** 
  48:TMCL.c        **** // => SPI wrapper
  49:TMCL.c        **** u8 tmc4671_readwriteByte(u8 motor, u8 data, u8 lastTransfer)
  50:TMCL.c        **** {
  51:TMCL.c        **** 	return (motor == DEFAULT_MC) ? weasel_spi_readWriteByte(data, lastTransfer) : 0;
  52:TMCL.c        **** }
  53:TMCL.c        **** 
  54:TMCL.c        **** u8 tmc6200_readwriteByte(u8 motor, u8 data, u8 lastTransfer)
  55:TMCL.c        **** {
  56:TMCL.c        **** 	return (motor == DEFAULT_DRV) ? dragon_spi_readWriteByte(data, lastTransfer) : 0;
  57:TMCL.c        **** }
  58:TMCL.c        **** // <= SPI wrapper
  59:TMCL.c        **** 
  60:TMCL.c        **** /* TMCL command ROL */
  61:TMCL.c        **** void tmcl_rotateLeft()
  62:TMCL.c        **** {
  63:TMCL.c        **** 	bldc_setTargetVelocity(-ActualCommand.Value.Int32);
  64:TMCL.c        **** }
  65:TMCL.c        **** 
  66:TMCL.c        **** /* TMCL command ROR */
  67:TMCL.c        **** void tmcl_rotateRight()
  68:TMCL.c        **** {
  69:TMCL.c        **** 	bldc_setTargetVelocity(ActualCommand.Value.Int32);
  70:TMCL.c        **** }
  71:TMCL.c        **** 
  72:TMCL.c        **** /* TMCL command MST */
  73:TMCL.c        **** void tmcl_motorStop()
  74:TMCL.c        **** {
  75:TMCL.c        **** 	bldc_stopMotor();
  76:TMCL.c        **** }
  77:TMCL.c        **** 
  78:TMCL.c        **** /* execute the TMCL-Command stored in "ActualCommand" */
  79:TMCL.c        **** void tmcl_executeActualCommand()
  80:TMCL.c        **** {
  81:TMCL.c        **** 	// prepare reply command
  82:TMCL.c        **** 	ActualReply.Opcode = ActualCommand.Opcode;
  83:TMCL.c        **** 	ActualReply.Status = REPLY_OK;
  84:TMCL.c        **** 	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
  85:TMCL.c        **** 
  86:TMCL.c        **** 	// get command
  87:TMCL.c        **** 	switch(ActualCommand.Opcode)
  88:TMCL.c        **** 	{
  89:TMCL.c        **** 		case TMCL_ROR:
  90:TMCL.c        **** 			tmcl_rotateRight();
  91:TMCL.c        **** 			break;
  92:TMCL.c        **** 		case TMCL_ROL:
  93:TMCL.c        **** 			tmcl_rotateLeft();
  94:TMCL.c        **** 			break;
  95:TMCL.c        **** 		case TMCL_MST:
  96:TMCL.c        **** 			tmcl_motorStop();
  97:TMCL.c        **** 			break;
  98:TMCL.c        ****     	case TMCL_SAP:
  99:TMCL.c        ****     	case TMCL_GAP:
 100:TMCL.c        ****     	case TMCL_STAP:
 101:TMCL.c        ****     	case TMCL_RSAP:
 102:TMCL.c        ****     		tmcl_handleAxisParameter(ActualCommand.Opcode);
 103:TMCL.c        ****     		break;
 104:TMCL.c        ****     	case TMCL_SGP:
 105:TMCL.c        ****     	case TMCL_GGP:
 106:TMCL.c        ****     	case TMCL_STGP:
 107:TMCL.c        ****     	case TMCL_RSGP:
 108:TMCL.c        ****     		tmcl_handleGlobalParameter(ActualCommand.Opcode);
 109:TMCL.c        ****     		break;
 110:TMCL.c        ****     	case TMCL_GetVersion:
 111:TMCL.c        ****     		tmcl_getVersion();
 112:TMCL.c        ****     		break;
 113:TMCL.c        ****     	case TMCL_SIO:
 114:TMCL.c        ****     		tmcl_setOutput();
 115:TMCL.c        ****     		break;
 116:TMCL.c        ****     	case TMCL_GIO:
 117:TMCL.c        ****     	    tmcl_getInput();
 118:TMCL.c        ****     		break;
 119:TMCL.c        ****     	case TMCL_FactoryDefault:
 120:TMCL.c        ****     		tmcl_factoryDefault();
 121:TMCL.c        ****     		break;
 122:TMCL.c        ****     	case TMCL_Boot:
 123:TMCL.c        ****     		tmcl_boot();
 124:TMCL.c        ****     		break;
 125:TMCL.c        ****     	case TMCL_SoftwareReset:
 126:TMCL.c        ****     		tmcl_softwareReset();
 127:TMCL.c        ****     		break;
 128:TMCL.c        **** 		case TMCL_readRegisterChannel_1:
 129:TMCL.c        **** 			if (ActualCommand.Motor == 0)
 130:TMCL.c        ****         		ActualReply.Value.Int32 = tmc4671_readInt(ActualCommand.Motor, ActualCommand.Type);
 131:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 132:TMCL.c        **** 				ActualReply.Value.Int32 = tmc6200_readInt(DEFAULT_DRV, ActualCommand.Type);
 133:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 134:TMCL.c        **** 				ActualReply.Value.Int32 = LIS2DH12_spi_readInt(ActualCommand.Type);
 135:TMCL.c        **** 			break;
 136:TMCL.c        **** 		case TMCL_writeRegisterChannel_1:
 137:TMCL.c        **** 			if (ActualCommand.Motor == 0)
 138:TMCL.c        **** 				tmc4671_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 139:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 140:TMCL.c        ****     			tmc6200_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 141:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 142:TMCL.c        **** 				LIS2DH12_spi_writeInt(ActualCommand.Type, ActualCommand.Value.Int32);
 143:TMCL.c        **** 			break;
 144:TMCL.c        ****     	default:
 145:TMCL.c        ****     		ActualReply.Status = REPLY_INVALID_CMD;
 146:TMCL.c        ****     		break;
 147:TMCL.c        **** 	}
 148:TMCL.c        **** }
 149:TMCL.c        **** 
 150:TMCL.c        **** /* initialize tmcl */
 151:TMCL.c        **** void tmcl_init() {}
 152:TMCL.c        **** 
 153:TMCL.c        **** void tmcl_processCommand()
 154:TMCL.c        **** {
 155:TMCL.c        **** 	static uint8_t TMCLCommandState;
 156:TMCL.c        ****     uint32_t i;
 157:TMCL.c        **** 
 158:TMCL.c        **** #ifdef USE_UART_INTERFACE
 159:TMCL.c        **** 	uint8_t Byte;
 160:TMCL.c        **** 	static uint8_t UARTCmd[9];
 161:TMCL.c        **** 	static uint8_t UARTCount;
 162:TMCL.c        **** #endif
 163:TMCL.c        **** 
 164:TMCL.c        **** #ifdef USE_CAN_INTERFACE
 165:TMCL.c        **** 	TCanFrame CanFrame;
 166:TMCL.c        **** 	static uint8_t ExtendedCANFrame;
 167:TMCL.c        **** #endif
 168:TMCL.c        **** 
 169:TMCL.c        ****     /* send reply for last TMCL request */
 170:TMCL.c        **** 
 171:TMCL.c        **** #ifdef USE_CAN_INTERFACE
 172:TMCL.c        **** 
 173:TMCL.c        **** 	if(TMCLCommandState == TCS_CAN7 || TMCLCommandState == TCS_CAN8)  // CAN reply
 174:TMCL.c        ****     {
 175:TMCL.c        ****     	CanFrame.Id = moduleConfig.CANSendID;
 176:TMCL.c        ****     	CanFrame.Dlc = (TMCLCommandState == TCS_CAN7 ? 7:8);
 177:TMCL.c        ****     	CanFrame.Ext = ExtendedCANFrame;
 178:TMCL.c        ****     	CanFrame.Rtr = false;
 179:TMCL.c        **** 
 180:TMCL.c        ****     	if(TMCLReplyFormat == RF_STANDARD)
 181:TMCL.c        ****     	{
 182:TMCL.c        ****     		CanFrame.Data[0] = moduleConfig.CANReceiveID & 0xff;
 183:TMCL.c        ****     		CanFrame.Data[1] = ActualReply.Status;
 184:TMCL.c        ****     		CanFrame.Data[2] = ActualReply.Opcode;
 185:TMCL.c        ****     		CanFrame.Data[3] = ActualReply.Value.Byte[3];
 186:TMCL.c        ****     		CanFrame.Data[4] = ActualReply.Value.Byte[2];
 187:TMCL.c        ****     		CanFrame.Data[5] = ActualReply.Value.Byte[1];
 188:TMCL.c        ****     		CanFrame.Data[6] = ActualReply.Value.Byte[0];
 189:TMCL.c        ****     		CanFrame.Data[7] = 0;
 190:TMCL.c        ****     	}
 191:TMCL.c        ****     	else if(TMCLReplyFormat == RF_SPECIAL)
 192:TMCL.c        ****     	{
 193:TMCL.c        ****     		for(i=0; i<8; i++)
 194:TMCL.c        ****     		{
 195:TMCL.c        ****     			CanFrame.Data[i] = SpecialReply[i+1];
 196:TMCL.c        ****     		}
 197:TMCL.c        ****     	}
 198:TMCL.c        **** 
 199:TMCL.c        ****     	if(TMCLReplyFormat != RF_NO_REPLY)
 200:TMCL.c        ****     	{
 201:TMCL.c        ****     		if(!can_sendMessage(&CanFrame)) return;
 202:TMCL.c        ****     	}
 203:TMCL.c        ****     }
 204:TMCL.c        **** 
 205:TMCL.c        **** #endif
 206:TMCL.c        **** 
 207:TMCL.c        **** #if defined(USE_UART_INTERFACE)
 208:TMCL.c        **** 
 209:TMCL.c        ****     if(TMCLCommandState==TCS_UART)  // UART reply
 210:TMCL.c        ****     {
 211:TMCL.c        ****     	if(TMCLReplyFormat==RF_STANDARD)
 212:TMCL.c        ****     	{
 213:TMCL.c        ****     		uint8_t checksum = moduleConfig.serialHostAddress+moduleConfig.serialModuleAddress+
 214:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 215:TMCL.c        **** 					ActualReply.Value.Byte[3]+ActualReply.Value.Byte[2]+
 216:TMCL.c        **** 					ActualReply.Value.Byte[1]+ActualReply.Value.Byte[0];
 217:TMCL.c        **** 
 218:TMCL.c        ****     		uart_write(moduleConfig.serialHostAddress);
 219:TMCL.c        ****     		uart_write(moduleConfig.serialModuleAddress);
 220:TMCL.c        ****     		uart_write(ActualReply.Status);
 221:TMCL.c        ****     		uart_write(ActualReply.Opcode);
 222:TMCL.c        ****     		uart_write(ActualReply.Value.Byte[3]);
 223:TMCL.c        ****     		uart_write(ActualReply.Value.Byte[2]);
 224:TMCL.c        ****     		uart_write(ActualReply.Value.Byte[1]);
 225:TMCL.c        ****     		uart_write(ActualReply.Value.Byte[0]);
 226:TMCL.c        ****     		uart_write(checksum);
 227:TMCL.c        ****     	}
 228:TMCL.c        ****     	else if(TMCLReplyFormat==RF_SPECIAL)
 229:TMCL.c        ****     	{
 230:TMCL.c        ****     		for(i=0; i<9; i++)
 231:TMCL.c        ****     			uart_write(SpecialReply[i]);
 232:TMCL.c        ****     	}
 233:TMCL.c        ****     }
 234:TMCL.c        ****     else if(TMCLCommandState==TCS_UART_ERROR)  // last command had a wrong checksum
 235:TMCL.c        ****     {
 236:TMCL.c        ****     	ActualReply.Opcode = 0;
 237:TMCL.c        ****     	ActualReply.Status = REPLY_CHKERR;
 238:TMCL.c        ****     	ActualReply.Value.Int32 = 0;
 239:TMCL.c        **** 
 240:TMCL.c        ****     	uint8_t checksum = moduleConfig.serialHostAddress + moduleConfig.serialModuleAddress +
 241:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 242:TMCL.c        **** 				ActualReply.Value.Byte[3] + ActualReply.Value.Byte[2]+
 243:TMCL.c        **** 				ActualReply.Value.Byte[1] + ActualReply.Value.Byte[0];
 244:TMCL.c        **** 
 245:TMCL.c        ****     	uart_write(moduleConfig.serialHostAddress);
 246:TMCL.c        ****     	uart_write(moduleConfig.serialModuleAddress);
 247:TMCL.c        ****     	uart_write(ActualReply.Status);
 248:TMCL.c        ****     	uart_write(ActualReply.Opcode);
 249:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[3]);
 250:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[2]);
 251:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[1]);
 252:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[0]);
 253:TMCL.c        ****     	uart_write(checksum);
 254:TMCL.c        ****     }
 255:TMCL.c        **** #endif
 256:TMCL.c        **** 
 257:TMCL.c        ****     // reset TMCL state (reply has been send)
 258:TMCL.c        ****   	TMCLCommandState = TCS_IDLE;
 259:TMCL.c        ****   	TMCLReplyFormat = RF_STANDARD;
 260:TMCL.c        **** 
 261:TMCL.c        ****   	// last command was a reset?
 262:TMCL.c        ****   	if(ResetRequested)
 263:TMCL.c        ****   	{
 264:TMCL.c        ****   		/* delay the reset, that the reply is send completely */
 265:TMCL.c        ****   		wait(100);
 266:TMCL.c        ****   		io_resetCPU(true);
 267:TMCL.c        ****   	}
 268:TMCL.c        **** 
 269:TMCL.c        ****   	/* read next request */
 270:TMCL.c        **** 
 271:TMCL.c        **** #ifdef USE_CAN_INTERFACE
 272:TMCL.c        **** 
 273:TMCL.c        ****   	if(can_getMessage(&CanFrame))  // new CAN request
 274:TMCL.c        ****   	{
 275:TMCL.c        ****   		ActualCommand.Opcode = CanFrame.Data[0];
 276:TMCL.c        ****   		ActualCommand.Type = CanFrame.Data[1];
 277:TMCL.c        ****   		ActualCommand.Motor = CanFrame.Data[2];
 278:TMCL.c        ****   		ActualCommand.Value.Byte[3] = CanFrame.Data[3];
 279:TMCL.c        ****   		ActualCommand.Value.Byte[2] = CanFrame.Data[4];
 280:TMCL.c        ****   		ActualCommand.Value.Byte[1] = CanFrame.Data[5];
 281:TMCL.c        ****   		ActualCommand.Value.Byte[0] = CanFrame.Data[6];
 282:TMCL.c        ****   		ExtendedCANFrame = CanFrame.Ext;
 283:TMCL.c        **** 
 284:TMCL.c        ****   		if(CanFrame.Dlc == 7)
 285:TMCL.c        ****   			TMCLCommandState = TCS_CAN7;
 286:TMCL.c        ****   		else
 287:TMCL.c        ****   			TMCLCommandState = TCS_CAN8;
 288:TMCL.c        ****   	}
 289:TMCL.c        **** #endif
 290:TMCL.c        **** 
 291:TMCL.c        **** #ifdef USE_UART_INTERFACE
 292:TMCL.c        **** 
 293:TMCL.c        ****   	if(uart_read((char *)&Byte))  // new UART request available?
 294:TMCL.c        ****   	{
 295:TMCL.c        ****   		if(uart_checkTimeout())
 296:TMCL.c        ****   			UARTCount = 0;  // discard everything when there has been a command timeout
 297:TMCL.c        **** 
 298:TMCL.c        ****   		UARTCmd[UARTCount++] = Byte;
 299:TMCL.c        **** 
 300:TMCL.c        ****   		if(UARTCount==9)  // Nine bytes have been received without timeout
 301:TMCL.c        ****   		{
 302:TMCL.c        ****   			UARTCount=0;
 303:TMCL.c        ****   			if(UARTCmd[0] == moduleConfig.serialModuleAddress)  // is this our address?
 304:TMCL.c        ****   			{
 305:TMCL.c        ****   				uint8_t checksum = 0;
 306:TMCL.c        ****   				for(i=0; i<8; i++)
 307:TMCL.c        ****   					checksum += UARTCmd[i];
 308:TMCL.c        **** 
 309:TMCL.c        ****   				if(checksum==UARTCmd[8])  // checksum correct?
 310:TMCL.c        ****   				{
 311:TMCL.c        ****   					ActualCommand.Opcode=UARTCmd[1];
 312:TMCL.c        ****   					ActualCommand.Type=UARTCmd[2];
 313:TMCL.c        ****   					ActualCommand.Motor=UARTCmd[3];
 314:TMCL.c        ****   					ActualCommand.Value.Byte[3]=UARTCmd[4];
 315:TMCL.c        ****   					ActualCommand.Value.Byte[2]=UARTCmd[5];
 316:TMCL.c        ****   					ActualCommand.Value.Byte[1]=UARTCmd[6];
 317:TMCL.c        ****   					ActualCommand.Value.Byte[0]=UARTCmd[7];
 318:TMCL.c        ****  					TMCLCommandState = TCS_UART;
 319:TMCL.c        ****   				}
 320:TMCL.c        ****   				else TMCLCommandState=TCS_UART_ERROR;  // checksum is wrong
 321:TMCL.c        ****   			}
 322:TMCL.c        ****   		}
 323:TMCL.c        ****   	}
 324:TMCL.c        **** #endif
 325:TMCL.c        **** 
 326:TMCL.c        ****    	// handle request after successful reading
 327:TMCL.c        ****   	if(TMCLCommandState!=TCS_IDLE && TMCLCommandState!=TCS_UART_ERROR)
 328:TMCL.c        ****   		tmcl_executeActualCommand();
 329:TMCL.c        **** }
 330:TMCL.c        **** 
 331:TMCL.c        **** void tmcl_handleAxisParameter(uint8_t command)
  27              		.loc 1 331 6 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
 332:TMCL.c        **** {
 333:TMCL.c        **** 	if(ActualCommand.Motor == 0)
 334:TMCL.c        **** 	{
 335:TMCL.c        **** 		switch(ActualCommand.Type)
  31              		.loc 1 335 3 view .LVU1
 331:TMCL.c        **** {
  32              		.loc 1 331 6 is_stmt 0 view .LVU2
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 335 23 view .LVU3
  41 0002 024C     		ldr	r4, .L521
  42              		.loc 1 335 3 view .LVU4
  43 0004 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
  44 0006 033B     		subs	r3, r3, #3
  45 0008 02E0     		b	.L522
  46              	.L523:
  47 000a 00BF     		.align	2
  48              	.L521:
  49 000c 00000000 		.word	.LANCHOR0
  50              	.L522:
  51 0010 FC2B     		cmp	r3, #252
  52 0012 00F2FF80 		bhi	.L2
  53 0016 DFE813F0 		tbh	[pc, r3, lsl #1]
  54              	.L4:
  55 001a F606     		.2byte	(.L117-.L4)/2
  56 001c E706     		.2byte	(.L116-.L4)/2
  57 001e 8C07     		.2byte	(.L115-.L4)/2
  58 0020 D406     		.2byte	(.L114-.L4)/2
  59 0022 FA05     		.2byte	(.L113-.L4)/2
  60 0024 F005     		.2byte	(.L112-.L4)/2
  61 0026 6F07     		.2byte	(.L111-.L4)/2
  62 0028 DD05     		.2byte	(.L110-.L4)/2
  63 002a FD00     		.2byte	(.L2-.L4)/2
  64 002c 8306     		.2byte	(.L109-.L4)/2
  65 002e FD00     		.2byte	(.L2-.L4)/2
  66 0030 7D06     		.2byte	(.L108-.L4)/2
  67 0032 7907     		.2byte	(.L107-.L4)/2
  68 0034 7606     		.2byte	(.L106-.L4)/2
  69 0036 6304     		.2byte	(.L105-.L4)/2
  70 0038 5C04     		.2byte	(.L104-.L4)/2
  71 003a FD00     		.2byte	(.L2-.L4)/2
  72 003c 5C07     		.2byte	(.L103-.L4)/2
  73 003e 4904     		.2byte	(.L102-.L4)/2
  74 0040 C106     		.2byte	(.L101-.L4)/2
  75 0042 AE06     		.2byte	(.L100-.L4)/2
  76 0044 FD00     		.2byte	(.L2-.L4)/2
  77 0046 FD00     		.2byte	(.L2-.L4)/2
  78 0048 FD00     		.2byte	(.L2-.L4)/2
  79 004a FD00     		.2byte	(.L2-.L4)/2
  80 004c FD00     		.2byte	(.L2-.L4)/2
  81 004e FD00     		.2byte	(.L2-.L4)/2
  82 0050 A406     		.2byte	(.L99-.L4)/2
  83 0052 9D06     		.2byte	(.L98-.L4)/2
  84 0054 FD00     		.2byte	(.L2-.L4)/2
  85 0056 FD00     		.2byte	(.L2-.L4)/2
  86 0058 FD00     		.2byte	(.L2-.L4)/2
  87 005a FD00     		.2byte	(.L2-.L4)/2
  88 005c FD00     		.2byte	(.L2-.L4)/2
  89 005e FD00     		.2byte	(.L2-.L4)/2
  90 0060 FD00     		.2byte	(.L2-.L4)/2
  91 0062 FD00     		.2byte	(.L2-.L4)/2
  92 0064 C005     		.2byte	(.L97-.L4)/2
  93 0066 B905     		.2byte	(.L96-.L4)/2
  94 0068 B205     		.2byte	(.L95-.L4)/2
  95 006a 9F05     		.2byte	(.L94-.L4)/2
  96 006c FD03     		.2byte	(.L93-.L4)/2
  97 006e EA03     		.2byte	(.L92-.L4)/2
  98 0070 FD00     		.2byte	(.L2-.L4)/2
  99 0072 FD00     		.2byte	(.L2-.L4)/2
 100 0074 FD00     		.2byte	(.L2-.L4)/2
 101 0076 FD00     		.2byte	(.L2-.L4)/2
 102 0078 5006     		.2byte	(.L91-.L4)/2
 103 007a FD00     		.2byte	(.L2-.L4)/2
 104 007c D703     		.2byte	(.L90-.L4)/2
 105 007e C403     		.2byte	(.L89-.L4)/2
 106 0080 B103     		.2byte	(.L88-.L4)/2
 107 0082 7303     		.2byte	(.L87-.L4)/2
 108 0084 6003     		.2byte	(.L86-.L4)/2
 109 0086 3D06     		.2byte	(.L85-.L4)/2
 110 0088 2A06     		.2byte	(.L84-.L4)/2
 111 008a FD00     		.2byte	(.L2-.L4)/2
 112 008c 1706     		.2byte	(.L83-.L4)/2
 113 008e 0406     		.2byte	(.L82-.L4)/2
 114 0090 FD00     		.2byte	(.L2-.L4)/2
 115 0092 FD00     		.2byte	(.L2-.L4)/2
 116 0094 FD00     		.2byte	(.L2-.L4)/2
 117 0096 9805     		.2byte	(.L81-.L4)/2
 118 0098 9105     		.2byte	(.L80-.L4)/2
 119 009a 9606     		.2byte	(.L79-.L4)/2
 120 009c FD00     		.2byte	(.L2-.L4)/2
 121 009e FD00     		.2byte	(.L2-.L4)/2
 122 00a0 7E05     		.2byte	(.L78-.L4)/2
 123 00a2 3607     		.2byte	(.L77-.L4)/2
 124 00a4 FD00     		.2byte	(.L2-.L4)/2
 125 00a6 2307     		.2byte	(.L76-.L4)/2
 126 00a8 4907     		.2byte	(.L75-.L4)/2
 127 00aa CA05     		.2byte	(.L74-.L4)/2
 128 00ac 3604     		.2byte	(.L73-.L4)/2
 129 00ae 2304     		.2byte	(.L72-.L4)/2
 130 00b0 6306     		.2byte	(.L71-.L4)/2
 131 00b2 1004     		.2byte	(.L70-.L4)/2
 132 00b4 0205     		.2byte	(.L69-.L4)/2
 133 00b6 EF04     		.2byte	(.L68-.L4)/2
 134 00b8 2F05     		.2byte	(.L67-.L4)/2
 135 00ba DC04     		.2byte	(.L66-.L4)/2
 136 00bc 1C05     		.2byte	(.L65-.L4)/2
 137 00be 9004     		.2byte	(.L64-.L4)/2
 138 00c0 7D04     		.2byte	(.L63-.L4)/2
 139 00c2 6A04     		.2byte	(.L62-.L4)/2
 140 00c4 C904     		.2byte	(.L61-.L4)/2
 141 00c6 B604     		.2byte	(.L60-.L4)/2
 142 00c8 6B05     		.2byte	(.L59-.L4)/2
 143 00ca A304     		.2byte	(.L58-.L4)/2
 144 00cc 5903     		.2byte	(.L57-.L4)/2
 145 00ce 5203     		.2byte	(.L56-.L4)/2
 146 00d0 1505     		.2byte	(.L55-.L4)/2
 147 00d2 FD00     		.2byte	(.L2-.L4)/2
 148 00d4 FD00     		.2byte	(.L2-.L4)/2
 149 00d6 FD00     		.2byte	(.L2-.L4)/2
 150 00d8 FD00     		.2byte	(.L2-.L4)/2
 151 00da FD00     		.2byte	(.L2-.L4)/2
 152 00dc 3F03     		.2byte	(.L54-.L4)/2
 153 00de F902     		.2byte	(.L53-.L4)/2
 154 00e0 E602     		.2byte	(.L52-.L4)/2
 155 00e2 1903     		.2byte	(.L51-.L4)/2
 156 00e4 D302     		.2byte	(.L50-.L4)/2
 157 00e6 8702     		.2byte	(.L49-.L4)/2
 158 00e8 7402     		.2byte	(.L48-.L4)/2
 159 00ea 6102     		.2byte	(.L47-.L4)/2
 160 00ec 4E02     		.2byte	(.L46-.L4)/2
 161 00ee FD00     		.2byte	(.L2-.L4)/2
 162 00f0 C002     		.2byte	(.L45-.L4)/2
 163 00f2 AD02     		.2byte	(.L44-.L4)/2
 164 00f4 FD00     		.2byte	(.L2-.L4)/2
 165 00f6 FD00     		.2byte	(.L2-.L4)/2
 166 00f8 2C03     		.2byte	(.L43-.L4)/2
 167 00fa 9A02     		.2byte	(.L42-.L4)/2
 168 00fc 4702     		.2byte	(.L41-.L4)/2
 169 00fe 3A02     		.2byte	(.L40-.L4)/2
 170 0100 0C03     		.2byte	(.L39-.L4)/2
 171 0102 FD00     		.2byte	(.L2-.L4)/2
 172 0104 FD00     		.2byte	(.L2-.L4)/2
 173 0106 FD00     		.2byte	(.L2-.L4)/2
 174 0108 FD00     		.2byte	(.L2-.L4)/2
 175 010a FD00     		.2byte	(.L2-.L4)/2
 176 010c FD00     		.2byte	(.L2-.L4)/2
 177 010e FD00     		.2byte	(.L2-.L4)/2
 178 0110 FD00     		.2byte	(.L2-.L4)/2
 179 0112 FD00     		.2byte	(.L2-.L4)/2
 180 0114 FD00     		.2byte	(.L2-.L4)/2
 181 0116 FD00     		.2byte	(.L2-.L4)/2
 182 0118 2702     		.2byte	(.L38-.L4)/2
 183 011a 1402     		.2byte	(.L37-.L4)/2
 184 011c 0102     		.2byte	(.L36-.L4)/2
 185 011e EE01     		.2byte	(.L35-.L4)/2
 186 0120 FD00     		.2byte	(.L2-.L4)/2
 187 0122 FD00     		.2byte	(.L2-.L4)/2
 188 0124 FD00     		.2byte	(.L2-.L4)/2
 189 0126 FD00     		.2byte	(.L2-.L4)/2
 190 0128 FD00     		.2byte	(.L2-.L4)/2
 191 012a FD00     		.2byte	(.L2-.L4)/2
 192 012c FD00     		.2byte	(.L2-.L4)/2
 193 012e FD00     		.2byte	(.L2-.L4)/2
 194 0130 FD00     		.2byte	(.L2-.L4)/2
 195 0132 FD00     		.2byte	(.L2-.L4)/2
 196 0134 FD00     		.2byte	(.L2-.L4)/2
 197 0136 FD00     		.2byte	(.L2-.L4)/2
 198 0138 FD00     		.2byte	(.L2-.L4)/2
 199 013a FD00     		.2byte	(.L2-.L4)/2
 200 013c FD00     		.2byte	(.L2-.L4)/2
 201 013e FD00     		.2byte	(.L2-.L4)/2
 202 0140 FD00     		.2byte	(.L2-.L4)/2
 203 0142 FD00     		.2byte	(.L2-.L4)/2
 204 0144 FD00     		.2byte	(.L2-.L4)/2
 205 0146 FD00     		.2byte	(.L2-.L4)/2
 206 0148 FD00     		.2byte	(.L2-.L4)/2
 207 014a FD00     		.2byte	(.L2-.L4)/2
 208 014c FD00     		.2byte	(.L2-.L4)/2
 209 014e FD00     		.2byte	(.L2-.L4)/2
 210 0150 FD00     		.2byte	(.L2-.L4)/2
 211 0152 FD00     		.2byte	(.L2-.L4)/2
 212 0154 FD00     		.2byte	(.L2-.L4)/2
 213 0156 FD00     		.2byte	(.L2-.L4)/2
 214 0158 FD00     		.2byte	(.L2-.L4)/2
 215 015a FD00     		.2byte	(.L2-.L4)/2
 216 015c FD00     		.2byte	(.L2-.L4)/2
 217 015e FD00     		.2byte	(.L2-.L4)/2
 218 0160 FD00     		.2byte	(.L2-.L4)/2
 219 0162 FD00     		.2byte	(.L2-.L4)/2
 220 0164 FD00     		.2byte	(.L2-.L4)/2
 221 0166 FD00     		.2byte	(.L2-.L4)/2
 222 0168 FD00     		.2byte	(.L2-.L4)/2
 223 016a FD00     		.2byte	(.L2-.L4)/2
 224 016c FD00     		.2byte	(.L2-.L4)/2
 225 016e FD00     		.2byte	(.L2-.L4)/2
 226 0170 FD00     		.2byte	(.L2-.L4)/2
 227 0172 FD00     		.2byte	(.L2-.L4)/2
 228 0174 FD00     		.2byte	(.L2-.L4)/2
 229 0176 FD00     		.2byte	(.L2-.L4)/2
 230 0178 FD00     		.2byte	(.L2-.L4)/2
 231 017a FD00     		.2byte	(.L2-.L4)/2
 232 017c FD00     		.2byte	(.L2-.L4)/2
 233 017e FD00     		.2byte	(.L2-.L4)/2
 234 0180 FD00     		.2byte	(.L2-.L4)/2
 235 0182 FD00     		.2byte	(.L2-.L4)/2
 236 0184 FD00     		.2byte	(.L2-.L4)/2
 237 0186 FD00     		.2byte	(.L2-.L4)/2
 238 0188 FD00     		.2byte	(.L2-.L4)/2
 239 018a FD00     		.2byte	(.L2-.L4)/2
 240 018c FD00     		.2byte	(.L2-.L4)/2
 241 018e FD00     		.2byte	(.L2-.L4)/2
 242 0190 FD00     		.2byte	(.L2-.L4)/2
 243 0192 FD00     		.2byte	(.L2-.L4)/2
 244 0194 FD00     		.2byte	(.L2-.L4)/2
 245 0196 FD00     		.2byte	(.L2-.L4)/2
 246 0198 FD00     		.2byte	(.L2-.L4)/2
 247 019a FD00     		.2byte	(.L2-.L4)/2
 248 019c FD00     		.2byte	(.L2-.L4)/2
 249 019e FD00     		.2byte	(.L2-.L4)/2
 250 01a0 FD00     		.2byte	(.L2-.L4)/2
 251 01a2 FD00     		.2byte	(.L2-.L4)/2
 252 01a4 FD00     		.2byte	(.L2-.L4)/2
 253 01a6 FD00     		.2byte	(.L2-.L4)/2
 254 01a8 FD00     		.2byte	(.L2-.L4)/2
 255 01aa FD00     		.2byte	(.L2-.L4)/2
 256 01ac FD00     		.2byte	(.L2-.L4)/2
 257 01ae FD00     		.2byte	(.L2-.L4)/2
 258 01b0 FD00     		.2byte	(.L2-.L4)/2
 259 01b2 FD00     		.2byte	(.L2-.L4)/2
 260 01b4 FD00     		.2byte	(.L2-.L4)/2
 261 01b6 FD00     		.2byte	(.L2-.L4)/2
 262 01b8 FD00     		.2byte	(.L2-.L4)/2
 263 01ba FD00     		.2byte	(.L2-.L4)/2
 264 01bc FD00     		.2byte	(.L2-.L4)/2
 265 01be FD00     		.2byte	(.L2-.L4)/2
 266 01c0 FD00     		.2byte	(.L2-.L4)/2
 267 01c2 FD00     		.2byte	(.L2-.L4)/2
 268 01c4 FD00     		.2byte	(.L2-.L4)/2
 269 01c6 FD00     		.2byte	(.L2-.L4)/2
 270 01c8 FD00     		.2byte	(.L2-.L4)/2
 271 01ca FD00     		.2byte	(.L2-.L4)/2
 272 01cc E701     		.2byte	(.L34-.L4)/2
 273 01ce E001     		.2byte	(.L33-.L4)/2
 274 01d0 D901     		.2byte	(.L32-.L4)/2
 275 01d2 D201     		.2byte	(.L31-.L4)/2
 276 01d4 CB01     		.2byte	(.L30-.L4)/2
 277 01d6 C401     		.2byte	(.L29-.L4)/2
 278 01d8 BD01     		.2byte	(.L28-.L4)/2
 279 01da B601     		.2byte	(.L27-.L4)/2
 280 01dc AF01     		.2byte	(.L26-.L4)/2
 281 01de A801     		.2byte	(.L25-.L4)/2
 282 01e0 A101     		.2byte	(.L24-.L4)/2
 283 01e2 9A01     		.2byte	(.L23-.L4)/2
 284 01e4 9301     		.2byte	(.L22-.L4)/2
 285 01e6 8C01     		.2byte	(.L21-.L4)/2
 286 01e8 6F01     		.2byte	(.L20-.L4)/2
 287 01ea 8501     		.2byte	(.L19-.L4)/2
 288 01ec 2D01     		.2byte	(.L18-.L4)/2
 289 01ee 7E01     		.2byte	(.L17-.L4)/2
 290 01f0 4501     		.2byte	(.L16-.L4)/2
 291 01f2 FD00     		.2byte	(.L2-.L4)/2
 292 01f4 7501     		.2byte	(.L15-.L4)/2
 293 01f6 1B01     		.2byte	(.L14-.L4)/2
 294 01f8 5401     		.2byte	(.L13-.L4)/2
 295 01fa 4B01     		.2byte	(.L12-.L4)/2
 296 01fc 5D01     		.2byte	(.L11-.L4)/2
 297 01fe 2401     		.2byte	(.L10-.L4)/2
 298 0200 3C01     		.2byte	(.L9-.L4)/2
 299 0202 3301     		.2byte	(.L8-.L4)/2
 300 0204 6601     		.2byte	(.L7-.L4)/2
 301 0206 1201     		.2byte	(.L6-.L4)/2
 302 0208 0901     		.2byte	(.L5-.L4)/2
 303 020a FD00     		.2byte	(.L2-.L4)/2
 304 020c FD00     		.2byte	(.L2-.L4)/2
 305 020e FD00     		.2byte	(.L2-.L4)/2
 306 0210 FD00     		.2byte	(.L2-.L4)/2
 307 0212 0001     		.2byte	(.L3-.L4)/2
 308              		.p2align 1
 309              	.L2:
 336:TMCL.c        **** 		{
 337:TMCL.c        **** 			// ===== ADC settings =====
 338:TMCL.c        **** 
 339:TMCL.c        **** 			case 3: // adc_I0_raw
 340:TMCL.c        **** 				if (command == TMCL_GAP)
 341:TMCL.c        **** 				{
 342:TMCL.c        **** 					tmc4671_writeInt(DEFAULT_MC, TMC4671_ADC_RAW_ADDR, ADC_RAW_ADDR_ADC_I1_RAW_ADC_I0_RAW);
 343:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_I0_
 344:TMCL.c        **** 				}
 345:TMCL.c        **** 				break;
 346:TMCL.c        **** 			case 4: // adc_I1_raw
 347:TMCL.c        **** 				if (command == TMCL_GAP)
 348:TMCL.c        **** 				{
 349:TMCL.c        **** 					tmc4671_writeInt(DEFAULT_MC, TMC4671_ADC_RAW_ADDR, ADC_RAW_ADDR_ADC_I1_RAW_ADC_I0_RAW);
 350:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_I1_
 351:TMCL.c        **** 				}
 352:TMCL.c        **** 				break;
 353:TMCL.c        **** 			case 5: // dual-shunt phase_A offset
 354:TMCL.c        **** 				if (command == TMCL_SAP) {
 355:TMCL.c        **** 					if (!bldc_setAdcI0Offset(ActualCommand.Value.Int32))
 356:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 357:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 358:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getAdcI0Offset();
 359:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 360:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I0_offset-(u32)&motorConf
 361:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 362:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 363:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I0_offset-(u32)&motorConfi
 364:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 365:TMCL.c        **** 				}
 366:TMCL.c        **** 				break;
 367:TMCL.c        **** 			case 6: // dual-shunt phase_B offset
 368:TMCL.c        **** 				if (command == TMCL_SAP) {
 369:TMCL.c        **** 					if (!bldc_setAdcI1Offset(ActualCommand.Value.Int32))
 370:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 371:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 372:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getAdcI1Offset();
 373:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 374:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I1_offset-(u32)&motorConf
 375:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 376:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 377:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I1_offset-(u32)&motorConfi
 378:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 379:TMCL.c        **** 				}
 380:TMCL.c        **** 				break;
 381:TMCL.c        **** 			case 7: // current_phase_U
 382:TMCL.c        **** 				if (command == TMCL_GAP)
 383:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IV, TMC4671_ADC_
 384:TMCL.c        **** 				break;
 385:TMCL.c        **** 			case 8: // current_phase_V
 386:TMCL.c        **** 				if (command == TMCL_GAP)
 387:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IWY_IUX, TMC4671
 388:TMCL.c        **** 				break;
 389:TMCL.c        **** 			case 9: // current_phase_W
 390:TMCL.c        **** 				if (command == TMCL_GAP)
 391:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IWY_IUX, TMC4671
 392:TMCL.c        **** 				break;
 393:TMCL.c        **** 			case 10: // dual shunt factor
 394:TMCL.c        **** 				if (command == TMCL_SAP) {
 395:TMCL.c        **** 					if (!bldc_setDualShuntFactor(ActualCommand.Value.Int32))
 396:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 397:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 398:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getDualShuntFactor();
 399:TMCL.c        **** 				}
 400:TMCL.c        **** 				else if (command == TMCL_STAP) {
 401:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.dualShuntFactor-(u32)&motorCo
 402:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 403:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 404:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.dualShuntFactor-(u32)&motorCon
 405:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 406:TMCL.c        **** 				}
 407:TMCL.c        **** 				break;
 408:TMCL.c        **** 
 409:TMCL.c        **** 			// ===== motor settings =====
 410:TMCL.c        **** 
 411:TMCL.c        **** 			case 12: // open loop current
 412:TMCL.c        **** 				if (command == TMCL_SAP) {
 413:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= 0) && (ActualCommand.Value.Int32 <= MAX_TORQUE))
 414:TMCL.c        **** 						motorConfig.openLoopCurrent = ActualCommand.Value.Int32;
 415:TMCL.c        **** 					else
 416:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 417:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 418:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.openLoopCurrent;
 419:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 420:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.openLoopCurrent-(u32)&motorCo
 421:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 422:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 423:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.openLoopCurrent-(u32)&motorCon
 424:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 425:TMCL.c        **** 				}
 426:TMCL.c        **** 				break;
 427:TMCL.c        **** 			case 14: // motor type
 428:TMCL.c        **** 				if (command == TMCL_GAP)
 429:TMCL.c        **** 				{
 430:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_THREE_PHASE_BLDC; // firmware supports only BLDC motor
 431:TMCL.c        **** 				}
 432:TMCL.c        **** 				break;
 433:TMCL.c        **** 			case 15: // commutation mode
 434:TMCL.c        **** 				if (command == TMCL_SAP) {
 435:TMCL.c        **** 					if (!bldc_setCommutationMode(ActualCommand.Value.Int32))
 436:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 437:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 438:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getCommutationMode();
 439:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 440:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.commutationMode-(u32)&motorCo
 441:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 442:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 443:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.commutationMode-(u32)&motorCon
 444:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 445:TMCL.c        **** 				}
 446:TMCL.c        **** 				break;
 447:TMCL.c        **** 
 448:TMCL.c        **** 			case 16: // actual open loop commutation angle
 449:TMCL.c        **** 				if (command == TMCL_GAP) {
 450:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getOpenLoopAngle();
 451:TMCL.c        **** 				}
 452:TMCL.c        **** 				break;
 453:TMCL.c        **** 			case 17: // actual encoder commutation angle
 454:TMCL.c        **** 				if (command == TMCL_GAP) {
 455:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getEncoderAngle();
 456:TMCL.c        **** 				}
 457:TMCL.c        **** 				break;
 458:TMCL.c        **** 			case 18: // actual digital hall angle
 459:TMCL.c        **** 				if (command == TMCL_GAP) {
 460:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getDigitalHallAngle();
 461:TMCL.c        **** 				}
 462:TMCL.c        **** 				break;
 463:TMCL.c        **** 
 464:TMCL.c        **** 			case 20: // torque P
 465:TMCL.c        **** 				if (command == TMCL_SAP)
 466:TMCL.c        **** 				{
 467:TMCL.c        **** 					motorConfig.pidTorque_P_param = ActualCommand.Value.Int32;
 468:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_P_MASK, TMC4671_PID_FLUX_P
 469:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_TORQUE_P_TORQUE_I, TMC4671_PID_TORQUE_P_MASK, TMC4671_PID_
 470:TMCL.c        **** 				}
 471:TMCL.c        **** 				else if (command == TMCL_GAP)
 472:TMCL.c        **** 				{
 473:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.pidTorque_P_param;
 474:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 475:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_P_param-(u32)&motor
 476:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 477:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 478:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_P_param-(u32)&motorC
 479:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 480:TMCL.c        **** 				}
 481:TMCL.c        **** 				break;
 482:TMCL.c        **** 			case 21: // torque I
 483:TMCL.c        **** 				if (command == TMCL_SAP)
 484:TMCL.c        **** 				{
 485:TMCL.c        **** 					motorConfig.pidTorque_I_param = ActualCommand.Value.Int32;
 486:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_I_MASK, TMC4671_PID_FLUX_I
 487:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_TORQUE_P_TORQUE_I, TMC4671_PID_TORQUE_I_MASK, TMC4671_PID_
 488:TMCL.c        **** 				}
 489:TMCL.c        **** 				else if (command == TMCL_GAP)
 490:TMCL.c        **** 				{
 491:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.pidTorque_I_param;
 492:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 493:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_I_param-(u32)&motor
 494:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 495:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 496:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_I_param-(u32)&motorC
 497:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 498:TMCL.c        **** 				}
 499:TMCL.c        **** 				break;
 500:TMCL.c        **** 			case 22: // velocity P
 501:TMCL.c        **** 				if (command == TMCL_SAP)
 502:TMCL.c        **** 				{
 503:TMCL.c        **** 					motorConfig.pidVelocity_P_param = ActualCommand.Value.Int32;
 504:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_P_MASK, TMC467
 505:TMCL.c        **** 				}
 506:TMCL.c        **** 				else if (command == TMCL_GAP)
 507:TMCL.c        **** 				{
 508:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.pidVelocity_P_param;
 509:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 510:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_P_param-(u32)&mot
 511:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 512:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 513:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_P_param-(u32)&moto
 514:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 515:TMCL.c        **** 				}
 516:TMCL.c        **** 				break;
 517:TMCL.c        **** 			case 23: // velocity I
 518:TMCL.c        **** 				if (command == TMCL_SAP)
 519:TMCL.c        **** 				{
 520:TMCL.c        **** 					motorConfig.pidVelocity_I_param = ActualCommand.Value.Int32;
 521:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_I_MASK, TMC467
 522:TMCL.c        **** 				}
 523:TMCL.c        **** 				else if (command == TMCL_GAP)
 524:TMCL.c        **** 				{
 525:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.pidVelocity_I_param;
 526:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 527:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_I_param-(u32)&mot
 528:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 529:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 530:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_I_param-(u32)&moto
 531:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 532:TMCL.c        **** 				}
 533:TMCL.c        **** 				break;
 534:TMCL.c        **** 
 535:TMCL.c        **** 			// ===== torque mode settings =====
 536:TMCL.c        **** 
 537:TMCL.c        **** 			case 30: // target torque
 538:TMCL.c        **** 				if (command == TMCL_SAP) {
 539:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= -MAX_TORQUE) && (ActualCommand.Value.Int32 <= MAX_TORQUE))
 540:TMCL.c        **** 						bldc_setTargetMotorCurrent(ActualCommand.Value.Int32);
 541:TMCL.c        **** 					else
 542:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 543:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 544:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getTargetMotorCurrent();
 545:TMCL.c        **** 				}
 546:TMCL.c        **** 				break;
 547:TMCL.c        **** 			case 31: // actual torque
 548:TMCL.c        **** 				if (command == TMCL_GAP)
 549:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getActualMotorCurrent();
 550:TMCL.c        **** 					//ActualReply.Value.Int32 = actualTorque();
 551:TMCL.c        **** 				break;
 552:TMCL.c        **** 
 553:TMCL.c        **** 			// ===== velocity mode settings =====
 554:TMCL.c        **** 
 555:TMCL.c        **** 			case 40: // target velocity
 556:TMCL.c        **** 				if (command == TMCL_SAP)
 557:TMCL.c        **** 				{
 558:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= -MAX_VELOCITY) && (ActualCommand.Value.Int32 <= MAX_VELOCITY)
 559:TMCL.c        **** 						bldc_setTargetVelocity(ActualCommand.Value.Int32);
 560:TMCL.c        **** 					else
 561:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 562:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 563:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getTargetVelocity();
 564:TMCL.c        **** 				}
 565:TMCL.c        **** 				break;
 566:TMCL.c        **** 			case 41: // ramp velocity
 567:TMCL.c        **** 				if (command == TMCL_GAP) {
 568:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getRampGeneratorVelocity();
 569:TMCL.c        **** 				}
 570:TMCL.c        **** 				break;
 571:TMCL.c        **** 			case 42: // actual velocity
 572:TMCL.c        **** 				if (command == TMCL_GAP) {
 573:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getActualVelocity();
 574:TMCL.c        **** 				}
 575:TMCL.c        **** 				break;
 576:TMCL.c        **** 			case 43: // max velocity
 577:TMCL.c        **** 				if (command == TMCL_SAP) {
 578:TMCL.c        **** 					if (!bldc_setMaxVelocity(ActualCommand.Value.Int32))
 579:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 580:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 581:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maxPositioningSpeed;
 582:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 583:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxPositioningSpeed-(u32)&mot
 584:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 585:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 586:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxPositioningSpeed-(u32)&moto
 587:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 588:TMCL.c        **** 				}
 589:TMCL.c        **** 				break;
 590:TMCL.c        **** 			case 44: // acceleration
 591:TMCL.c        **** 				if (command == TMCL_SAP) {
 592:TMCL.c        **** 					if (!bldc_setAcceleration(ActualCommand.Value.Int32))
 593:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 594:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 595:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.acceleration;
 596:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 597:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.acceleration-(u32)&motorConfi
 598:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 599:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 600:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.acceleration-(u32)&motorConfig
 601:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 602:TMCL.c        **** 				}
 603:TMCL.c        **** 				break;
 604:TMCL.c        **** 			case 45: // enable velocity ramp
 605:TMCL.c        **** 				if (command == TMCL_SAP) {
 606:TMCL.c        **** 					if (!bldc_setRampEnabled(ActualCommand.Value.Int32))
 607:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 608:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 609:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.useVelocityRamp ? 1:0;
 610:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 611:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.useVelocityRamp-(u32)&motorCo
 612:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 613:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 614:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.useVelocityRamp-(u32)&motorCon
 615:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 616:TMCL.c        **** 				}
 617:TMCL.c        **** 				break;
 618:TMCL.c        **** 
 619:TMCL.c        **** 				// ===== pedal sensor settings =====
 620:TMCL.c        **** 
 621:TMCL.c        **** 			case 50: // pedal pulses per rotation
 622:TMCL.c        **** 				if (command == TMCL_SAP)
 623:TMCL.c        **** 				{
 624:TMCL.c        **** 					if ((ActualCommand.Value.Int32 >= 0) && (ActualCommand.Value.Int32 <= MAX_PEDAL_POSITIONS))
 625:TMCL.c        **** 						motorConfig.pedalPulsesPerRotation = ActualCommand.Value.Int32;
 626:TMCL.c        **** 					else
 627:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 628:TMCL.c        **** 				} else if (command == TMCL_GAP)
 629:TMCL.c        **** 				{
 630:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.pedalPulsesPerRotation;
 631:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 632:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalPulsesPerRotation-(u32)&
 633:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 634:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 635:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalPulsesPerRotation-(u32)&m
 636:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 637:TMCL.c        **** 				}
 638:TMCL.c        **** 				break;
 639:TMCL.c        **** 			case 52: // pedal sense delay
 640:TMCL.c        **** 				if (command == TMCL_SAP)
 641:TMCL.c        **** 				{
 642:TMCL.c        **** 					motorConfig.pedalSenseDelay = ActualCommand.Value.Int32;
 643:TMCL.c        **** 				} else if (command == TMCL_GAP)
 644:TMCL.c        **** 				{
 645:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.pedalSenseDelay;
 646:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 647:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalSenseDelay-(u32)&motorCo
 648:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 649:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 650:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalSenseDelay-(u32)&motorCon
 651:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 652:TMCL.c        **** 				}
 653:TMCL.c        **** 				break;
 654:TMCL.c        **** 			case 53: // torque sensor gain
 655:TMCL.c        **** 				if (command == TMCL_SAP)
 656:TMCL.c        **** 				{
 657:TMCL.c        **** 					motorConfig.torqueSensorGain = ActualCommand.Value.Int32;
 658:TMCL.c        **** 				} else if (command == TMCL_GAP)
 659:TMCL.c        **** 				{
 660:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torqueSensorGain;
 661:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 662:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorGain-(u32)&motorC
 663:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 664:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 665:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorGain-(u32)&motorCo
 666:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 667:TMCL.c        **** 				}
 668:TMCL.c        **** 				break;
 669:TMCL.c        **** 			case 54: // torque sensor offset
 670:TMCL.c        **** 				if (command == TMCL_SAP)
 671:TMCL.c        **** 				{
 672:TMCL.c        **** 					motorConfig.torqueSensorOffset = ActualCommand.Value.Int32;
 673:TMCL.c        **** 				} else if (command == TMCL_GAP)
 674:TMCL.c        **** 				{
 675:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torqueSensorOffset;
 676:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 677:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorOffset-(u32)&moto
 678:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 679:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 680:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorOffset-(u32)&motor
 681:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 682:TMCL.c        **** 				}
 683:TMCL.c        **** 				break;
 684:TMCL.c        **** 			case 55: // torque dead band
 685:TMCL.c        **** 				if (command == TMCL_SAP)
 686:TMCL.c        **** 				{
 687:TMCL.c        **** 					motorConfig.torqueDeadband = ActualCommand.Value.Int32;
 688:TMCL.c        **** 				} else if (command == TMCL_GAP)
 689:TMCL.c        **** 				{
 690:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torqueDeadband;
 691:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 692:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueDeadband-(u32)&motorCon
 693:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 694:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 695:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueDeadband-(u32)&motorConf
 696:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 697:TMCL.c        **** 				}
 698:TMCL.c        **** 				break;
 699:TMCL.c        **** 			case 56: // assist cut out distance
 700:TMCL.c        **** 				if (command == TMCL_SAP)
 701:TMCL.c        **** 				{
 702:TMCL.c        **** 					motorConfig.assistCutOutDistance = ActualCommand.Value.Int32;
 703:TMCL.c        **** 					sensor_updateCutOffTime();
 704:TMCL.c        **** 				} else if (command == TMCL_GAP)
 705:TMCL.c        **** 				{
 706:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.assistCutOutDistance;
 707:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 708:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.assistCutOutDistance-(u32)&mo
 709:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 710:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 711:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.assistCutOutDistance-(u32)&mot
 712:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 713:TMCL.c        **** 				}
 714:TMCL.c        **** 				break;
 715:TMCL.c        **** 			case 57: // initial right torque
 716:TMCL.c        **** 				if (command == TMCL_SAP)
 717:TMCL.c        **** 				{
 718:TMCL.c        **** 					motorConfig.initialRightTorque = ActualCommand.Value.Int32;
 719:TMCL.c        **** 				} else if (command == TMCL_GAP)
 720:TMCL.c        **** 				{
 721:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.initialRightTorque;
 722:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 723:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorque-(u32)&moto
 724:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 725:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 726:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorque-(u32)&motor
 727:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 728:TMCL.c        **** 				}
 729:TMCL.c        **** 				break;
 730:TMCL.c        **** 			case 58: // initial tight torque speed
 731:TMCL.c        **** 				if (command == TMCL_SAP)
 732:TMCL.c        **** 				{
 733:TMCL.c        **** 					motorConfig.initialRightTorqueSpeed = ActualCommand.Value.Int32 * VelocityScaling;
 734:TMCL.c        **** 				} else if (command == TMCL_GAP)
 735:TMCL.c        **** 				{
 736:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.initialRightTorqueSpeed / VelocityScaling;
 737:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 738:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorqueSpeed-(u32)
 739:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 740:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 741:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorqueSpeed-(u32)&
 742:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 743:TMCL.c        **** 				}
 744:TMCL.c        **** 				break;
 745:TMCL.c        **** 			case 60: // left to right ratio
 746:TMCL.c        **** 				if (command == TMCL_SAP)
 747:TMCL.c        **** 				{
 748:TMCL.c        **** 					motorConfig.leftRightRatio = ActualCommand.Value.Int32;
 749:TMCL.c        **** 				} else if (command == TMCL_GAP)
 750:TMCL.c        **** 				{
 751:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.leftRightRatio;
 752:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 753:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.leftRightRatio-(u32)&motorCon
 754:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 755:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 756:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.leftRightRatio-(u32)&motorConf
 757:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 758:TMCL.c        **** 				}
 759:TMCL.c        **** 				break;
 760:TMCL.c        **** 			case 61: // average to sport mode
 761:TMCL.c        **** 				if (command == TMCL_SAP)
 762:TMCL.c        **** 				{
 763:TMCL.c        **** 					motorConfig.averageSportMode = ActualCommand.Value.Int32;
 764:TMCL.c        **** 				} else if (command == TMCL_GAP)
 765:TMCL.c        **** 				{
 766:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.averageSportMode;
 767:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 768:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.averageSportMode-(u32)&motorC
 769:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 770:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 771:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.averageSportMode-(u32)&motorCo
 772:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 773:TMCL.c        **** 				}
 774:TMCL.c        **** 				break;
 775:TMCL.c        **** 
 776:TMCL.c        **** 			case 65: // pedal direction
 777:TMCL.c        **** 				if (command == TMCL_GAP)
 778:TMCL.c        **** 				{
 779:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalDirection();
 780:TMCL.c        **** 				}
 781:TMCL.c        **** 				break;
 782:TMCL.c        **** 			case 66: // pedal motor enable
 783:TMCL.c        **** 				if (command == TMCL_GAP)
 784:TMCL.c        **** 				{
 785:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalMotorEnable();
 786:TMCL.c        **** 				}
 787:TMCL.c        **** 				break;
 788:TMCL.c        **** 			case 67: // average torque
 789:TMCL.c        **** 				if (command == TMCL_GAP)
 790:TMCL.c        **** 				{
 791:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_averageTorque();
 792:TMCL.c        **** 				}
 793:TMCL.c        **** 				break;
 794:TMCL.c        **** 
 795:TMCL.c        **** 			// ===== motor power settings =====
 796:TMCL.c        **** 
 797:TMCL.c        **** 			case 70: // positive motoring ramp time
 798:TMCL.c        **** 				if (command == TMCL_SAP)
 799:TMCL.c        **** 				{
 800:TMCL.c        **** 					motorConfig.positiveMotoringRampTime = ActualCommand.Value.Int32;
 801:TMCL.c        **** 				} else if (command == TMCL_GAP)
 802:TMCL.c        **** 				{
 803:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.positiveMotoringRampTime;
 804:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 805:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.positiveMotoringRampTime-(u32
 806:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 807:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 808:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.positiveMotoringRampTime-(u32)
 809:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 810:TMCL.c        **** 				}
 811:TMCL.c        **** 				break;
 812:TMCL.c        **** 			case 71: // negative motoring ramp time
 813:TMCL.c        **** 				if (command == TMCL_SAP)
 814:TMCL.c        **** 				{
 815:TMCL.c        **** 					motorConfig.negativeMotoringRampTime = ActualCommand.Value.Int32;
 816:TMCL.c        **** 				} else if (command == TMCL_GAP)
 817:TMCL.c        **** 				{
 818:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.negativeMotoringRampTime;
 819:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 820:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.negativeMotoringRampTime-(u32
 821:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 822:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 823:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.negativeMotoringRampTime-(u32)
 824:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 825:TMCL.c        **** 				}
 826:TMCL.c        **** 				break;
 827:TMCL.c        **** 
 828:TMCL.c        **** 			case 73: // speed 0
 829:TMCL.c        **** 				if (command == TMCL_SAP)
 830:TMCL.c        **** 				{
 831:TMCL.c        **** 					motorConfig.speed_0 = ActualCommand.Value.Int32 * VelocityScaling;
 832:TMCL.c        **** 				} else if (command == TMCL_GAP)
 833:TMCL.c        **** 				{
 834:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_0 / VelocityScaling;
 835:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 836:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_0-(u32)&motorConfig,
 837:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 838:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 839:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_0-(u32)&motorConfig,
 840:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 841:TMCL.c        **** 				}
 842:TMCL.c        **** 				break;
 843:TMCL.c        **** 			case 74: // speed 1
 844:TMCL.c        **** 				if (command == TMCL_SAP)
 845:TMCL.c        **** 				{
 846:TMCL.c        **** 					motorConfig.speed_1 = ActualCommand.Value.Int32 * VelocityScaling;
 847:TMCL.c        **** 				} else if (command == TMCL_GAP)
 848:TMCL.c        **** 				{
 849:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_1 / VelocityScaling;
 850:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 851:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_1-(u32)&motorConfig,
 852:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 853:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 854:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_1-(u32)&motorConfig,
 855:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 856:TMCL.c        **** 				}
 857:TMCL.c        **** 				break;
 858:TMCL.c        **** 			case 75: // speed 2
 859:TMCL.c        **** 				if (command == TMCL_SAP)
 860:TMCL.c        **** 				{
 861:TMCL.c        **** 					motorConfig.speed_2 = ActualCommand.Value.Int32 * VelocityScaling;
 862:TMCL.c        **** 				} else if (command == TMCL_GAP)
 863:TMCL.c        **** 				{
 864:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_2 / VelocityScaling;
 865:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 866:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_2-(u32)&motorConfig,
 867:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 868:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 869:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_2-(u32)&motorConfig,
 870:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 871:TMCL.c        **** 				}
 872:TMCL.c        **** 				break;
 873:TMCL.c        **** 			case 76: // speed 3
 874:TMCL.c        **** 				if (command == TMCL_SAP)
 875:TMCL.c        **** 				{
 876:TMCL.c        **** 					motorConfig.speed_3 = ActualCommand.Value.Int32 * VelocityScaling;
 877:TMCL.c        **** 				} else if (command == TMCL_GAP)
 878:TMCL.c        **** 				{
 879:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_3 / VelocityScaling;
 880:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 881:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_3-(u32)&motorConfig,
 882:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 883:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 884:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_3-(u32)&motorConfig,
 885:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 886:TMCL.c        **** 				}
 887:TMCL.c        **** 				break;
 888:TMCL.c        **** 			case 77: // speed 4
 889:TMCL.c        **** 				if (command == TMCL_SAP)
 890:TMCL.c        **** 				{
 891:TMCL.c        **** 					motorConfig.speed_4 = ActualCommand.Value.Int32 * VelocityScaling;
 892:TMCL.c        **** 				} else if (command == TMCL_GAP)
 893:TMCL.c        **** 				{
 894:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_4 / VelocityScaling;
 895:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 896:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_4-(u32)&motorConfig,
 897:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 898:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 899:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_4-(u32)&motorConfig,
 900:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 901:TMCL.c        **** 				}
 902:TMCL.c        **** 				break;
 903:TMCL.c        **** 			case 78: // speed 5
 904:TMCL.c        **** 				if (command == TMCL_SAP)
 905:TMCL.c        **** 				{
 906:TMCL.c        **** 					motorConfig.speed_5 = ActualCommand.Value.Int32 * VelocityScaling;
 907:TMCL.c        **** 				} else if (command == TMCL_GAP)
 908:TMCL.c        **** 				{
 909:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_5 / VelocityScaling;
 910:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 911:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_5-(u32)&motorConfig,
 912:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 913:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 914:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_5-(u32)&motorConfig,
 915:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 916:TMCL.c        **** 				}
 917:TMCL.c        **** 				break;
 918:TMCL.c        **** 			case 79: // speed 6
 919:TMCL.c        **** 				if (command == TMCL_SAP)
 920:TMCL.c        **** 				{
 921:TMCL.c        **** 					motorConfig.speed_6 = ActualCommand.Value.Int32 * VelocityScaling;
 922:TMCL.c        **** 				} else if (command == TMCL_GAP)
 923:TMCL.c        **** 				{
 924:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_6 / VelocityScaling;
 925:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 926:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_6-(u32)&motorConfig,
 927:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 928:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 929:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_6-(u32)&motorConfig,
 930:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 931:TMCL.c        **** 				}
 932:TMCL.c        **** 				break;
 933:TMCL.c        **** 			case 80: // speed 7
 934:TMCL.c        **** 				if (command == TMCL_SAP)
 935:TMCL.c        **** 				{
 936:TMCL.c        **** 					motorConfig.speed_7 = ActualCommand.Value.Int32 * VelocityScaling;
 937:TMCL.c        **** 				} else if (command == TMCL_GAP)
 938:TMCL.c        **** 				{
 939:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_7 / VelocityScaling;
 940:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 941:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_7-(u32)&motorConfig,
 942:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 943:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 944:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_7-(u32)&motorConfig,
 945:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 946:TMCL.c        **** 				}
 947:TMCL.c        **** 				break;
 948:TMCL.c        **** 			case 81: // speed 8
 949:TMCL.c        **** 				if (command == TMCL_SAP)
 950:TMCL.c        **** 				{
 951:TMCL.c        **** 					motorConfig.speed_8 = ActualCommand.Value.Int32 * VelocityScaling;
 952:TMCL.c        **** 				} else if (command == TMCL_GAP)
 953:TMCL.c        **** 				{
 954:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.speed_8 / VelocityScaling;
 955:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 956:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_8-(u32)&motorConfig,
 957:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 958:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 959:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_8-(u32)&motorConfig,
 960:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 961:TMCL.c        **** 				}
 962:TMCL.c        **** 				break;
 963:TMCL.c        **** 			case 82: // torque 0
 964:TMCL.c        **** 				if (command == TMCL_SAP)
 965:TMCL.c        **** 				{
 966:TMCL.c        **** 					motorConfig.torque_0 = ActualCommand.Value.Int32;
 967:TMCL.c        **** 				} else if (command == TMCL_GAP)
 968:TMCL.c        **** 				{
 969:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_0;
 970:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 971:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_0-(u32)&motorConfig,
 972:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 973:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 974:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_0-(u32)&motorConfig,
 975:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 976:TMCL.c        **** 				}
 977:TMCL.c        **** 				break;
 978:TMCL.c        **** 			case 83: // torque 1
 979:TMCL.c        **** 				if (command == TMCL_SAP)
 980:TMCL.c        **** 				{
 981:TMCL.c        **** 					motorConfig.torque_1 = ActualCommand.Value.Int32;
 982:TMCL.c        **** 				} else if (command == TMCL_GAP)
 983:TMCL.c        **** 				{
 984:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_1;
 985:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 986:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_1-(u32)&motorConfig,
 987:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 988:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
 989:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_1-(u32)&motorConfig,
 990:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 991:TMCL.c        **** 				}
 992:TMCL.c        **** 				break;
 993:TMCL.c        **** 			case 84: // torque 2
 994:TMCL.c        **** 				if (command == TMCL_SAP)
 995:TMCL.c        **** 				{
 996:TMCL.c        **** 					motorConfig.torque_2 = ActualCommand.Value.Int32;
 997:TMCL.c        **** 				} else if (command == TMCL_GAP)
 998:TMCL.c        **** 				{
 999:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_2;
1000:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1001:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_2-(u32)&motorConfig,
1002:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
1003:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1004:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_2-(u32)&motorConfig,
1005:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
1006:TMCL.c        **** 				}
1007:TMCL.c        **** 				break;
1008:TMCL.c        **** 			case 85: // torque 3
1009:TMCL.c        **** 				if (command == TMCL_SAP)
1010:TMCL.c        **** 				{
1011:TMCL.c        **** 					motorConfig.torque_3 = ActualCommand.Value.Int32;
1012:TMCL.c        **** 				} else if (command == TMCL_GAP)
1013:TMCL.c        **** 				{
1014:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_3;
1015:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1016:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_3-(u32)&motorConfig,
1017:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
1018:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1019:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_3-(u32)&motorConfig,
1020:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
1021:TMCL.c        **** 				}
1022:TMCL.c        **** 				break;
1023:TMCL.c        **** 			case 86: // torque 4
1024:TMCL.c        **** 				if (command == TMCL_SAP)
1025:TMCL.c        **** 				{
1026:TMCL.c        **** 					motorConfig.torque_4 = ActualCommand.Value.Int32;
1027:TMCL.c        **** 				} else if (command == TMCL_GAP)
1028:TMCL.c        **** 				{
1029:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_4;
1030:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1031:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_4-(u32)&motorConfig,
1032:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
1033:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1034:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_4-(u32)&motorConfig,
1035:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
1036:TMCL.c        **** 				}
1037:TMCL.c        **** 				break;
1038:TMCL.c        **** 			case 87: // torque 5
1039:TMCL.c        **** 				if (command == TMCL_SAP)
1040:TMCL.c        **** 				{
1041:TMCL.c        **** 					motorConfig.torque_5 = ActualCommand.Value.Int32;
1042:TMCL.c        **** 				} else if (command == TMCL_GAP)
1043:TMCL.c        **** 				{
1044:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_5;
1045:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1046:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_5-(u32)&motorConfig,
1047:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
1048:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1049:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_5-(u32)&motorConfig,
1050:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
1051:TMCL.c        **** 				}
1052:TMCL.c        **** 				break;
1053:TMCL.c        **** 			case 88: // torque 6
1054:TMCL.c        **** 				if (command == TMCL_SAP)
1055:TMCL.c        **** 				{
1056:TMCL.c        **** 					motorConfig.torque_6 = ActualCommand.Value.Int32;
1057:TMCL.c        **** 				} else if (command == TMCL_GAP)
1058:TMCL.c        **** 				{
1059:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_6;
1060:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1061:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_6-(u32)&motorConfig,
1062:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
1063:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1064:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_6-(u32)&motorConfig,
1065:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
1066:TMCL.c        **** 				}
1067:TMCL.c        **** 				break;
1068:TMCL.c        **** 			case 89: // torque 7
1069:TMCL.c        **** 				if (command == TMCL_SAP)
1070:TMCL.c        **** 				{
1071:TMCL.c        **** 					motorConfig.torque_7 = ActualCommand.Value.Int32;
1072:TMCL.c        **** 				} else if (command == TMCL_GAP)
1073:TMCL.c        **** 				{
1074:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_7;
1075:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1076:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_7-(u32)&motorConfig,
1077:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
1078:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1079:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_7-(u32)&motorConfig,
1080:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
1081:TMCL.c        **** 				}
1082:TMCL.c        **** 				break;
1083:TMCL.c        **** 			case 90: // torque 8
1084:TMCL.c        **** 				if (command == TMCL_SAP)
1085:TMCL.c        **** 				{
1086:TMCL.c        **** 					motorConfig.torque_8 = ActualCommand.Value.Int32;
1087:TMCL.c        **** 				} else if (command == TMCL_GAP)
1088:TMCL.c        **** 				{
1089:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.torque_8;
1090:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1091:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_8-(u32)&motorConfig,
1092:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
1093:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1094:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_8-(u32)&motorConfig,
1095:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
1096:TMCL.c        **** 				}
1097:TMCL.c        **** 				break;
1098:TMCL.c        **** 
1099:TMCL.c        **** 			case 91: // maximum speed
1100:TMCL.c        **** 				if (command == TMCL_SAP)
1101:TMCL.c        **** 				{
1102:TMCL.c        **** 					motorConfig.maximumSpeed = ActualCommand.Value.Int32;
1103:TMCL.c        **** 					sensor_updateCutOffTime();
1104:TMCL.c        **** 				} else if (command == TMCL_GAP)
1105:TMCL.c        **** 				{
1106:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maximumSpeed;
1107:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1108:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumSpeed-(u32)&motorConfi
1109:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
1110:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1111:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumSpeed-(u32)&motorConfig
1112:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
1113:TMCL.c        **** 				}
1114:TMCL.c        **** 				break;
1115:TMCL.c        **** 			case 92: // actual torque/speed map
1116:TMCL.c        **** 				if (command == TMCL_GAP)
1117:TMCL.c        **** 				{
1118:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_actualMapSpeedTorque();
1119:TMCL.c        **** 				}
1120:TMCL.c        **** 				break;
1121:TMCL.c        **** 			case 93: // actual gain
1122:TMCL.c        **** 				if (command == TMCL_GAP)
1123:TMCL.c        **** 				{
1124:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_actualGain();
1125:TMCL.c        **** 				}
1126:TMCL.c        **** 				break;
1127:TMCL.c        **** 			case 94: // actual torque limit
1128:TMCL.c        **** 				if (command == TMCL_GAP)
1129:TMCL.c        **** 				{
1130:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_actualTorqueLimit();
1131:TMCL.c        **** 				}
1132:TMCL.c        **** 				break;
1133:TMCL.c        **** 
1134:TMCL.c        **** 			// ===== motor settings =====
1135:TMCL.c        **** 
1136:TMCL.c        **** 			case 100: // maximum current
1137:TMCL.c        **** 				if (command == TMCL_SAP)
1138:TMCL.c        **** 				{
1139:TMCL.c        **** 					motorConfig.maximumCurrent = ActualCommand.Value.Int32;
1140:TMCL.c        **** 					tmc4671_setTorqueFluxLimit_mA(DEFAULT_MC, motorConfig.dualShuntFactor, motorConfig.maximumCurr
1141:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1142:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maximumCurrent;
1143:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1144:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumCurrent-(u32)&motorCon
1145:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
1146:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1147:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumCurrent-(u32)&motorConf
1148:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
1149:TMCL.c        **** 				}
1150:TMCL.c        **** 				break;
1151:TMCL.c        **** 			case 101: // pole pairs
1152:TMCL.c        **** 				if (command == TMCL_SAP)
1153:TMCL.c        **** 				{
1154:TMCL.c        **** 					motorConfig.polePairs = ActualCommand.Value.Int32;
1155:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, T
1156:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1157:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getMotorPolePairs();
1158:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1159:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.polePairs-(u32)&motorConfig,
1160:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
1161:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1162:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.polePairs-(u32)&motorConfig,
1163:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
1164:TMCL.c        **** 				}
1165:TMCL.c        **** 				break;
1166:TMCL.c        **** 			case 102: // gear ratio
1167:TMCL.c        **** 				if (command == TMCL_SAP)
1168:TMCL.c        **** 				{
1169:TMCL.c        **** 					motorConfig.gearRatio = ActualCommand.Value.Int32;
1170:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1171:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.gearRatio;
1172:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1173:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.gearRatio-(u32)&motorConfig,
1174:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
1175:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1176:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.gearRatio-(u32)&motorConfig,
1177:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
1178:TMCL.c        **** 				}
1179:TMCL.c        **** 				break;
1180:TMCL.c        **** 			case 103: // wheel diameter
1181:TMCL.c        **** 				if (command == TMCL_SAP)
1182:TMCL.c        **** 				{
1183:TMCL.c        **** 					motorConfig.wheelDiameter = ActualCommand.Value.Int32;
1184:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1185:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.wheelDiameter;
1186:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1187:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelDiameter-(u32)&motorConf
1188:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
1189:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1190:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelDiameter-(u32)&motorConfi
1191:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
1192:TMCL.c        **** 				}
1193:TMCL.c        **** 				break;
1194:TMCL.c        **** 			case 104: // wheel pulses per rotation
1195:TMCL.c        **** 				if (command == TMCL_SAP)
1196:TMCL.c        **** 				{
1197:TMCL.c        **** 					motorConfig.wheelPulsesPerRotation = ActualCommand.Value.Int32;
1198:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1199:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.wheelPulsesPerRotation;
1200:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1201:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelPulsesPerRotation-(u32)&
1202:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
1203:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1204:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelPulsesPerRotation-(u32)&m
1205:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
1206:TMCL.c        **** 				}
1207:TMCL.c        **** 				break;
1208:TMCL.c        **** 			case 105: // hall sensor offset
1209:TMCL.c        **** 				if (command == TMCL_SAP)
1210:TMCL.c        **** 				{
1211:TMCL.c        **** 					motorConfig.hallOffset = ActualCommand.Value.Int32;
1212:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_PHI_E_PHI_M_OFFSET, TMC4671_HALL_PHI_E_OFFSET_MA
1213:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1214:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallOffset;
1215:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1216:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallOffset-(u32)&motorConfig,
1217:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
1218:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1219:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallOffset-(u32)&motorConfig,
1220:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
1221:TMCL.c        **** 				}
1222:TMCL.c        **** 				break;
1223:TMCL.c        **** 			case 106: // hall sensor polarity
1224:TMCL.c        **** 				if (command == TMCL_SAP)
1225:TMCL.c        **** 				{
1226:TMCL.c        **** 					motorConfig.hallPolarity = ActualCommand.Value.Int32;
1227:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_MODE, TMC4671_HALL_POLARITY_MASK, TMC4671_HALL_P
1228:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1229:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallPolarity;
1230:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1231:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallPolarity-(u32)&motorConfi
1232:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
1233:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1234:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallPolarity-(u32)&motorConfig
1235:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
1236:TMCL.c        **** 				}
1237:TMCL.c        **** 				break;
1238:TMCL.c        **** 			case 107: // hall sensor interpolation
1239:TMCL.c        **** 				if (command == TMCL_SAP)
1240:TMCL.c        **** 				{
1241:TMCL.c        **** 					motorConfig.hallInterpolation = ActualCommand.Value.Int32;
1242:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_INTERPOLATION_MASK, TMC4671_HALL_INTER
1243:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1244:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallInterpolation;
1245:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1246:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallInterpolation-(u32)&motor
1247:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
1248:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1249:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallInterpolation-(u32)&motorC
1250:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
1251:TMCL.c        **** 				}
1252:TMCL.c        **** 				break;
1253:TMCL.c        **** 			case 108: // hall sensor direction
1254:TMCL.c        **** 				if (command == TMCL_SAP)
1255:TMCL.c        **** 				{
1256:TMCL.c        **** 					motorConfig.hallDirection = ActualCommand.Value.Int32;
1257:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_DIRECTION_MASK, TMC4671_HALL_DIRECTION
1258:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1259:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallDirection;
1260:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1261:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallDirection-(u32)&motorConf
1262:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
1263:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1264:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallDirection-(u32)&motorConfi
1265:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
1266:TMCL.c        **** 				}
1267:TMCL.c        **** 				break;
1268:TMCL.c        **** 			case 110: // current regulator bandwidth
1269:TMCL.c        **** 				if (command == TMCL_SAP)
1270:TMCL.c        **** 				{
1271:TMCL.c        **** 					motorConfig.currentRegulatorBandwidth = ActualCommand.Value.Int32;
1272:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1273:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.currentRegulatorBandwidth;
1274:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1275:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.currentRegulatorBandwidth-(u3
1276:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
1277:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1278:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.currentRegulatorBandwidth-(u32
1279:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
1280:TMCL.c        **** 				}
1281:TMCL.c        **** 				break;
1282:TMCL.c        **** 			case 111: // minimum motor current
1283:TMCL.c        **** 				if (command == TMCL_SAP)
1284:TMCL.c        **** 				{
1285:TMCL.c        **** 					motorConfig.minimumMotorCurrent = ActualCommand.Value.Int32;
1286:TMCL.c        **** 				} else if (command == TMCL_GAP)
1287:TMCL.c        **** 				{
1288:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.minimumMotorCurrent;
1289:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1290:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minimumMotorCurrent-(u32)&mot
1291:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
1292:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1293:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minimumMotorCurrent-(u32)&moto
1294:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
1295:TMCL.c        **** 				}
1296:TMCL.c        **** 				break;
1297:TMCL.c        **** 			case 114: // swap motor A and C phase
1298:TMCL.c        **** 				if (command == TMCL_SAP)
1299:TMCL.c        **** 				{
1300:TMCL.c        **** 					motorConfig.swapMotorAAndCPhase = ActualCommand.Value.Int32;
1301:TMCL.c        **** 				} else if (command == TMCL_GAP)
1302:TMCL.c        **** 				{
1303:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.swapMotorAAndCPhase;
1304:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1305:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.swapMotorAAndCPhase-(u32)&mot
1306:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
1307:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1308:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.swapMotorAAndCPhase-(u32)&moto
1309:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
1310:TMCL.c        **** 				}
1311:TMCL.c        **** 				break;
1312:TMCL.c        **** 			case 115: // motor test modes
1313:TMCL.c        **** 				if (command == TMCL_SAP)
1314:TMCL.c        **** 				{
1315:TMCL.c        **** 					motorConfig.motorTestModes = ActualCommand.Value.Int32;
1316:TMCL.c        **** 				} else if (command == TMCL_GAP)
1317:TMCL.c        **** 				{
1318:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.motorTestModes;
1319:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1320:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.motorTestModes-(u32)&motorCon
1321:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
1322:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1323:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.motorTestModes-(u32)&motorConf
1324:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
1325:TMCL.c        **** 				}
1326:TMCL.c        **** 				break;
1327:TMCL.c        **** 			case 116: // actual speed [rpm]
1328:TMCL.c        **** 				if (command == TMCL_GAP)
1329:TMCL.c        **** 				{
1330:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_motorVelocity();
1331:TMCL.c        **** 				}
1332:TMCL.c        **** 				break;
1333:TMCL.c        **** 			case 117: // actual speed [m/s]
1334:TMCL.c        **** 				if (command == TMCL_GAP)
1335:TMCL.c        **** 				{
1336:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_wheelVelocity()*10/36/VelocityScaling;
1337:TMCL.c        **** 				}
1338:TMCL.c        **** 				break;
1339:TMCL.c        **** 			case 118: // actual speed [km/h]
1340:TMCL.c        **** 				if (command == TMCL_GAP)
1341:TMCL.c        **** 				{
1342:TMCL.c        **** #if defined(INTERNAL_SHORTY)
1343:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_wheelMotorVelocity()/VelocityScaling;
1344:TMCL.c        **** #else
1345:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_wheelVelocity()/VelocityScaling;
1346:TMCL.c        **** #endif
1347:TMCL.c        **** 				}
1348:TMCL.c        **** 				break;
1349:TMCL.c        **** 			case 130: // min battery voltage
1350:TMCL.c        **** 				if (command == TMCL_SAP)
1351:TMCL.c        **** 				{
1352:TMCL.c        **** 					motorConfig.minBatteryVoltage = ActualCommand.Value.Int32*BATTERYSCALING;
1353:TMCL.c        **** 				} else if (command == TMCL_GAP)
1354:TMCL.c        **** 				{
1355:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.minBatteryVoltage/BATTERYSCALING;
1356:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1357:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minBatteryVoltage-(u32)&motor
1358:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
1359:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1360:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minBatteryVoltage-(u32)&motorC
1361:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
1362:TMCL.c        **** 				}
1363:TMCL.c        **** 				break;
1364:TMCL.c        **** 			case 131: // max battery voltage
1365:TMCL.c        **** 				if (command == TMCL_SAP)
1366:TMCL.c        **** 				{
1367:TMCL.c        **** 					motorConfig.maxBatteryVoltage = ActualCommand.Value.Int32*BATTERYSCALING;
1368:TMCL.c        **** 					button_updateBatteryStatusFactor();
1369:TMCL.c        **** 				} else if (command == TMCL_GAP)
1370:TMCL.c        **** 				{
1371:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maxBatteryVoltage/BATTERYSCALING;
1372:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1373:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxBatteryVoltage-(u32)&motor
1374:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
1375:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1376:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxBatteryVoltage-(u32)&motorC
1377:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
1378:TMCL.c        **** 				}
1379:TMCL.c        **** 				break;
1380:TMCL.c        **** 			case 132: // cut off voltage
1381:TMCL.c        **** 				if (command == TMCL_SAP)
1382:TMCL.c        **** 				{
1383:TMCL.c        **** 					motorConfig.cutOffVoltage = ActualCommand.Value.Int32*BATTERYSCALING;
1384:TMCL.c        **** 					button_updateBatteryStatusFactor();
1385:TMCL.c        **** 				} else if (command == TMCL_GAP)
1386:TMCL.c        **** 				{
1387:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.cutOffVoltage/BATTERYSCALING;
1388:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1389:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.cutOffVoltage-(u32)&motorConf
1390:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
1391:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1392:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.cutOffVoltage-(u32)&motorConfi
1393:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
1394:TMCL.c        **** 				}
1395:TMCL.c        **** 				break;
1396:TMCL.c        **** 			case 133: // battery-saving timer
1397:TMCL.c        **** 				if (command == TMCL_SAP)
1398:TMCL.c        **** 				{
1399:TMCL.c        **** 					button_resetSavingTimer();
1400:TMCL.c        **** 					motorConfig.batterySavingTimer = ActualCommand.Value.Int32;
1401:TMCL.c        **** 				} else if (command == TMCL_GAP)
1402:TMCL.c        **** 				{
1403:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.batterySavingTimer;
1404:TMCL.c        **** 				} else if (command == TMCL_STAP) {
1405:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.batterySavingTimer-(u32)&moto
1406:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
1407:TMCL.c        **** 				} else if (command == TMCL_RSAP) {
1408:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.batterySavingTimer-(u32)&motor
1409:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
1410:TMCL.c        **** 				}
1411:TMCL.c        **** 				break;
1412:TMCL.c        **** 
1413:TMCL.c        **** 			// ===== general info =====
1414:TMCL.c        **** 
1415:TMCL.c        **** 			case 220: // supply voltage
1416:TMCL.c        **** 				if (command == TMCL_GAP) {
1417:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getSupplyVoltage();
1418:TMCL.c        **** 				}
1419:TMCL.c        **** 				break;
1420:TMCL.c        **** 			case 221: // driver temperature
1421:TMCL.c        **** 				if (command == TMCL_GAP) {
1422:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getMotorTemperature();
1423:TMCL.c        **** 				}
1424:TMCL.c        **** 				break;
1425:TMCL.c        **** 			case 222: // status flags
1426:TMCL.c        **** 				if (command == TMCL_GAP) {
1427:TMCL.c        **** 					ActualReply.Value.Int32 = flags_getAllStatusFlags();
1428:TMCL.c        **** 				}
1429:TMCL.c        **** 				break;
1430:TMCL.c        **** 			case 223: // 12V
1431:TMCL.c        **** 				if (command == TMCL_GAP) {
1432:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput12V();
1433:TMCL.c        **** 				}
1434:TMCL.c        **** 				break;
1435:TMCL.c        **** 			case 224: // 6V
1436:TMCL.c        **** 				if (command == TMCL_GAP) {
1437:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput6V();
1438:TMCL.c        **** 				}
1439:TMCL.c        **** 				break;
1440:TMCL.c        **** 			case 225: // 5V
1441:TMCL.c        **** 				if (command == TMCL_GAP) {
1442:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput5V();
1443:TMCL.c        **** 				}
1444:TMCL.c        **** 				break;
1445:TMCL.c        **** 			case 226: // actual pedal torque
1446:TMCL.c        **** 				if (command == TMCL_GAP) {
1447:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_actualPedalTorque();
1448:TMCL.c        **** 				}
1449:TMCL.c        **** 				break;
1450:TMCL.c        **** 			case 227: // left pedal torque
1451:TMCL.c        **** 				if (command == TMCL_GAP) {
1452:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_leftPedalTorque();
1453:TMCL.c        **** 				}
1454:TMCL.c        **** 				break;
1455:TMCL.c        **** 			case 228: //right pedal torque
1456:TMCL.c        **** 				if (command == TMCL_GAP) {
1457:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_rightPedalTorque();
1458:TMCL.c        **** 				}
1459:TMCL.c        **** 				break;
1460:TMCL.c        **** 			case 229: // target pedal torque
1461:TMCL.c        **** 				if (command == TMCL_GAP) {
1462:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_targetpedalTorque();
1463:TMCL.c        **** 				}
1464:TMCL.c        **** 				break;
1465:TMCL.c        **** 
1466:TMCL.c        **** 			// ===== system info =====
1467:TMCL.c        **** 
1468:TMCL.c        **** 			case 230:
1469:TMCL.c        **** 				if (command == TMCL_GAP)
1470:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getMainLoopsPerSecond();
1471:TMCL.c        **** 				break;
1472:TMCL.c        **** 			case 231:
1473:TMCL.c        **** 				if (command == TMCL_GAP)
1474:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getCurrentLoopsPerSecond();
1475:TMCL.c        **** 				break;
1476:TMCL.c        **** 			case 232:
1477:TMCL.c        **** 				if (command == TMCL_GAP)
1478:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getVelocityLoopsPerSecond();
1479:TMCL.c        **** 				break;
1480:TMCL.c        **** 
1481:TMCL.c        **** 			// ===== pedal sensor info =====
1482:TMCL.c        **** 
1483:TMCL.c        **** 			case 233:
1484:TMCL.c        **** 				if (command == TMCL_GAP)
1485:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalCounter();
1486:TMCL.c        **** 				break;
1487:TMCL.c        **** 			case 234:
1488:TMCL.c        **** 				if (command == TMCL_GAP)
1489:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalPosition();
1490:TMCL.c        **** 				break;
1491:TMCL.c        **** 			case 235:
1492:TMCL.c        **** 				if (command == TMCL_GAP)
1493:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalCounterPer500MSeconds();
1494:TMCL.c        **** 				break;
1495:TMCL.c        **** 			case 236:
1496:TMCL.c        **** 				if (command == TMCL_GAP)
1497:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalVelocity();
1498:TMCL.c        **** 				break;
1499:TMCL.c        **** 			case 237:
1500:TMCL.c        **** 				if (command == TMCL_GAP)
1501:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_filteredPedalVelocity();
1502:TMCL.c        **** 				break;
1503:TMCL.c        **** 			case 238:
1504:TMCL.c        **** 				if (command == TMCL_GAP)
1505:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_filteredPedalVelocityFast();
1506:TMCL.c        **** 				break;
1507:TMCL.c        **** 
1508:TMCL.c        **** 			// ===== debugging =====
1509:TMCL.c        **** 
1510:TMCL.c        **** 			case 240: // debug value 0
1511:TMCL.c        **** 				if (command == TMCL_SAP)
1512:TMCL.c        **** 					debug_setTestVar0(ActualCommand.Value.Int32);
1513:TMCL.c        **** 				else if (command == TMCL_GAP)
1514:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar0();
1515:TMCL.c        **** 				break;
1516:TMCL.c        **** 			case 241: // debug value 1
1517:TMCL.c        **** 				if (command == TMCL_SAP)
1518:TMCL.c        **** 					debug_setTestVar1(ActualCommand.Value.Int32);
1519:TMCL.c        **** 				else if (command == TMCL_GAP)
1520:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar1();
1521:TMCL.c        **** 				break;
1522:TMCL.c        **** 			case 242: // debug value 2
1523:TMCL.c        **** 				if (command == TMCL_SAP)
1524:TMCL.c        **** 					debug_setTestVar2(ActualCommand.Value.Int32);
1525:TMCL.c        **** 				else if (command == TMCL_GAP)
1526:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar2();
1527:TMCL.c        **** 				break;
1528:TMCL.c        **** 			case 243: // debug value 3
1529:TMCL.c        **** 				if (command == TMCL_SAP)
1530:TMCL.c        **** 					debug_setTestVar3(ActualCommand.Value.Int32);
1531:TMCL.c        **** 				else if (command == TMCL_GAP)
1532:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar3();
1533:TMCL.c        **** 				break;
1534:TMCL.c        **** 			case 244: // debug value 4
1535:TMCL.c        **** 				if (command == TMCL_SAP)
1536:TMCL.c        **** 					debug_setTestVar4(ActualCommand.Value.Int32);
1537:TMCL.c        **** 				else if (command == TMCL_GAP)
1538:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar4();
1539:TMCL.c        **** 				break;
1540:TMCL.c        **** 			case 245: // debug value 5
1541:TMCL.c        **** 				if (command == TMCL_SAP)
1542:TMCL.c        **** 					debug_setTestVar5(ActualCommand.Value.Int32);
1543:TMCL.c        **** 				else if (command == TMCL_GAP)
1544:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar5();
1545:TMCL.c        **** 				break;
1546:TMCL.c        **** 			case 246: // debug value 6
1547:TMCL.c        **** 				if (command == TMCL_SAP)
1548:TMCL.c        **** 					debug_setTestVar6(ActualCommand.Value.Int32);
1549:TMCL.c        **** 				else if (command == TMCL_GAP)
1550:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar6();
1551:TMCL.c        **** 				break;
1552:TMCL.c        **** 			case 247: // debug value 7
1553:TMCL.c        **** 				if (command == TMCL_SAP)
1554:TMCL.c        **** 					debug_setTestVar7(ActualCommand.Value.Int32);
1555:TMCL.c        **** 				else if (command == TMCL_GAP)
1556:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar7();
1557:TMCL.c        **** 				break;
1558:TMCL.c        **** 			case 248: // debug value 8
1559:TMCL.c        **** 				if (command == TMCL_SAP)
1560:TMCL.c        **** 					debug_setTestVar8(ActualCommand.Value.Int32);
1561:TMCL.c        **** 				else if (command == TMCL_GAP)
1562:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar8();
1563:TMCL.c        **** 				break;
1564:TMCL.c        **** 			case 249:
1565:TMCL.c        **** 				// debug value 9
1566:TMCL.c        **** 				if (command == TMCL_SAP)
1567:TMCL.c        **** 					debug_setTestVar9(ActualCommand.Value.Int32);
1568:TMCL.c        **** 				else if (command == TMCL_GAP)
1569:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar9();
1570:TMCL.c        **** 				break;
1571:TMCL.c        **** 
1572:TMCL.c        **** 			case 250: // filter for torque_actual
1573:TMCL.c        **** 				if (command == TMCL_SAP)
1574:TMCL.c        **** 					sensor_setFltActualTorque(ActualCommand.Value.Int32);
1575:TMCL.c        **** 				else if (command == TMCL_GAP)
1576:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_getFltActualTorque();
1577:TMCL.c        **** 				break;
1578:TMCL.c        **** 
1579:TMCL.c        **** 			case 255: // enable/disable mc & driver
1580:TMCL.c        **** 				if (command == TMCL_SAP)
1581:TMCL.c        **** 				{
1582:TMCL.c        **** 					(ActualCommand.Value.Int32 == 0) ? tmcm_disableDriver() : tmcm_enableDriver();
1583:TMCL.c        **** 				} else if (command == TMCL_GAP) {
1584:TMCL.c        **** 					ActualReply.Value.Int32 = tmcm_getDriverState();
1585:TMCL.c        **** 				}
1586:TMCL.c        **** 				break;
1587:TMCL.c        **** 			default:
1588:TMCL.c        **** 				ActualReply.Status = REPLY_WRONG_TYPE;
 310              		.loc 1 1588 5 is_stmt 1 view .LVU5
 311              		.loc 1 1588 24 is_stmt 0 view .LVU6
 312 0214 0323     		movs	r3, #3
 313 0216 2372     		strb	r3, [r4, #8]
1589:TMCL.c        **** 				break;
 314              		.loc 1 1589 5 is_stmt 1 view .LVU7
 315              	.L1:
1590:TMCL.c        **** 		}
1591:TMCL.c        **** 	} else {
1592:TMCL.c        **** 		ActualReply.Status = REPLY_INVALID_VALUE;
1593:TMCL.c        **** 	}
1594:TMCL.c        **** }
 316              		.loc 1 1594 1 is_stmt 0 view .LVU8
 317 0218 38BD     		pop	{r3, r4, r5, pc}
 318              	.L3:
1580:TMCL.c        **** 				{
 319              		.loc 1 1580 5 is_stmt 1 view .LVU9
1580:TMCL.c        **** 				{
 320              		.loc 1 1580 8 is_stmt 0 view .LVU10
 321 021a 0528     		cmp	r0, #5
 322 021c 00F03287 		beq	.L326
1583:TMCL.c        **** 					ActualReply.Value.Int32 = tmcm_getDriverState();
 323              		.loc 1 1583 12 is_stmt 1 view .LVU11
1583:TMCL.c        **** 					ActualReply.Value.Int32 = tmcm_getDriverState();
 324              		.loc 1 1583 15 is_stmt 0 view .LVU12
 325 0220 0628     		cmp	r0, #6
 326 0222 F9D1     		bne	.L1
1584:TMCL.c        **** 				}
 327              		.loc 1 1584 6 is_stmt 1 view .LVU13
1584:TMCL.c        **** 				}
 328              		.loc 1 1584 32 is_stmt 0 view .LVU14
 329 0224 FFF7FEFF 		bl	tmcm_getDriverState
 330              	.LVL1:
1584:TMCL.c        **** 				}
 331              		.loc 1 1584 32 view .LVU15
 332 0228 E060     		str	r0, [r4, #12]
 333              		.loc 1 1594 1 view .LVU16
 334 022a 38BD     		pop	{r3, r4, r5, pc}
 335              	.LVL2:
 336              	.L5:
1573:TMCL.c        **** 					sensor_setFltActualTorque(ActualCommand.Value.Int32);
 337              		.loc 1 1573 5 is_stmt 1 view .LVU17
1573:TMCL.c        **** 					sensor_setFltActualTorque(ActualCommand.Value.Int32);
 338              		.loc 1 1573 8 is_stmt 0 view .LVU18
 339 022c 0528     		cmp	r0, #5
 340 022e 01F09481 		beq	.L327
1575:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_getFltActualTorque();
 341              		.loc 1 1575 10 is_stmt 1 view .LVU19
1575:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_getFltActualTorque();
 342              		.loc 1 1575 13 is_stmt 0 view .LVU20
 343 0232 0628     		cmp	r0, #6
 344 0234 F0D1     		bne	.L1
1576:TMCL.c        **** 				break;
 345              		.loc 1 1576 6 is_stmt 1 view .LVU21
1576:TMCL.c        **** 				break;
 346              		.loc 1 1576 32 is_stmt 0 view .LVU22
 347 0236 FFF7FEFF 		bl	sensor_getFltActualTorque
 348              	.LVL3:
1576:TMCL.c        **** 				break;
 349              		.loc 1 1576 30 view .LVU23
 350 023a E060     		str	r0, [r4, #12]
 351              		.loc 1 1594 1 view .LVU24
 352 023c 38BD     		pop	{r3, r4, r5, pc}
 353              	.LVL4:
 354              	.L6:
1566:TMCL.c        **** 					debug_setTestVar9(ActualCommand.Value.Int32);
 355              		.loc 1 1566 5 is_stmt 1 view .LVU25
1566:TMCL.c        **** 					debug_setTestVar9(ActualCommand.Value.Int32);
 356              		.loc 1 1566 8 is_stmt 0 view .LVU26
 357 023e 0528     		cmp	r0, #5
 358 0240 01F0AE81 		beq	.L328
1568:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar9();
 359              		.loc 1 1568 10 is_stmt 1 view .LVU27
1568:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar9();
 360              		.loc 1 1568 13 is_stmt 0 view .LVU28
 361 0244 0628     		cmp	r0, #6
 362 0246 E7D1     		bne	.L1
1569:TMCL.c        **** 				break;
 363              		.loc 1 1569 6 is_stmt 1 view .LVU29
1569:TMCL.c        **** 				break;
 364              		.loc 1 1569 32 is_stmt 0 view .LVU30
 365 0248 FFF7FEFF 		bl	debug_getTestVar9
 366              	.LVL5:
1569:TMCL.c        **** 				break;
 367              		.loc 1 1569 30 view .LVU31
 368 024c E060     		str	r0, [r4, #12]
 369              		.loc 1 1594 1 view .LVU32
 370 024e 38BD     		pop	{r3, r4, r5, pc}
 371              	.LVL6:
 372              	.L14:
1517:TMCL.c        **** 					debug_setTestVar1(ActualCommand.Value.Int32);
 373              		.loc 1 1517 5 is_stmt 1 view .LVU33
1517:TMCL.c        **** 					debug_setTestVar1(ActualCommand.Value.Int32);
 374              		.loc 1 1517 8 is_stmt 0 view .LVU34
 375 0250 0528     		cmp	r0, #5
 376 0252 01F09681 		beq	.L329
1519:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar1();
 377              		.loc 1 1519 10 is_stmt 1 view .LVU35
1519:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar1();
 378              		.loc 1 1519 13 is_stmt 0 view .LVU36
 379 0256 0628     		cmp	r0, #6
 380 0258 DED1     		bne	.L1
1520:TMCL.c        **** 				break;
 381              		.loc 1 1520 6 is_stmt 1 view .LVU37
1520:TMCL.c        **** 				break;
 382              		.loc 1 1520 32 is_stmt 0 view .LVU38
 383 025a FFF7FEFF 		bl	debug_getTestVar1
 384              	.LVL7:
1520:TMCL.c        **** 				break;
 385              		.loc 1 1520 30 view .LVU39
 386 025e E060     		str	r0, [r4, #12]
 387              		.loc 1 1594 1 view .LVU40
 388 0260 38BD     		pop	{r3, r4, r5, pc}
 389              	.LVL8:
 390              	.L10:
1541:TMCL.c        **** 					debug_setTestVar5(ActualCommand.Value.Int32);
 391              		.loc 1 1541 5 is_stmt 1 view .LVU41
1541:TMCL.c        **** 					debug_setTestVar5(ActualCommand.Value.Int32);
 392              		.loc 1 1541 8 is_stmt 0 view .LVU42
 393 0262 0528     		cmp	r0, #5
 394 0264 01F08381 		beq	.L330
1543:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar5();
 395              		.loc 1 1543 10 is_stmt 1 view .LVU43
1543:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar5();
 396              		.loc 1 1543 13 is_stmt 0 view .LVU44
 397 0268 0628     		cmp	r0, #6
 398 026a D5D1     		bne	.L1
1544:TMCL.c        **** 				break;
 399              		.loc 1 1544 6 is_stmt 1 view .LVU45
1544:TMCL.c        **** 				break;
 400              		.loc 1 1544 32 is_stmt 0 view .LVU46
 401 026c FFF7FEFF 		bl	debug_getTestVar5
 402              	.LVL9:
1544:TMCL.c        **** 				break;
 403              		.loc 1 1544 30 view .LVU47
 404 0270 E060     		str	r0, [r4, #12]
 405              		.loc 1 1594 1 view .LVU48
 406 0272 38BD     		pop	{r3, r4, r5, pc}
 407              	.LVL10:
 408              	.L18:
1496:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalVelocity();
 409              		.loc 1 1496 5 is_stmt 1 view .LVU49
1496:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalVelocity();
 410              		.loc 1 1496 8 is_stmt 0 view .LVU50
 411 0274 0628     		cmp	r0, #6
 412 0276 CFD1     		bne	.L1
1497:TMCL.c        **** 				break;
 413              		.loc 1 1497 6 is_stmt 1 view .LVU51
1497:TMCL.c        **** 				break;
 414              		.loc 1 1497 32 is_stmt 0 view .LVU52
 415 0278 FFF7FEFF 		bl	sensor_pedalVelocity
 416              	.LVL11:
1497:TMCL.c        **** 				break;
 417              		.loc 1 1497 30 view .LVU53
 418 027c E060     		str	r0, [r4, #12]
 419              		.loc 1 1594 1 view .LVU54
 420 027e 38BD     		pop	{r3, r4, r5, pc}
 421              	.LVL12:
 422              	.L8:
1553:TMCL.c        **** 					debug_setTestVar7(ActualCommand.Value.Int32);
 423              		.loc 1 1553 5 is_stmt 1 view .LVU55
1553:TMCL.c        **** 					debug_setTestVar7(ActualCommand.Value.Int32);
 424              		.loc 1 1553 8 is_stmt 0 view .LVU56
 425 0280 0528     		cmp	r0, #5
 426 0282 01F0AD80 		beq	.L331
1555:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar7();
 427              		.loc 1 1555 10 is_stmt 1 view .LVU57
1555:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar7();
 428              		.loc 1 1555 13 is_stmt 0 view .LVU58
 429 0286 0628     		cmp	r0, #6
 430 0288 C6D1     		bne	.L1
1556:TMCL.c        **** 				break;
 431              		.loc 1 1556 6 is_stmt 1 view .LVU59
1556:TMCL.c        **** 				break;
 432              		.loc 1 1556 32 is_stmt 0 view .LVU60
 433 028a FFF7FEFF 		bl	debug_getTestVar7
 434              	.LVL13:
1556:TMCL.c        **** 				break;
 435              		.loc 1 1556 30 view .LVU61
 436 028e E060     		str	r0, [r4, #12]
 437              		.loc 1 1594 1 view .LVU62
 438 0290 38BD     		pop	{r3, r4, r5, pc}
 439              	.LVL14:
 440              	.L9:
1547:TMCL.c        **** 					debug_setTestVar6(ActualCommand.Value.Int32);
 441              		.loc 1 1547 5 is_stmt 1 view .LVU63
1547:TMCL.c        **** 					debug_setTestVar6(ActualCommand.Value.Int32);
 442              		.loc 1 1547 8 is_stmt 0 view .LVU64
 443 0292 0528     		cmp	r0, #5
 444 0294 01F08981 		beq	.L332
1549:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar6();
 445              		.loc 1 1549 10 is_stmt 1 view .LVU65
1549:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar6();
 446              		.loc 1 1549 13 is_stmt 0 view .LVU66
 447 0298 0628     		cmp	r0, #6
 448 029a BDD1     		bne	.L1
1550:TMCL.c        **** 				break;
 449              		.loc 1 1550 6 is_stmt 1 view .LVU67
1550:TMCL.c        **** 				break;
 450              		.loc 1 1550 32 is_stmt 0 view .LVU68
 451 029c FFF7FEFF 		bl	debug_getTestVar6
 452              	.LVL15:
1550:TMCL.c        **** 				break;
 453              		.loc 1 1550 30 view .LVU69
 454 02a0 E060     		str	r0, [r4, #12]
 455              		.loc 1 1594 1 view .LVU70
 456 02a2 38BD     		pop	{r3, r4, r5, pc}
 457              	.LVL16:
 458              	.L16:
1504:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_filteredPedalVelocityFast();
 459              		.loc 1 1504 5 is_stmt 1 view .LVU71
1504:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_filteredPedalVelocityFast();
 460              		.loc 1 1504 8 is_stmt 0 view .LVU72
 461 02a4 0628     		cmp	r0, #6
 462 02a6 B7D1     		bne	.L1
1505:TMCL.c        **** 				break;
 463              		.loc 1 1505 6 is_stmt 1 view .LVU73
1505:TMCL.c        **** 				break;
 464              		.loc 1 1505 32 is_stmt 0 view .LVU74
 465 02a8 FFF7FEFF 		bl	sensor_filteredPedalVelocityFast
 466              	.LVL17:
1505:TMCL.c        **** 				break;
 467              		.loc 1 1505 30 view .LVU75
 468 02ac E060     		str	r0, [r4, #12]
 469              		.loc 1 1594 1 view .LVU76
 470 02ae 38BD     		pop	{r3, r4, r5, pc}
 471              	.LVL18:
 472              	.L12:
1529:TMCL.c        **** 					debug_setTestVar3(ActualCommand.Value.Int32);
 473              		.loc 1 1529 5 is_stmt 1 view .LVU77
1529:TMCL.c        **** 					debug_setTestVar3(ActualCommand.Value.Int32);
 474              		.loc 1 1529 8 is_stmt 0 view .LVU78
 475 02b0 0528     		cmp	r0, #5
 476 02b2 01F07081 		beq	.L333
1531:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar3();
 477              		.loc 1 1531 10 is_stmt 1 view .LVU79
1531:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar3();
 478              		.loc 1 1531 13 is_stmt 0 view .LVU80
 479 02b6 0628     		cmp	r0, #6
 480 02b8 AED1     		bne	.L1
1532:TMCL.c        **** 				break;
 481              		.loc 1 1532 6 is_stmt 1 view .LVU81
1532:TMCL.c        **** 				break;
 482              		.loc 1 1532 32 is_stmt 0 view .LVU82
 483 02ba FFF7FEFF 		bl	debug_getTestVar3
 484              	.LVL19:
1532:TMCL.c        **** 				break;
 485              		.loc 1 1532 30 view .LVU83
 486 02be E060     		str	r0, [r4, #12]
 487              		.loc 1 1594 1 view .LVU84
 488 02c0 38BD     		pop	{r3, r4, r5, pc}
 489              	.LVL20:
 490              	.L13:
1523:TMCL.c        **** 					debug_setTestVar2(ActualCommand.Value.Int32);
 491              		.loc 1 1523 5 is_stmt 1 view .LVU85
1523:TMCL.c        **** 					debug_setTestVar2(ActualCommand.Value.Int32);
 492              		.loc 1 1523 8 is_stmt 0 view .LVU86
 493 02c2 0528     		cmp	r0, #5
 494 02c4 01F06281 		beq	.L334
1525:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar2();
 495              		.loc 1 1525 10 is_stmt 1 view .LVU87
1525:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar2();
 496              		.loc 1 1525 13 is_stmt 0 view .LVU88
 497 02c8 0628     		cmp	r0, #6
 498 02ca A5D1     		bne	.L1
1526:TMCL.c        **** 				break;
 499              		.loc 1 1526 6 is_stmt 1 view .LVU89
1526:TMCL.c        **** 				break;
 500              		.loc 1 1526 32 is_stmt 0 view .LVU90
 501 02cc FFF7FEFF 		bl	debug_getTestVar2
 502              	.LVL21:
1526:TMCL.c        **** 				break;
 503              		.loc 1 1526 30 view .LVU91
 504 02d0 E060     		str	r0, [r4, #12]
 505              		.loc 1 1594 1 view .LVU92
 506 02d2 38BD     		pop	{r3, r4, r5, pc}
 507              	.LVL22:
 508              	.L11:
1535:TMCL.c        **** 					debug_setTestVar4(ActualCommand.Value.Int32);
 509              		.loc 1 1535 5 is_stmt 1 view .LVU93
1535:TMCL.c        **** 					debug_setTestVar4(ActualCommand.Value.Int32);
 510              		.loc 1 1535 8 is_stmt 0 view .LVU94
 511 02d4 0528     		cmp	r0, #5
 512 02d6 01F04581 		beq	.L335
1537:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar4();
 513              		.loc 1 1537 10 is_stmt 1 view .LVU95
1537:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar4();
 514              		.loc 1 1537 13 is_stmt 0 view .LVU96
 515 02da 0628     		cmp	r0, #6
 516 02dc 9CD1     		bne	.L1
1538:TMCL.c        **** 				break;
 517              		.loc 1 1538 6 is_stmt 1 view .LVU97
1538:TMCL.c        **** 				break;
 518              		.loc 1 1538 32 is_stmt 0 view .LVU98
 519 02de FFF7FEFF 		bl	debug_getTestVar4
 520              	.LVL23:
1538:TMCL.c        **** 				break;
 521              		.loc 1 1538 30 view .LVU99
 522 02e2 E060     		str	r0, [r4, #12]
 523              		.loc 1 1594 1 view .LVU100
 524 02e4 38BD     		pop	{r3, r4, r5, pc}
 525              	.LVL24:
 526              	.L7:
1559:TMCL.c        **** 					debug_setTestVar8(ActualCommand.Value.Int32);
 527              		.loc 1 1559 5 is_stmt 1 view .LVU101
1559:TMCL.c        **** 					debug_setTestVar8(ActualCommand.Value.Int32);
 528              		.loc 1 1559 8 is_stmt 0 view .LVU102
 529 02e6 0528     		cmp	r0, #5
 530 02e8 01F04681 		beq	.L336
1561:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar8();
 531              		.loc 1 1561 10 is_stmt 1 view .LVU103
1561:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar8();
 532              		.loc 1 1561 13 is_stmt 0 view .LVU104
 533 02ec 0628     		cmp	r0, #6
 534 02ee 93D1     		bne	.L1
1562:TMCL.c        **** 				break;
 535              		.loc 1 1562 6 is_stmt 1 view .LVU105
1562:TMCL.c        **** 				break;
 536              		.loc 1 1562 32 is_stmt 0 view .LVU106
 537 02f0 FFF7FEFF 		bl	debug_getTestVar8
 538              	.LVL25:
1562:TMCL.c        **** 				break;
 539              		.loc 1 1562 30 view .LVU107
 540 02f4 E060     		str	r0, [r4, #12]
 541              		.loc 1 1594 1 view .LVU108
 542 02f6 38BD     		pop	{r3, r4, r5, pc}
 543              	.LVL26:
 544              	.L20:
1488:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalPosition();
 545              		.loc 1 1488 5 is_stmt 1 view .LVU109
1488:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalPosition();
 546              		.loc 1 1488 8 is_stmt 0 view .LVU110
 547 02f8 0628     		cmp	r0, #6
 548 02fa 8DD1     		bne	.L1
1489:TMCL.c        **** 				break;
 549              		.loc 1 1489 6 is_stmt 1 view .LVU111
1489:TMCL.c        **** 				break;
 550              		.loc 1 1489 32 is_stmt 0 view .LVU112
 551 02fc FFF7FEFF 		bl	sensor_pedalPosition
 552              	.LVL27:
1489:TMCL.c        **** 				break;
 553              		.loc 1 1489 30 view .LVU113
 554 0300 E060     		str	r0, [r4, #12]
 555              		.loc 1 1594 1 view .LVU114
 556 0302 38BD     		pop	{r3, r4, r5, pc}
 557              	.LVL28:
 558              	.L15:
1511:TMCL.c        **** 					debug_setTestVar0(ActualCommand.Value.Int32);
 559              		.loc 1 1511 5 is_stmt 1 view .LVU115
1511:TMCL.c        **** 					debug_setTestVar0(ActualCommand.Value.Int32);
 560              		.loc 1 1511 8 is_stmt 0 view .LVU116
 561 0304 0528     		cmp	r0, #5
 562 0306 01F05581 		beq	.L337
1513:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar0();
 563              		.loc 1 1513 10 is_stmt 1 view .LVU117
1513:TMCL.c        **** 					ActualReply.Value.Int32 = debug_getTestVar0();
 564              		.loc 1 1513 13 is_stmt 0 view .LVU118
 565 030a 0628     		cmp	r0, #6
 566 030c 84D1     		bne	.L1
1514:TMCL.c        **** 				break;
 567              		.loc 1 1514 6 is_stmt 1 view .LVU119
1514:TMCL.c        **** 				break;
 568              		.loc 1 1514 32 is_stmt 0 view .LVU120
 569 030e FFF7FEFF 		bl	debug_getTestVar0
 570              	.LVL29:
1514:TMCL.c        **** 				break;
 571              		.loc 1 1514 30 view .LVU121
 572 0312 E060     		str	r0, [r4, #12]
 573              		.loc 1 1594 1 view .LVU122
 574 0314 38BD     		pop	{r3, r4, r5, pc}
 575              	.LVL30:
 576              	.L17:
1500:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_filteredPedalVelocity();
 577              		.loc 1 1500 5 is_stmt 1 view .LVU123
1500:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_filteredPedalVelocity();
 578              		.loc 1 1500 8 is_stmt 0 view .LVU124
 579 0316 0628     		cmp	r0, #6
 580 0318 7FF47EAF 		bne	.L1
1501:TMCL.c        **** 				break;
 581              		.loc 1 1501 6 is_stmt 1 view .LVU125
1501:TMCL.c        **** 				break;
 582              		.loc 1 1501 32 is_stmt 0 view .LVU126
 583 031c FFF7FEFF 		bl	sensor_filteredPedalVelocity
 584              	.LVL31:
1501:TMCL.c        **** 				break;
 585              		.loc 1 1501 30 view .LVU127
 586 0320 E060     		str	r0, [r4, #12]
 587              		.loc 1 1594 1 view .LVU128
 588 0322 38BD     		pop	{r3, r4, r5, pc}
 589              	.LVL32:
 590              	.L19:
1492:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalCounterPer500MSeconds();
 591              		.loc 1 1492 5 is_stmt 1 view .LVU129
1492:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalCounterPer500MSeconds();
 592              		.loc 1 1492 8 is_stmt 0 view .LVU130
 593 0324 0628     		cmp	r0, #6
 594 0326 7FF477AF 		bne	.L1
1493:TMCL.c        **** 				break;
 595              		.loc 1 1493 6 is_stmt 1 view .LVU131
1493:TMCL.c        **** 				break;
 596              		.loc 1 1493 32 is_stmt 0 view .LVU132
 597 032a FFF7FEFF 		bl	sensor_pedalCounterPer500MSeconds
 598              	.LVL33:
1493:TMCL.c        **** 				break;
 599              		.loc 1 1493 30 view .LVU133
 600 032e E060     		str	r0, [r4, #12]
 601              		.loc 1 1594 1 view .LVU134
 602 0330 38BD     		pop	{r3, r4, r5, pc}
 603              	.LVL34:
 604              	.L21:
1484:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalCounter();
 605              		.loc 1 1484 5 is_stmt 1 view .LVU135
1484:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_pedalCounter();
 606              		.loc 1 1484 8 is_stmt 0 view .LVU136
 607 0332 0628     		cmp	r0, #6
 608 0334 7FF470AF 		bne	.L1
1485:TMCL.c        **** 				break;
 609              		.loc 1 1485 6 is_stmt 1 view .LVU137
1485:TMCL.c        **** 				break;
 610              		.loc 1 1485 32 is_stmt 0 view .LVU138
 611 0338 FFF7FEFF 		bl	sensor_pedalCounter
 612              	.LVL35:
1485:TMCL.c        **** 				break;
 613              		.loc 1 1485 30 view .LVU139
 614 033c E060     		str	r0, [r4, #12]
 615              		.loc 1 1594 1 view .LVU140
 616 033e 38BD     		pop	{r3, r4, r5, pc}
 617              	.LVL36:
 618              	.L22:
1477:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getVelocityLoopsPerSecond();
 619              		.loc 1 1477 5 is_stmt 1 view .LVU141
1477:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getVelocityLoopsPerSecond();
 620              		.loc 1 1477 8 is_stmt 0 view .LVU142
 621 0340 0628     		cmp	r0, #6
 622 0342 7FF469AF 		bne	.L1
1478:TMCL.c        **** 				break;
 623              		.loc 1 1478 6 is_stmt 1 view .LVU143
1478:TMCL.c        **** 				break;
 624              		.loc 1 1478 32 is_stmt 0 view .LVU144
 625 0346 FFF7FEFF 		bl	systemInfo_getVelocityLoopsPerSecond
 626              	.LVL37:
1478:TMCL.c        **** 				break;
 627              		.loc 1 1478 30 view .LVU145
 628 034a E060     		str	r0, [r4, #12]
 629              		.loc 1 1594 1 view .LVU146
 630 034c 38BD     		pop	{r3, r4, r5, pc}
 631              	.LVL38:
 632              	.L23:
1473:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getCurrentLoopsPerSecond();
 633              		.loc 1 1473 5 is_stmt 1 view .LVU147
1473:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getCurrentLoopsPerSecond();
 634              		.loc 1 1473 8 is_stmt 0 view .LVU148
 635 034e 0628     		cmp	r0, #6
 636 0350 7FF462AF 		bne	.L1
1474:TMCL.c        **** 				break;
 637              		.loc 1 1474 6 is_stmt 1 view .LVU149
1474:TMCL.c        **** 				break;
 638              		.loc 1 1474 32 is_stmt 0 view .LVU150
 639 0354 FFF7FEFF 		bl	systemInfo_getCurrentLoopsPerSecond
 640              	.LVL39:
1474:TMCL.c        **** 				break;
 641              		.loc 1 1474 30 view .LVU151
 642 0358 E060     		str	r0, [r4, #12]
 643              		.loc 1 1594 1 view .LVU152
 644 035a 38BD     		pop	{r3, r4, r5, pc}
 645              	.LVL40:
 646              	.L24:
1469:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getMainLoopsPerSecond();
 647              		.loc 1 1469 5 is_stmt 1 view .LVU153
1469:TMCL.c        **** 					ActualReply.Value.Int32 = systemInfo_getMainLoopsPerSecond();
 648              		.loc 1 1469 8 is_stmt 0 view .LVU154
 649 035c 0628     		cmp	r0, #6
 650 035e 7FF45BAF 		bne	.L1
1470:TMCL.c        **** 				break;
 651              		.loc 1 1470 6 is_stmt 1 view .LVU155
1470:TMCL.c        **** 				break;
 652              		.loc 1 1470 32 is_stmt 0 view .LVU156
 653 0362 FFF7FEFF 		bl	systemInfo_getMainLoopsPerSecond
 654              	.LVL41:
1470:TMCL.c        **** 				break;
 655              		.loc 1 1470 30 view .LVU157
 656 0366 E060     		str	r0, [r4, #12]
 657              		.loc 1 1594 1 view .LVU158
 658 0368 38BD     		pop	{r3, r4, r5, pc}
 659              	.LVL42:
 660              	.L25:
1461:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_targetpedalTorque();
 661              		.loc 1 1461 5 is_stmt 1 view .LVU159
1461:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_targetpedalTorque();
 662              		.loc 1 1461 8 is_stmt 0 view .LVU160
 663 036a 0628     		cmp	r0, #6
 664 036c 7FF454AF 		bne	.L1
1462:TMCL.c        **** 				}
 665              		.loc 1 1462 6 is_stmt 1 view .LVU161
1462:TMCL.c        **** 				}
 666              		.loc 1 1462 32 is_stmt 0 view .LVU162
 667 0370 FFF7FEFF 		bl	sensor_targetpedalTorque
 668              	.LVL43:
1462:TMCL.c        **** 				}
 669              		.loc 1 1462 30 view .LVU163
 670 0374 E060     		str	r0, [r4, #12]
 671              		.loc 1 1594 1 view .LVU164
 672 0376 38BD     		pop	{r3, r4, r5, pc}
 673              	.LVL44:
 674              	.L26:
1456:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_rightPedalTorque();
 675              		.loc 1 1456 5 is_stmt 1 view .LVU165
1456:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_rightPedalTorque();
 676              		.loc 1 1456 8 is_stmt 0 view .LVU166
 677 0378 0628     		cmp	r0, #6
 678 037a 7FF44DAF 		bne	.L1
1457:TMCL.c        **** 				}
 679              		.loc 1 1457 6 is_stmt 1 view .LVU167
1457:TMCL.c        **** 				}
 680              		.loc 1 1457 32 is_stmt 0 view .LVU168
 681 037e FFF7FEFF 		bl	sensor_rightPedalTorque
 682              	.LVL45:
1457:TMCL.c        **** 				}
 683              		.loc 1 1457 30 view .LVU169
 684 0382 E060     		str	r0, [r4, #12]
 685              		.loc 1 1594 1 view .LVU170
 686 0384 38BD     		pop	{r3, r4, r5, pc}
 687              	.LVL46:
 688              	.L27:
1451:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_leftPedalTorque();
 689              		.loc 1 1451 5 is_stmt 1 view .LVU171
1451:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_leftPedalTorque();
 690              		.loc 1 1451 8 is_stmt 0 view .LVU172
 691 0386 0628     		cmp	r0, #6
 692 0388 7FF446AF 		bne	.L1
1452:TMCL.c        **** 				}
 693              		.loc 1 1452 6 is_stmt 1 view .LVU173
1452:TMCL.c        **** 				}
 694              		.loc 1 1452 32 is_stmt 0 view .LVU174
 695 038c FFF7FEFF 		bl	sensor_leftPedalTorque
 696              	.LVL47:
1452:TMCL.c        **** 				}
 697              		.loc 1 1452 30 view .LVU175
 698 0390 E060     		str	r0, [r4, #12]
 699              		.loc 1 1594 1 view .LVU176
 700 0392 38BD     		pop	{r3, r4, r5, pc}
 701              	.LVL48:
 702              	.L28:
1446:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_actualPedalTorque();
 703              		.loc 1 1446 5 is_stmt 1 view .LVU177
1446:TMCL.c        **** 					ActualReply.Value.Int32 = sensor_actualPedalTorque();
 704              		.loc 1 1446 8 is_stmt 0 view .LVU178
 705 0394 0628     		cmp	r0, #6
 706 0396 7FF43FAF 		bne	.L1
1447:TMCL.c        **** 				}
 707              		.loc 1 1447 6 is_stmt 1 view .LVU179
1447:TMCL.c        **** 				}
 708              		.loc 1 1447 32 is_stmt 0 view .LVU180
 709 039a FFF7FEFF 		bl	sensor_actualPedalTorque
 710              	.LVL49:
1447:TMCL.c        **** 				}
 711              		.loc 1 1447 30 view .LVU181
 712 039e E060     		str	r0, [r4, #12]
 713              		.loc 1 1594 1 view .LVU182
 714 03a0 38BD     		pop	{r3, r4, r5, pc}
 715              	.LVL50:
 716              	.L29:
1441:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput5V();
 717              		.loc 1 1441 5 is_stmt 1 view .LVU183
1441:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput5V();
 718              		.loc 1 1441 8 is_stmt 0 view .LVU184
 719 03a2 0628     		cmp	r0, #6
 720 03a4 7FF438AF 		bne	.L1
1442:TMCL.c        **** 				}
 721              		.loc 1 1442 6 is_stmt 1 view .LVU185
1442:TMCL.c        **** 				}
 722              		.loc 1 1442 32 is_stmt 0 view .LVU186
 723 03a8 FFF7FEFF 		bl	bldc_getInput5V
 724              	.LVL51:
1442:TMCL.c        **** 				}
 725              		.loc 1 1442 30 view .LVU187
 726 03ac E060     		str	r0, [r4, #12]
 727              		.loc 1 1594 1 view .LVU188
 728 03ae 38BD     		pop	{r3, r4, r5, pc}
 729              	.LVL52:
 730              	.L30:
1436:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput6V();
 731              		.loc 1 1436 5 is_stmt 1 view .LVU189
1436:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput6V();
 732              		.loc 1 1436 8 is_stmt 0 view .LVU190
 733 03b0 0628     		cmp	r0, #6
 734 03b2 7FF431AF 		bne	.L1
1437:TMCL.c        **** 				}
 735              		.loc 1 1437 6 is_stmt 1 view .LVU191
1437:TMCL.c        **** 				}
 736              		.loc 1 1437 32 is_stmt 0 view .LVU192
 737 03b6 FFF7FEFF 		bl	bldc_getInput6V
 738              	.LVL53:
1437:TMCL.c        **** 				}
 739              		.loc 1 1437 30 view .LVU193
 740 03ba E060     		str	r0, [r4, #12]
 741              		.loc 1 1594 1 view .LVU194
 742 03bc 38BD     		pop	{r3, r4, r5, pc}
 743              	.LVL54:
 744              	.L31:
1431:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput12V();
 745              		.loc 1 1431 5 is_stmt 1 view .LVU195
1431:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getInput12V();
 746              		.loc 1 1431 8 is_stmt 0 view .LVU196
 747 03be 0628     		cmp	r0, #6
 748 03c0 7FF42AAF 		bne	.L1
1432:TMCL.c        **** 				}
 749              		.loc 1 1432 6 is_stmt 1 view .LVU197
1432:TMCL.c        **** 				}
 750              		.loc 1 1432 32 is_stmt 0 view .LVU198
 751 03c4 FFF7FEFF 		bl	bldc_getInput12V
 752              	.LVL55:
1432:TMCL.c        **** 				}
 753              		.loc 1 1432 30 view .LVU199
 754 03c8 E060     		str	r0, [r4, #12]
 755              		.loc 1 1594 1 view .LVU200
 756 03ca 38BD     		pop	{r3, r4, r5, pc}
 757              	.LVL56:
 758              	.L32:
1426:TMCL.c        **** 					ActualReply.Value.Int32 = flags_getAllStatusFlags();
 759              		.loc 1 1426 5 is_stmt 1 view .LVU201
1426:TMCL.c        **** 					ActualReply.Value.Int32 = flags_getAllStatusFlags();
 760              		.loc 1 1426 8 is_stmt 0 view .LVU202
 761 03cc 0628     		cmp	r0, #6
 762 03ce 7FF423AF 		bne	.L1
1427:TMCL.c        **** 				}
 763              		.loc 1 1427 6 is_stmt 1 view .LVU203
1427:TMCL.c        **** 				}
 764              		.loc 1 1427 32 is_stmt 0 view .LVU204
 765 03d2 FFF7FEFF 		bl	flags_getAllStatusFlags
 766              	.LVL57:
1427:TMCL.c        **** 				}
 767              		.loc 1 1427 30 view .LVU205
 768 03d6 E060     		str	r0, [r4, #12]
 769              		.loc 1 1594 1 view .LVU206
 770 03d8 38BD     		pop	{r3, r4, r5, pc}
 771              	.LVL58:
 772              	.L33:
1421:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getMotorTemperature();
 773              		.loc 1 1421 5 is_stmt 1 view .LVU207
1421:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getMotorTemperature();
 774              		.loc 1 1421 8 is_stmt 0 view .LVU208
 775 03da 0628     		cmp	r0, #6
 776 03dc 7FF41CAF 		bne	.L1
1422:TMCL.c        **** 				}
 777              		.loc 1 1422 6 is_stmt 1 view .LVU209
1422:TMCL.c        **** 				}
 778              		.loc 1 1422 32 is_stmt 0 view .LVU210
 779 03e0 FFF7FEFF 		bl	bldc_getMotorTemperature
 780              	.LVL59:
1422:TMCL.c        **** 				}
 781              		.loc 1 1422 30 view .LVU211
 782 03e4 E060     		str	r0, [r4, #12]
 783              		.loc 1 1594 1 view .LVU212
 784 03e6 38BD     		pop	{r3, r4, r5, pc}
 785              	.LVL60:
 786              	.L34:
1416:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getSupplyVoltage();
 787              		.loc 1 1416 5 is_stmt 1 view .LVU213
1416:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getSupplyVoltage();
 788              		.loc 1 1416 8 is_stmt 0 view .LVU214
 789 03e8 0628     		cmp	r0, #6
 790 03ea 7FF415AF 		bne	.L1
1417:TMCL.c        **** 				}
 791              		.loc 1 1417 6 is_stmt 1 view .LVU215
1417:TMCL.c        **** 				}
 792              		.loc 1 1417 32 is_stmt 0 view .LVU216
 793 03ee FFF7FEFF 		bl	bldc_getSupplyVoltage
 794              	.LVL61:
1417:TMCL.c        **** 				}
 795              		.loc 1 1417 30 view .LVU217
 796 03f2 E060     		str	r0, [r4, #12]
 797              		.loc 1 1594 1 view .LVU218
 798 03f4 38BD     		pop	{r3, r4, r5, pc}
 799              	.LVL62:
 800              	.L35:
1397:TMCL.c        **** 				{
 801              		.loc 1 1397 5 is_stmt 1 view .LVU219
1397:TMCL.c        **** 				{
 802              		.loc 1 1397 8 is_stmt 0 view .LVU220
 803 03f6 0528     		cmp	r0, #5
 804 03f8 01F0EC80 		beq	.L338
1401:TMCL.c        **** 				{
 805              		.loc 1 1401 12 is_stmt 1 view .LVU221
1401:TMCL.c        **** 				{
 806              		.loc 1 1401 15 is_stmt 0 view .LVU222
 807 03fc 0628     		cmp	r0, #6
 808 03fe 00F0D786 		beq	.L339
1404:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.batterySavingTimer-(u32)&moto
 809              		.loc 1 1404 12 is_stmt 1 view .LVU223
1404:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.batterySavingTimer-(u32)&moto
 810              		.loc 1 1404 15 is_stmt 0 view .LVU224
 811 0402 0728     		cmp	r0, #7
 812 0404 01F0F881 		beq	.L340
1407:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.batterySavingTimer-(u32)&motor
 813              		.loc 1 1407 12 is_stmt 1 view .LVU225
1407:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.batterySavingTimer-(u32)&motor
 814              		.loc 1 1407 15 is_stmt 0 view .LVU226
 815 0408 0828     		cmp	r0, #8
 816 040a 7FF405AF 		bne	.L1
1408:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
 817              		.loc 1 1408 6 is_stmt 1 view .LVU227
 818              		.loc 1 1594 1 is_stmt 0 view .LVU228
 819 040e BDE83840 		pop	{r3, r4, r5, lr}
 820              	.LCFI1:
 821              		.cfi_remember_state
 822              		.cfi_restore 14
 823              		.cfi_restore 5
 824              		.cfi_restore 4
 825              		.cfi_restore 3
 826              		.cfi_def_cfa_offset 0
1408:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
 827              		.loc 1 1408 6 view .LVU229
 828 0412 0222     		movs	r2, #2
 829 0414 9420     		movs	r0, #148
 830              	.LVL63:
1408:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
 831              		.loc 1 1408 6 view .LVU230
 832 0416 C449     		ldr	r1, .L524
 833 0418 FFF7FEBF 		b	eeprom_readConfigBlock
 834              	.LVL64:
 835              	.L36:
 836              	.LCFI2:
 837              		.cfi_restore_state
1381:TMCL.c        **** 				{
 838              		.loc 1 1381 5 is_stmt 1 view .LVU231
1381:TMCL.c        **** 				{
 839              		.loc 1 1381 8 is_stmt 0 view .LVU232
 840 041c 0528     		cmp	r0, #5
 841 041e 01F0CE80 		beq	.L341
1385:TMCL.c        **** 				{
 842              		.loc 1 1385 12 is_stmt 1 view .LVU233
1385:TMCL.c        **** 				{
 843              		.loc 1 1385 15 is_stmt 0 view .LVU234
 844 0422 0628     		cmp	r0, #6
 845 0424 00F0BB86 		beq	.L342
1388:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.cutOffVoltage-(u32)&motorConf
 846              		.loc 1 1388 12 is_stmt 1 view .LVU235
1388:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.cutOffVoltage-(u32)&motorConf
 847              		.loc 1 1388 15 is_stmt 0 view .LVU236
 848 0428 0728     		cmp	r0, #7
 849 042a 01F0EC81 		beq	.L343
1391:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.cutOffVoltage-(u32)&motorConfi
 850              		.loc 1 1391 12 is_stmt 1 view .LVU237
1391:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.cutOffVoltage-(u32)&motorConfi
 851              		.loc 1 1391 15 is_stmt 0 view .LVU238
 852 042e 0828     		cmp	r0, #8
 853 0430 7FF4F2AE 		bne	.L1
1392:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
 854              		.loc 1 1392 6 is_stmt 1 view .LVU239
 855              		.loc 1 1594 1 is_stmt 0 view .LVU240
 856 0434 BDE83840 		pop	{r3, r4, r5, lr}
 857              	.LCFI3:
 858              		.cfi_remember_state
 859              		.cfi_restore 14
 860              		.cfi_restore 5
 861              		.cfi_restore 4
 862              		.cfi_restore 3
 863              		.cfi_def_cfa_offset 0
1392:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
 864              		.loc 1 1392 6 view .LVU241
 865 0438 0222     		movs	r2, #2
 866 043a 9220     		movs	r0, #146
 867              	.LVL65:
1392:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
 868              		.loc 1 1392 6 view .LVU242
 869 043c BB49     		ldr	r1, .L524+4
 870 043e FFF7FEBF 		b	eeprom_readConfigBlock
 871              	.LVL66:
 872              	.L37:
 873              	.LCFI4:
 874              		.cfi_restore_state
1365:TMCL.c        **** 				{
 875              		.loc 1 1365 5 is_stmt 1 view .LVU243
1365:TMCL.c        **** 				{
 876              		.loc 1 1365 8 is_stmt 0 view .LVU244
 877 0442 0528     		cmp	r0, #5
 878 0444 00F0C187 		beq	.L344
1369:TMCL.c        **** 				{
 879              		.loc 1 1369 12 is_stmt 1 view .LVU245
1369:TMCL.c        **** 				{
 880              		.loc 1 1369 15 is_stmt 0 view .LVU246
 881 0448 0628     		cmp	r0, #6
 882 044a 00F07C86 		beq	.L345
1372:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxBatteryVoltage-(u32)&motor
 883              		.loc 1 1372 12 is_stmt 1 view .LVU247
1372:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxBatteryVoltage-(u32)&motor
 884              		.loc 1 1372 15 is_stmt 0 view .LVU248
 885 044e 0728     		cmp	r0, #7
 886 0450 01F0C481 		beq	.L346
1375:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxBatteryVoltage-(u32)&motorC
 887              		.loc 1 1375 12 is_stmt 1 view .LVU249
1375:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxBatteryVoltage-(u32)&motorC
 888              		.loc 1 1375 15 is_stmt 0 view .LVU250
 889 0454 0828     		cmp	r0, #8
 890 0456 7FF4DFAE 		bne	.L1
1376:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
 891              		.loc 1 1376 6 is_stmt 1 view .LVU251
 892              		.loc 1 1594 1 is_stmt 0 view .LVU252
 893 045a BDE83840 		pop	{r3, r4, r5, lr}
 894              	.LCFI5:
 895              		.cfi_remember_state
 896              		.cfi_restore 14
 897              		.cfi_restore 5
 898              		.cfi_restore 4
 899              		.cfi_restore 3
 900              		.cfi_def_cfa_offset 0
1376:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
 901              		.loc 1 1376 6 view .LVU253
 902 045e 0222     		movs	r2, #2
 903 0460 9020     		movs	r0, #144
 904              	.LVL67:
1376:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
 905              		.loc 1 1376 6 view .LVU254
 906 0462 B349     		ldr	r1, .L524+8
 907 0464 FFF7FEBF 		b	eeprom_readConfigBlock
 908              	.LVL68:
 909              	.L38:
 910              	.LCFI6:
 911              		.cfi_restore_state
1350:TMCL.c        **** 				{
 912              		.loc 1 1350 5 is_stmt 1 view .LVU255
1350:TMCL.c        **** 				{
 913              		.loc 1 1350 8 is_stmt 0 view .LVU256
 914 0468 0528     		cmp	r0, #5
 915 046a 00F00386 		beq	.L347
1353:TMCL.c        **** 				{
 916              		.loc 1 1353 12 is_stmt 1 view .LVU257
1353:TMCL.c        **** 				{
 917              		.loc 1 1353 15 is_stmt 0 view .LVU258
 918 046e 0628     		cmp	r0, #6
 919 0470 00F08187 		beq	.L348
1356:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minBatteryVoltage-(u32)&motor
 920              		.loc 1 1356 12 is_stmt 1 view .LVU259
1356:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minBatteryVoltage-(u32)&motor
 921              		.loc 1 1356 15 is_stmt 0 view .LVU260
 922 0474 0728     		cmp	r0, #7
 923 0476 01F03682 		beq	.L349
1359:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minBatteryVoltage-(u32)&motorC
 924              		.loc 1 1359 12 is_stmt 1 view .LVU261
1359:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minBatteryVoltage-(u32)&motorC
 925              		.loc 1 1359 15 is_stmt 0 view .LVU262
 926 047a 0828     		cmp	r0, #8
 927 047c 7FF4CCAE 		bne	.L1
1360:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
 928              		.loc 1 1360 6 is_stmt 1 view .LVU263
 929              		.loc 1 1594 1 is_stmt 0 view .LVU264
 930 0480 BDE83840 		pop	{r3, r4, r5, lr}
 931              	.LCFI7:
 932              		.cfi_remember_state
 933              		.cfi_restore 14
 934              		.cfi_restore 5
 935              		.cfi_restore 4
 936              		.cfi_restore 3
 937              		.cfi_def_cfa_offset 0
1360:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
 938              		.loc 1 1360 6 view .LVU265
 939 0484 0222     		movs	r2, #2
 940 0486 8E20     		movs	r0, #142
 941              	.LVL69:
1360:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
 942              		.loc 1 1360 6 view .LVU266
 943 0488 AA49     		ldr	r1, .L524+12
 944 048a FFF7FEBF 		b	eeprom_readConfigBlock
 945              	.LVL70:
 946              	.L40:
 947              	.LCFI8:
 948              		.cfi_restore_state
1334:TMCL.c        **** 				{
 949              		.loc 1 1334 5 is_stmt 1 view .LVU267
1334:TMCL.c        **** 				{
 950              		.loc 1 1334 8 is_stmt 0 view .LVU268
 951 048e 0628     		cmp	r0, #6
 952 0490 7FF4C2AE 		bne	.L1
1336:TMCL.c        **** 				}
 953              		.loc 1 1336 6 is_stmt 1 view .LVU269
1336:TMCL.c        **** 				}
 954              		.loc 1 1336 32 is_stmt 0 view .LVU270
 955 0494 FFF7FEFF 		bl	sensor_wheelVelocity
 956              	.LVL71:
1336:TMCL.c        **** 				}
 957              		.loc 1 1336 60 view .LVU271
 958 0498 A74A     		ldr	r2, .L524+16
 959 049a C317     		asrs	r3, r0, #31
 960 049c 82FB0012 		smull	r1, r2, r2, r0
 961 04a0 C3EBE203 		rsb	r3, r3, r2, asr #3
1336:TMCL.c        **** 				}
 962              		.loc 1 1336 30 view .LVU272
 963 04a4 E360     		str	r3, [r4, #12]
 964              		.loc 1 1594 1 view .LVU273
 965 04a6 38BD     		pop	{r3, r4, r5, pc}
 966              	.LVL72:
 967              	.L41:
1328:TMCL.c        **** 				{
 968              		.loc 1 1328 5 is_stmt 1 view .LVU274
1328:TMCL.c        **** 				{
 969              		.loc 1 1328 8 is_stmt 0 view .LVU275
 970 04a8 0628     		cmp	r0, #6
 971 04aa 7FF4B5AE 		bne	.L1
1330:TMCL.c        **** 				}
 972              		.loc 1 1330 6 is_stmt 1 view .LVU276
1330:TMCL.c        **** 				}
 973              		.loc 1 1330 32 is_stmt 0 view .LVU277
 974 04ae FFF7FEFF 		bl	sensor_motorVelocity
 975              	.LVL73:
1330:TMCL.c        **** 				}
 976              		.loc 1 1330 30 view .LVU278
 977 04b2 E060     		str	r0, [r4, #12]
 978              		.loc 1 1594 1 view .LVU279
 979 04b4 38BD     		pop	{r3, r4, r5, pc}
 980              	.LVL74:
 981              	.L46:
1254:TMCL.c        **** 				{
 982              		.loc 1 1254 5 is_stmt 1 view .LVU280
1254:TMCL.c        **** 				{
 983              		.loc 1 1254 8 is_stmt 0 view .LVU281
 984 04b6 0528     		cmp	r0, #5
 985 04b8 00F0B087 		beq	.L350
1258:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallDirection;
 986              		.loc 1 1258 12 is_stmt 1 view .LVU282
1258:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallDirection;
 987              		.loc 1 1258 15 is_stmt 0 view .LVU283
 988 04bc 0628     		cmp	r0, #6
 989 04be 00F0AA86 		beq	.L351
1260:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallDirection-(u32)&motorConf
 990              		.loc 1 1260 12 is_stmt 1 view .LVU284
1260:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallDirection-(u32)&motorConf
 991              		.loc 1 1260 15 is_stmt 0 view .LVU285
 992 04c2 0728     		cmp	r0, #7
 993 04c4 01F04381 		beq	.L352
1263:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallDirection-(u32)&motorConfi
 994              		.loc 1 1263 12 is_stmt 1 view .LVU286
1263:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallDirection-(u32)&motorConfi
 995              		.loc 1 1263 15 is_stmt 0 view .LVU287
 996 04c8 0828     		cmp	r0, #8
 997 04ca 7FF4A5AE 		bne	.L1
1264:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
 998              		.loc 1 1264 6 is_stmt 1 view .LVU288
 999              		.loc 1 1594 1 is_stmt 0 view .LVU289
 1000 04ce BDE83840 		pop	{r3, r4, r5, lr}
 1001              	.LCFI9:
 1002              		.cfi_remember_state
 1003              		.cfi_restore 14
 1004              		.cfi_restore 5
 1005              		.cfi_restore 4
 1006              		.cfi_restore 3
 1007              		.cfi_def_cfa_offset 0
1264:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
 1008              		.loc 1 1264 6 view .LVU290
 1009 04d2 0122     		movs	r2, #1
 1010 04d4 8620     		movs	r0, #134
 1011              	.LVL75:
1264:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
 1012              		.loc 1 1264 6 view .LVU291
 1013 04d6 9949     		ldr	r1, .L524+20
 1014 04d8 FFF7FEBF 		b	eeprom_readConfigBlock
 1015              	.LVL76:
 1016              	.L47:
 1017              	.LCFI10:
 1018              		.cfi_restore_state
1239:TMCL.c        **** 				{
 1019              		.loc 1 1239 5 is_stmt 1 view .LVU292
1239:TMCL.c        **** 				{
 1020              		.loc 1 1239 8 is_stmt 0 view .LVU293
 1021 04dc 0528     		cmp	r0, #5
 1022 04de 01F0A580 		beq	.L353
1243:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallInterpolation;
 1023              		.loc 1 1243 12 is_stmt 1 view .LVU294
1243:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallInterpolation;
 1024              		.loc 1 1243 15 is_stmt 0 view .LVU295
 1025 04e2 0628     		cmp	r0, #6
 1026 04e4 00F06E86 		beq	.L354
1245:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallInterpolation-(u32)&motor
 1027              		.loc 1 1245 12 is_stmt 1 view .LVU296
1245:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallInterpolation-(u32)&motor
 1028              		.loc 1 1245 15 is_stmt 0 view .LVU297
 1029 04e8 0728     		cmp	r0, #7
 1030 04ea 01F03E81 		beq	.L355
1248:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallInterpolation-(u32)&motorC
 1031              		.loc 1 1248 12 is_stmt 1 view .LVU298
1248:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallInterpolation-(u32)&motorC
 1032              		.loc 1 1248 15 is_stmt 0 view .LVU299
 1033 04ee 0828     		cmp	r0, #8
 1034 04f0 7FF492AE 		bne	.L1
1249:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
 1035              		.loc 1 1249 6 is_stmt 1 view .LVU300
 1036              		.loc 1 1594 1 is_stmt 0 view .LVU301
 1037 04f4 BDE83840 		pop	{r3, r4, r5, lr}
 1038              	.LCFI11:
 1039              		.cfi_remember_state
 1040              		.cfi_restore 14
 1041              		.cfi_restore 5
 1042              		.cfi_restore 4
 1043              		.cfi_restore 3
 1044              		.cfi_def_cfa_offset 0
1249:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
 1045              		.loc 1 1249 6 view .LVU302
 1046 04f8 0122     		movs	r2, #1
 1047 04fa 8520     		movs	r0, #133
 1048              	.LVL77:
1249:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
 1049              		.loc 1 1249 6 view .LVU303
 1050 04fc 9049     		ldr	r1, .L524+24
 1051 04fe FFF7FEBF 		b	eeprom_readConfigBlock
 1052              	.LVL78:
 1053              	.L48:
 1054              	.LCFI12:
 1055              		.cfi_restore_state
1224:TMCL.c        **** 				{
 1056              		.loc 1 1224 5 is_stmt 1 view .LVU304
1224:TMCL.c        **** 				{
 1057              		.loc 1 1224 8 is_stmt 0 view .LVU305
 1058 0502 0528     		cmp	r0, #5
 1059 0504 01F07B80 		beq	.L356
1228:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallPolarity;
 1060              		.loc 1 1228 12 is_stmt 1 view .LVU306
1228:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallPolarity;
 1061              		.loc 1 1228 15 is_stmt 0 view .LVU307
 1062 0508 0628     		cmp	r0, #6
 1063 050a 00F05686 		beq	.L357
1230:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallPolarity-(u32)&motorConfi
 1064              		.loc 1 1230 12 is_stmt 1 view .LVU308
1230:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallPolarity-(u32)&motorConfi
 1065              		.loc 1 1230 15 is_stmt 0 view .LVU309
 1066 050e 0728     		cmp	r0, #7
 1067 0510 01F04881 		beq	.L358
1233:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallPolarity-(u32)&motorConfig
 1068              		.loc 1 1233 12 is_stmt 1 view .LVU310
1233:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallPolarity-(u32)&motorConfig
 1069              		.loc 1 1233 15 is_stmt 0 view .LVU311
 1070 0514 0828     		cmp	r0, #8
 1071 0516 7FF47FAE 		bne	.L1
1234:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
 1072              		.loc 1 1234 6 is_stmt 1 view .LVU312
 1073              		.loc 1 1594 1 is_stmt 0 view .LVU313
 1074 051a BDE83840 		pop	{r3, r4, r5, lr}
 1075              	.LCFI13:
 1076              		.cfi_remember_state
 1077              		.cfi_restore 14
 1078              		.cfi_restore 5
 1079              		.cfi_restore 4
 1080              		.cfi_restore 3
 1081              		.cfi_def_cfa_offset 0
1234:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
 1082              		.loc 1 1234 6 view .LVU314
 1083 051e 0122     		movs	r2, #1
 1084 0520 8420     		movs	r0, #132
 1085              	.LVL79:
1234:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
 1086              		.loc 1 1234 6 view .LVU315
 1087 0522 8849     		ldr	r1, .L524+28
 1088 0524 FFF7FEBF 		b	eeprom_readConfigBlock
 1089              	.LVL80:
 1090              	.L49:
 1091              	.LCFI14:
 1092              		.cfi_restore_state
1209:TMCL.c        **** 				{
 1093              		.loc 1 1209 5 is_stmt 1 view .LVU316
1209:TMCL.c        **** 				{
 1094              		.loc 1 1209 8 is_stmt 0 view .LVU317
 1095 0528 0528     		cmp	r0, #5
 1096 052a 00F05E87 		beq	.L359
1213:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallOffset;
 1097              		.loc 1 1213 12 is_stmt 1 view .LVU318
1213:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.hallOffset;
 1098              		.loc 1 1213 15 is_stmt 0 view .LVU319
 1099 052e 0628     		cmp	r0, #6
 1100 0530 00F06C86 		beq	.L360
1215:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallOffset-(u32)&motorConfig,
 1101              		.loc 1 1215 12 is_stmt 1 view .LVU320
1215:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallOffset-(u32)&motorConfig,
 1102              		.loc 1 1215 15 is_stmt 0 view .LVU321
 1103 0534 0728     		cmp	r0, #7
 1104 0536 01F07481 		beq	.L361
1218:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallOffset-(u32)&motorConfig,
 1105              		.loc 1 1218 12 is_stmt 1 view .LVU322
1218:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.hallOffset-(u32)&motorConfig,
 1106              		.loc 1 1218 15 is_stmt 0 view .LVU323
 1107 053a 0828     		cmp	r0, #8
 1108 053c 7FF46CAE 		bne	.L1
1219:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
 1109              		.loc 1 1219 6 is_stmt 1 view .LVU324
 1110              		.loc 1 1594 1 is_stmt 0 view .LVU325
 1111 0540 BDE83840 		pop	{r3, r4, r5, lr}
 1112              	.LCFI15:
 1113              		.cfi_remember_state
 1114              		.cfi_restore 14
 1115              		.cfi_restore 5
 1116              		.cfi_restore 4
 1117              		.cfi_restore 3
 1118              		.cfi_def_cfa_offset 0
1219:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
 1119              		.loc 1 1219 6 view .LVU326
 1120 0544 0222     		movs	r2, #2
 1121 0546 8220     		movs	r0, #130
 1122              	.LVL81:
1219:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
 1123              		.loc 1 1219 6 view .LVU327
 1124 0548 7F49     		ldr	r1, .L524+32
 1125 054a FFF7FEBF 		b	eeprom_readConfigBlock
 1126              	.LVL82:
 1127              	.L42:
 1128              	.LCFI16:
 1129              		.cfi_restore_state
1313:TMCL.c        **** 				{
 1130              		.loc 1 1313 5 is_stmt 1 view .LVU328
1313:TMCL.c        **** 				{
 1131              		.loc 1 1313 8 is_stmt 0 view .LVU329
 1132 054e 0528     		cmp	r0, #5
 1133 0550 00F08385 		beq	.L362
1316:TMCL.c        **** 				{
 1134              		.loc 1 1316 12 is_stmt 1 view .LVU330
1316:TMCL.c        **** 				{
 1135              		.loc 1 1316 15 is_stmt 0 view .LVU331
 1136 0554 0628     		cmp	r0, #6
 1137 0556 00F0FC86 		beq	.L363
1319:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.motorTestModes-(u32)&motorCon
 1138              		.loc 1 1319 12 is_stmt 1 view .LVU332
1319:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.motorTestModes-(u32)&motorCon
 1139              		.loc 1 1319 15 is_stmt 0 view .LVU333
 1140 055a 0728     		cmp	r0, #7
 1141 055c 01F07982 		beq	.L364
1322:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.motorTestModes-(u32)&motorConf
 1142              		.loc 1 1322 12 is_stmt 1 view .LVU334
1322:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.motorTestModes-(u32)&motorConf
 1143              		.loc 1 1322 15 is_stmt 0 view .LVU335
 1144 0560 0828     		cmp	r0, #8
 1145 0562 7FF459AE 		bne	.L1
1323:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
 1146              		.loc 1 1323 6 is_stmt 1 view .LVU336
 1147              		.loc 1 1594 1 is_stmt 0 view .LVU337
 1148 0566 BDE83840 		pop	{r3, r4, r5, lr}
 1149              	.LCFI17:
 1150              		.cfi_remember_state
 1151              		.cfi_restore 14
 1152              		.cfi_restore 5
 1153              		.cfi_restore 4
 1154              		.cfi_restore 3
 1155              		.cfi_def_cfa_offset 0
1323:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
 1156              		.loc 1 1323 6 view .LVU338
 1157 056a 0122     		movs	r2, #1
 1158 056c 8D20     		movs	r0, #141
 1159              	.LVL83:
1323:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
 1160              		.loc 1 1323 6 view .LVU339
 1161 056e 7749     		ldr	r1, .L524+36
 1162 0570 FFF7FEBF 		b	eeprom_readConfigBlock
 1163              	.LVL84:
 1164              	.L44:
 1165              	.LCFI18:
 1166              		.cfi_restore_state
1283:TMCL.c        **** 				{
 1167              		.loc 1 1283 5 is_stmt 1 view .LVU340
1283:TMCL.c        **** 				{
 1168              		.loc 1 1283 8 is_stmt 0 view .LVU341
 1169 0574 0528     		cmp	r0, #5
 1170 0576 00F07885 		beq	.L365
1286:TMCL.c        **** 				{
 1171              		.loc 1 1286 12 is_stmt 1 view .LVU342
1286:TMCL.c        **** 				{
 1172              		.loc 1 1286 15 is_stmt 0 view .LVU343
 1173 057a 0628     		cmp	r0, #6
 1174 057c 00F0F686 		beq	.L366
1289:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minimumMotorCurrent-(u32)&mot
 1175              		.loc 1 1289 12 is_stmt 1 view .LVU344
1289:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minimumMotorCurrent-(u32)&mot
 1176              		.loc 1 1289 15 is_stmt 0 view .LVU345
 1177 0580 0728     		cmp	r0, #7
 1178 0582 01F06D82 		beq	.L367
1292:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minimumMotorCurrent-(u32)&moto
 1179              		.loc 1 1292 12 is_stmt 1 view .LVU346
1292:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.minimumMotorCurrent-(u32)&moto
 1180              		.loc 1 1292 15 is_stmt 0 view .LVU347
 1181 0586 0828     		cmp	r0, #8
 1182 0588 7FF446AE 		bne	.L1
1293:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
 1183              		.loc 1 1293 6 is_stmt 1 view .LVU348
 1184              		.loc 1 1594 1 is_stmt 0 view .LVU349
 1185 058c BDE83840 		pop	{r3, r4, r5, lr}
 1186              	.LCFI19:
 1187              		.cfi_remember_state
 1188              		.cfi_restore 14
 1189              		.cfi_restore 5
 1190              		.cfi_restore 4
 1191              		.cfi_restore 3
 1192              		.cfi_def_cfa_offset 0
1293:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
 1193              		.loc 1 1293 6 view .LVU350
 1194 0590 0222     		movs	r2, #2
 1195 0592 8A20     		movs	r0, #138
 1196              	.LVL85:
1293:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
 1197              		.loc 1 1293 6 view .LVU351
 1198 0594 6E49     		ldr	r1, .L524+40
 1199 0596 FFF7FEBF 		b	eeprom_readConfigBlock
 1200              	.LVL86:
 1201              	.L45:
 1202              	.LCFI20:
 1203              		.cfi_restore_state
1269:TMCL.c        **** 				{
 1204              		.loc 1 1269 5 is_stmt 1 view .LVU352
1269:TMCL.c        **** 				{
 1205              		.loc 1 1269 8 is_stmt 0 view .LVU353
 1206 059a 0528     		cmp	r0, #5
 1207 059c 00F05885 		beq	.L368
1272:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.currentRegulatorBandwidth;
 1208              		.loc 1 1272 12 is_stmt 1 view .LVU354
1272:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.currentRegulatorBandwidth;
 1209              		.loc 1 1272 15 is_stmt 0 view .LVU355
 1210 05a0 0628     		cmp	r0, #6
 1211 05a2 00F0D186 		beq	.L369
1274:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.currentRegulatorBandwidth-(u3
 1212              		.loc 1 1274 12 is_stmt 1 view .LVU356
1274:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.currentRegulatorBandwidth-(u3
 1213              		.loc 1 1274 15 is_stmt 0 view .LVU357
 1214 05a6 0728     		cmp	r0, #7
 1215 05a8 01F06581 		beq	.L370
1277:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.currentRegulatorBandwidth-(u32
 1216              		.loc 1 1277 12 is_stmt 1 view .LVU358
1277:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.currentRegulatorBandwidth-(u32
 1217              		.loc 1 1277 15 is_stmt 0 view .LVU359
 1218 05ac 0828     		cmp	r0, #8
 1219 05ae 7FF433AE 		bne	.L1
1278:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
 1220              		.loc 1 1278 6 is_stmt 1 view .LVU360
 1221              		.loc 1 1594 1 is_stmt 0 view .LVU361
 1222 05b2 BDE83840 		pop	{r3, r4, r5, lr}
 1223              	.LCFI21:
 1224              		.cfi_remember_state
 1225              		.cfi_restore 14
 1226              		.cfi_restore 5
 1227              		.cfi_restore 4
 1228              		.cfi_restore 3
 1229              		.cfi_def_cfa_offset 0
1278:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
 1230              		.loc 1 1278 6 view .LVU362
 1231 05b6 0222     		movs	r2, #2
 1232 05b8 8820     		movs	r0, #136
 1233              	.LVL87:
1278:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
 1234              		.loc 1 1278 6 view .LVU363
 1235 05ba 6649     		ldr	r1, .L524+44
 1236 05bc FFF7FEBF 		b	eeprom_readConfigBlock
 1237              	.LVL88:
 1238              	.L50:
 1239              	.LCFI22:
 1240              		.cfi_restore_state
1195:TMCL.c        **** 				{
 1241              		.loc 1 1195 5 is_stmt 1 view .LVU364
1195:TMCL.c        **** 				{
 1242              		.loc 1 1195 8 is_stmt 0 view .LVU365
 1243 05c0 0528     		cmp	r0, #5
 1244 05c2 00F0BB85 		beq	.L371
1198:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.wheelPulsesPerRotation;
 1245              		.loc 1 1198 12 is_stmt 1 view .LVU366
1198:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.wheelPulsesPerRotation;
 1246              		.loc 1 1198 15 is_stmt 0 view .LVU367
 1247 05c6 0628     		cmp	r0, #6
 1248 05c8 00F06386 		beq	.L372
1200:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelPulsesPerRotation-(u32)&
 1249              		.loc 1 1200 12 is_stmt 1 view .LVU368
1200:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelPulsesPerRotation-(u32)&
 1250              		.loc 1 1200 15 is_stmt 0 view .LVU369
 1251 05cc 0728     		cmp	r0, #7
 1252 05ce 01F07C81 		beq	.L373
1203:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelPulsesPerRotation-(u32)&m
 1253              		.loc 1 1203 12 is_stmt 1 view .LVU370
1203:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelPulsesPerRotation-(u32)&m
 1254              		.loc 1 1203 15 is_stmt 0 view .LVU371
 1255 05d2 0828     		cmp	r0, #8
 1256 05d4 7FF420AE 		bne	.L1
1204:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
 1257              		.loc 1 1204 6 is_stmt 1 view .LVU372
 1258              		.loc 1 1594 1 is_stmt 0 view .LVU373
 1259 05d8 BDE83840 		pop	{r3, r4, r5, lr}
 1260              	.LCFI23:
 1261              		.cfi_remember_state
 1262              		.cfi_restore 14
 1263              		.cfi_restore 5
 1264              		.cfi_restore 4
 1265              		.cfi_restore 3
 1266              		.cfi_def_cfa_offset 0
1204:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
 1267              		.loc 1 1204 6 view .LVU374
 1268 05dc 0122     		movs	r2, #1
 1269 05de 8020     		movs	r0, #128
 1270              	.LVL89:
1204:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
 1271              		.loc 1 1204 6 view .LVU375
 1272 05e0 5D49     		ldr	r1, .L524+48
 1273 05e2 FFF7FEBF 		b	eeprom_readConfigBlock
 1274              	.LVL90:
 1275              	.L52:
 1276              	.LCFI24:
 1277              		.cfi_restore_state
1167:TMCL.c        **** 				{
 1278              		.loc 1 1167 5 is_stmt 1 view .LVU376
1167:TMCL.c        **** 				{
 1279              		.loc 1 1167 8 is_stmt 0 view .LVU377
 1280 05e6 0528     		cmp	r0, #5
 1281 05e8 00F05485 		beq	.L374
1170:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.gearRatio;
 1282              		.loc 1 1170 12 is_stmt 1 view .LVU378
1170:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.gearRatio;
 1283              		.loc 1 1170 15 is_stmt 0 view .LVU379
 1284 05ec 0628     		cmp	r0, #6
 1285 05ee 00F0DB86 		beq	.L375
1172:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.gearRatio-(u32)&motorConfig,
 1286              		.loc 1 1172 12 is_stmt 1 view .LVU380
1172:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.gearRatio-(u32)&motorConfig,
 1287              		.loc 1 1172 15 is_stmt 0 view .LVU381
 1288 05f2 0728     		cmp	r0, #7
 1289 05f4 01F07081 		beq	.L376
1175:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.gearRatio-(u32)&motorConfig,
 1290              		.loc 1 1175 12 is_stmt 1 view .LVU382
1175:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.gearRatio-(u32)&motorConfig,
 1291              		.loc 1 1175 15 is_stmt 0 view .LVU383
 1292 05f8 0828     		cmp	r0, #8
 1293 05fa 7FF40DAE 		bne	.L1
1176:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
 1294              		.loc 1 1176 6 is_stmt 1 view .LVU384
 1295              		.loc 1 1594 1 is_stmt 0 view .LVU385
 1296 05fe BDE83840 		pop	{r3, r4, r5, lr}
 1297              	.LCFI25:
 1298              		.cfi_remember_state
 1299              		.cfi_restore 14
 1300              		.cfi_restore 5
 1301              		.cfi_restore 4
 1302              		.cfi_restore 3
 1303              		.cfi_def_cfa_offset 0
1176:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
 1304              		.loc 1 1176 6 view .LVU386
 1305 0602 0122     		movs	r2, #1
 1306 0604 7D20     		movs	r0, #125
 1307              	.LVL91:
1176:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
 1308              		.loc 1 1176 6 view .LVU387
 1309 0606 5549     		ldr	r1, .L524+52
 1310 0608 FFF7FEBF 		b	eeprom_readConfigBlock
 1311              	.LVL92:
 1312              	.L53:
 1313              	.LCFI26:
 1314              		.cfi_restore_state
1152:TMCL.c        **** 				{
 1315              		.loc 1 1152 5 is_stmt 1 view .LVU388
1152:TMCL.c        **** 				{
 1316              		.loc 1 1152 8 is_stmt 0 view .LVU389
 1317 060c 0528     		cmp	r0, #5
 1318 060e 00F08987 		beq	.L377
1156:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getMotorPolePairs();
 1319              		.loc 1 1156 12 is_stmt 1 view .LVU390
1156:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getMotorPolePairs();
 1320              		.loc 1 1156 15 is_stmt 0 view .LVU391
 1321 0612 0628     		cmp	r0, #6
 1322 0614 01F05D80 		beq	.L378
1158:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.polePairs-(u32)&motorConfig,
 1323              		.loc 1 1158 12 is_stmt 1 view .LVU392
1158:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.polePairs-(u32)&motorConfig,
 1324              		.loc 1 1158 15 is_stmt 0 view .LVU393
 1325 0618 0728     		cmp	r0, #7
 1326 061a 01F08680 		beq	.L379
1161:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.polePairs-(u32)&motorConfig,
 1327              		.loc 1 1161 12 is_stmt 1 view .LVU394
1161:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.polePairs-(u32)&motorConfig,
 1328              		.loc 1 1161 15 is_stmt 0 view .LVU395
 1329 061e 0828     		cmp	r0, #8
 1330 0620 7FF4FAAD 		bne	.L1
1162:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
 1331              		.loc 1 1162 6 is_stmt 1 view .LVU396
 1332              		.loc 1 1594 1 is_stmt 0 view .LVU397
 1333 0624 BDE83840 		pop	{r3, r4, r5, lr}
 1334              	.LCFI27:
 1335              		.cfi_remember_state
 1336              		.cfi_restore 14
 1337              		.cfi_restore 5
 1338              		.cfi_restore 4
 1339              		.cfi_restore 3
 1340              		.cfi_def_cfa_offset 0
1162:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
 1341              		.loc 1 1162 6 view .LVU398
 1342 0628 0122     		movs	r2, #1
 1343 062a 7C20     		movs	r0, #124
 1344              	.LVL93:
1162:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
 1345              		.loc 1 1162 6 view .LVU399
 1346 062c 4C49     		ldr	r1, .L524+56
 1347 062e FFF7FEBF 		b	eeprom_readConfigBlock
 1348              	.LVL94:
 1349              	.L39:
 1350              	.LCFI28:
 1351              		.cfi_restore_state
1340:TMCL.c        **** 				{
 1352              		.loc 1 1340 5 is_stmt 1 view .LVU400
1340:TMCL.c        **** 				{
 1353              		.loc 1 1340 8 is_stmt 0 view .LVU401
 1354 0632 0628     		cmp	r0, #6
 1355 0634 7FF4F0AD 		bne	.L1
1345:TMCL.c        **** #endif
 1356              		.loc 1 1345 6 is_stmt 1 view .LVU402
1345:TMCL.c        **** #endif
 1357              		.loc 1 1345 32 is_stmt 0 view .LVU403
 1358 0638 FFF7FEFF 		bl	sensor_wheelVelocity
 1359              	.LVL95:
1345:TMCL.c        **** #endif
 1360              		.loc 1 1345 54 view .LVU404
 1361 063c 494A     		ldr	r2, .L524+60
 1362 063e C317     		asrs	r3, r0, #31
 1363 0640 82FB0012 		smull	r1, r2, r2, r0
 1364 0644 C3EBA203 		rsb	r3, r3, r2, asr #2
1345:TMCL.c        **** #endif
 1365              		.loc 1 1345 30 view .LVU405
 1366 0648 E360     		str	r3, [r4, #12]
 1367              		.loc 1 1594 1 view .LVU406
 1368 064a 38BD     		pop	{r3, r4, r5, pc}
 1369              	.LVL96:
 1370              	.L51:
1181:TMCL.c        **** 				{
 1371              		.loc 1 1181 5 is_stmt 1 view .LVU407
1181:TMCL.c        **** 				{
 1372              		.loc 1 1181 8 is_stmt 0 view .LVU408
 1373 064c 0528     		cmp	r0, #5
 1374 064e 00F07185 		beq	.L380
1184:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.wheelDiameter;
 1375              		.loc 1 1184 12 is_stmt 1 view .LVU409
1184:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.wheelDiameter;
 1376              		.loc 1 1184 15 is_stmt 0 view .LVU410
 1377 0652 0628     		cmp	r0, #6
 1378 0654 00F0B586 		beq	.L381
1186:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelDiameter-(u32)&motorConf
 1379              		.loc 1 1186 12 is_stmt 1 view .LVU411
1186:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelDiameter-(u32)&motorConf
 1380              		.loc 1 1186 15 is_stmt 0 view .LVU412
 1381 0658 0728     		cmp	r0, #7
 1382 065a 01F06081 		beq	.L382
1189:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelDiameter-(u32)&motorConfi
 1383              		.loc 1 1189 12 is_stmt 1 view .LVU413
1189:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.wheelDiameter-(u32)&motorConfi
 1384              		.loc 1 1189 15 is_stmt 0 view .LVU414
 1385 065e 0828     		cmp	r0, #8
 1386 0660 7FF4DAAD 		bne	.L1
1190:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
 1387              		.loc 1 1190 6 is_stmt 1 view .LVU415
 1388              		.loc 1 1594 1 is_stmt 0 view .LVU416
 1389 0664 BDE83840 		pop	{r3, r4, r5, lr}
 1390              	.LCFI29:
 1391              		.cfi_remember_state
 1392              		.cfi_restore 14
 1393              		.cfi_restore 5
 1394              		.cfi_restore 4
 1395              		.cfi_restore 3
 1396              		.cfi_def_cfa_offset 0
1190:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
 1397              		.loc 1 1190 6 view .LVU417
 1398 0668 0222     		movs	r2, #2
 1399 066a 7E20     		movs	r0, #126
 1400              	.LVL97:
1190:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
 1401              		.loc 1 1190 6 view .LVU418
 1402 066c 3E49     		ldr	r1, .L524+64
 1403 066e FFF7FEBF 		b	eeprom_readConfigBlock
 1404              	.LVL98:
 1405              	.L43:
 1406              	.LCFI30:
 1407              		.cfi_restore_state
1298:TMCL.c        **** 				{
 1408              		.loc 1 1298 5 is_stmt 1 view .LVU419
1298:TMCL.c        **** 				{
 1409              		.loc 1 1298 8 is_stmt 0 view .LVU420
 1410 0672 0528     		cmp	r0, #5
 1411 0674 00F0A584 		beq	.L383
1301:TMCL.c        **** 				{
 1412              		.loc 1 1301 12 is_stmt 1 view .LVU421
1301:TMCL.c        **** 				{
 1413              		.loc 1 1301 15 is_stmt 0 view .LVU422
 1414 0678 0628     		cmp	r0, #6
 1415 067a 00F05B86 		beq	.L384
1304:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.swapMotorAAndCPhase-(u32)&mot
 1416              		.loc 1 1304 12 is_stmt 1 view .LVU423
1304:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.swapMotorAAndCPhase-(u32)&mot
 1417              		.loc 1 1304 15 is_stmt 0 view .LVU424
 1418 067e 0728     		cmp	r0, #7
 1419 0680 01F07781 		beq	.L385
1307:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.swapMotorAAndCPhase-(u32)&moto
 1420              		.loc 1 1307 12 is_stmt 1 view .LVU425
1307:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.swapMotorAAndCPhase-(u32)&moto
 1421              		.loc 1 1307 15 is_stmt 0 view .LVU426
 1422 0684 0828     		cmp	r0, #8
 1423 0686 7FF4C7AD 		bne	.L1
1308:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
 1424              		.loc 1 1308 6 is_stmt 1 view .LVU427
 1425              		.loc 1 1594 1 is_stmt 0 view .LVU428
 1426 068a BDE83840 		pop	{r3, r4, r5, lr}
 1427              	.LCFI31:
 1428              		.cfi_remember_state
 1429              		.cfi_restore 14
 1430              		.cfi_restore 5
 1431              		.cfi_restore 4
 1432              		.cfi_restore 3
 1433              		.cfi_def_cfa_offset 0
1308:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
 1434              		.loc 1 1308 6 view .LVU429
 1435 068e 0122     		movs	r2, #1
 1436 0690 8C20     		movs	r0, #140
 1437              	.LVL99:
1308:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
 1438              		.loc 1 1308 6 view .LVU430
 1439 0692 3649     		ldr	r1, .L524+68
 1440 0694 FFF7FEBF 		b	eeprom_readConfigBlock
 1441              	.LVL100:
 1442              	.L54:
 1443              	.LCFI32:
 1444              		.cfi_restore_state
1137:TMCL.c        **** 				{
 1445              		.loc 1 1137 5 is_stmt 1 view .LVU431
1137:TMCL.c        **** 				{
 1446              		.loc 1 1137 8 is_stmt 0 view .LVU432
 1447 0698 0528     		cmp	r0, #5
 1448 069a 01F00180 		beq	.L386
1141:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maximumCurrent;
 1449              		.loc 1 1141 12 is_stmt 1 view .LVU433
1141:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maximumCurrent;
 1450              		.loc 1 1141 15 is_stmt 0 view .LVU434
 1451 069e 0628     		cmp	r0, #6
 1452 06a0 00F07185 		beq	.L387
1143:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumCurrent-(u32)&motorCon
 1453              		.loc 1 1143 12 is_stmt 1 view .LVU435
1143:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumCurrent-(u32)&motorCon
 1454              		.loc 1 1143 15 is_stmt 0 view .LVU436
 1455 06a4 0728     		cmp	r0, #7
 1456 06a6 01F0CA80 		beq	.L388
1146:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumCurrent-(u32)&motorConf
 1457              		.loc 1 1146 12 is_stmt 1 view .LVU437
1146:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumCurrent-(u32)&motorConf
 1458              		.loc 1 1146 15 is_stmt 0 view .LVU438
 1459 06aa 0828     		cmp	r0, #8
 1460 06ac 7FF4B4AD 		bne	.L1
1147:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
 1461              		.loc 1 1147 6 is_stmt 1 view .LVU439
 1462              		.loc 1 1594 1 is_stmt 0 view .LVU440
 1463 06b0 BDE83840 		pop	{r3, r4, r5, lr}
 1464              	.LCFI33:
 1465              		.cfi_remember_state
 1466              		.cfi_restore 14
 1467              		.cfi_restore 5
 1468              		.cfi_restore 4
 1469              		.cfi_restore 3
 1470              		.cfi_def_cfa_offset 0
1147:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
 1471              		.loc 1 1147 6 view .LVU441
 1472 06b4 0422     		movs	r2, #4
 1473 06b6 7820     		movs	r0, #120
 1474              	.LVL101:
1147:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
 1475              		.loc 1 1147 6 view .LVU442
 1476 06b8 2D49     		ldr	r1, .L524+72
 1477 06ba FFF7FEBF 		b	eeprom_readConfigBlock
 1478              	.LVL102:
 1479              	.L56:
 1480              	.LCFI34:
 1481              		.cfi_restore_state
1122:TMCL.c        **** 				{
 1482              		.loc 1 1122 5 is_stmt 1 view .LVU443
1122:TMCL.c        **** 				{
 1483              		.loc 1 1122 8 is_stmt 0 view .LVU444
 1484 06be 0628     		cmp	r0, #6
 1485 06c0 7FF4AAAD 		bne	.L1
1124:TMCL.c        **** 				}
 1486              		.loc 1 1124 6 is_stmt 1 view .LVU445
1124:TMCL.c        **** 				}
 1487              		.loc 1 1124 32 is_stmt 0 view .LVU446
 1488 06c4 FFF7FEFF 		bl	sensor_actualGain
 1489              	.LVL103:
1124:TMCL.c        **** 				}
 1490              		.loc 1 1124 30 view .LVU447
 1491 06c8 E060     		str	r0, [r4, #12]
 1492              		.loc 1 1594 1 view .LVU448
 1493 06ca 38BD     		pop	{r3, r4, r5, pc}
 1494              	.LVL104:
 1495              	.L57:
1116:TMCL.c        **** 				{
 1496              		.loc 1 1116 5 is_stmt 1 view .LVU449
1116:TMCL.c        **** 				{
 1497              		.loc 1 1116 8 is_stmt 0 view .LVU450
 1498 06cc 0628     		cmp	r0, #6
 1499 06ce 7FF4A3AD 		bne	.L1
1118:TMCL.c        **** 				}
 1500              		.loc 1 1118 6 is_stmt 1 view .LVU451
1118:TMCL.c        **** 				}
 1501              		.loc 1 1118 32 is_stmt 0 view .LVU452
 1502 06d2 FFF7FEFF 		bl	sensor_actualMapSpeedTorque
 1503              	.LVL105:
1118:TMCL.c        **** 				}
 1504              		.loc 1 1118 30 view .LVU453
 1505 06d6 E060     		str	r0, [r4, #12]
 1506              		.loc 1 1594 1 view .LVU454
 1507 06d8 38BD     		pop	{r3, r4, r5, pc}
 1508              	.LVL106:
 1509              	.L86:
 700:TMCL.c        **** 				{
 1510              		.loc 1 700 5 is_stmt 1 view .LVU455
 700:TMCL.c        **** 				{
 1511              		.loc 1 700 8 is_stmt 0 view .LVU456
 1512 06da 0528     		cmp	r0, #5
 1513 06dc 00F00087 		beq	.L389
 704:TMCL.c        **** 				{
 1514              		.loc 1 704 12 is_stmt 1 view .LVU457
 704:TMCL.c        **** 				{
 1515              		.loc 1 704 15 is_stmt 0 view .LVU458
 1516 06e0 0628     		cmp	r0, #6
 1517 06e2 00F08F85 		beq	.L390
 707:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.assistCutOutDistance-(u32)&mo
 1518              		.loc 1 707 12 is_stmt 1 view .LVU459
 707:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.assistCutOutDistance-(u32)&mo
 1519              		.loc 1 707 15 is_stmt 0 view .LVU460
 1520 06e6 0728     		cmp	r0, #7
 1521 06e8 01F06A80 		beq	.L391
 710:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.assistCutOutDistance-(u32)&mot
 1522              		.loc 1 710 12 is_stmt 1 view .LVU461
 710:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.assistCutOutDistance-(u32)&mot
 1523              		.loc 1 710 15 is_stmt 0 view .LVU462
 1524 06ec 0828     		cmp	r0, #8
 1525 06ee 7FF493AD 		bne	.L1
 711:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 1526              		.loc 1 711 6 is_stmt 1 view .LVU463
 1527              		.loc 1 1594 1 is_stmt 0 view .LVU464
 1528 06f2 BDE83840 		pop	{r3, r4, r5, lr}
 1529              	.LCFI35:
 1530              		.cfi_remember_state
 1531              		.cfi_restore 14
 1532              		.cfi_restore 5
 1533              		.cfi_restore 4
 1534              		.cfi_restore 3
 1535              		.cfi_def_cfa_offset 0
 711:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 1536              		.loc 1 711 6 view .LVU465
 1537 06f6 0222     		movs	r2, #2
 1538 06f8 4A20     		movs	r0, #74
 1539              	.LVL107:
 711:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 1540              		.loc 1 711 6 view .LVU466
 1541 06fa 1E49     		ldr	r1, .L524+76
 1542 06fc FFF7FEBF 		b	eeprom_readConfigBlock
 1543              	.LVL108:
 1544              	.L87:
 1545              	.LCFI36:
 1546              		.cfi_restore_state
 685:TMCL.c        **** 				{
 1547              		.loc 1 685 5 is_stmt 1 view .LVU467
 685:TMCL.c        **** 				{
 1548              		.loc 1 685 8 is_stmt 0 view .LVU468
 1549 0700 0528     		cmp	r0, #5
 1550 0702 00F09D84 		beq	.L392
 688:TMCL.c        **** 				{
 1551              		.loc 1 688 12 is_stmt 1 view .LVU469
 688:TMCL.c        **** 				{
 1552              		.loc 1 688 15 is_stmt 0 view .LVU470
 1553 0706 0628     		cmp	r0, #6
 1554 0708 00F02886 		beq	.L393
 691:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueDeadband-(u32)&motorCon
 1555              		.loc 1 691 12 is_stmt 1 view .LVU471
 691:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueDeadband-(u32)&motorCon
 1556              		.loc 1 691 15 is_stmt 0 view .LVU472
 1557 070c 0728     		cmp	r0, #7
 1558 070e 01F06881 		beq	.L394
 694:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueDeadband-(u32)&motorConf
 1559              		.loc 1 694 12 is_stmt 1 view .LVU473
 694:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueDeadband-(u32)&motorConf
 1560              		.loc 1 694 15 is_stmt 0 view .LVU474
 1561 0712 0828     		cmp	r0, #8
 1562 0714 7FF480AD 		bne	.L1
 695:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 1563              		.loc 1 695 6 is_stmt 1 view .LVU475
 1564              		.loc 1 1594 1 is_stmt 0 view .LVU476
 1565 0718 BDE83840 		pop	{r3, r4, r5, lr}
 1566              	.LCFI37:
 1567              		.cfi_remember_state
 1568              		.cfi_restore 14
 1569              		.cfi_restore 5
 1570              		.cfi_restore 4
 1571              		.cfi_restore 3
 1572              		.cfi_def_cfa_offset 0
 695:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 1573              		.loc 1 695 6 view .LVU477
 1574 071c 0222     		movs	r2, #2
 1575 071e 4820     		movs	r0, #72
 1576              	.LVL109:
 695:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 1577              		.loc 1 695 6 view .LVU478
 1578 0720 1549     		ldr	r1, .L524+80
 1579 0722 FFF7FEBF 		b	eeprom_readConfigBlock
 1580              	.LVL110:
 1581              	.L525:
 1582 0726 00BF     		.align	2
 1583              	.L524:
 1584 0728 54000000 		.word	motorConfig+84
 1585 072c 52000000 		.word	motorConfig+82
 1586 0730 50000000 		.word	motorConfig+80
 1587 0734 4E000000 		.word	motorConfig+78
 1588 0738 398EE338 		.word	954437177
 1589 073c 46000000 		.word	motorConfig+70
 1590 0740 45000000 		.word	motorConfig+69
 1591 0744 44000000 		.word	motorConfig+68
 1592 0748 42000000 		.word	motorConfig+66
 1593 074c 4D000000 		.word	motorConfig+77
 1594 0750 4A000000 		.word	motorConfig+74
 1595 0754 48000000 		.word	motorConfig+72
 1596 0758 40000000 		.word	motorConfig+64
 1597 075c 3D000000 		.word	motorConfig+61
 1598 0760 3C000000 		.word	motorConfig+60
 1599 0764 67666666 		.word	1717986919
 1600 0768 3E000000 		.word	motorConfig+62
 1601 076c 4C000000 		.word	motorConfig+76
 1602 0770 38000000 		.word	motorConfig+56
 1603 0774 0A000000 		.word	motorConfig+10
 1604 0778 08000000 		.word	motorConfig+8
 1605              	.LVL111:
 1606              	.L88:
 1607              	.LCFI38:
 1608              		.cfi_restore_state
 670:TMCL.c        **** 				{
 1609              		.loc 1 670 5 is_stmt 1 view .LVU479
 670:TMCL.c        **** 				{
 1610              		.loc 1 670 8 is_stmt 0 view .LVU480
 1611 077c 0528     		cmp	r0, #5
 1612 077e 00F06384 		beq	.L395
 673:TMCL.c        **** 				{
 1613              		.loc 1 673 12 is_stmt 1 view .LVU481
 673:TMCL.c        **** 				{
 1614              		.loc 1 673 15 is_stmt 0 view .LVU482
 1615 0782 0628     		cmp	r0, #6
 1616 0784 00F0EE85 		beq	.L396
 676:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorOffset-(u32)&moto
 1617              		.loc 1 676 12 is_stmt 1 view .LVU483
 676:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorOffset-(u32)&moto
 1618              		.loc 1 676 15 is_stmt 0 view .LVU484
 1619 0788 0728     		cmp	r0, #7
 1620 078a 01F03181 		beq	.L397
 679:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorOffset-(u32)&motor
 1621              		.loc 1 679 12 is_stmt 1 view .LVU485
 679:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorOffset-(u32)&motor
 1622              		.loc 1 679 15 is_stmt 0 view .LVU486
 1623 078e 0828     		cmp	r0, #8
 1624 0790 7FF442AD 		bne	.L1
 680:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 1625              		.loc 1 680 6 is_stmt 1 view .LVU487
 1626              		.loc 1 1594 1 is_stmt 0 view .LVU488
 1627 0794 BDE83840 		pop	{r3, r4, r5, lr}
 1628              	.LCFI39:
 1629              		.cfi_remember_state
 1630              		.cfi_restore 14
 1631              		.cfi_restore 5
 1632              		.cfi_restore 4
 1633              		.cfi_restore 3
 1634              		.cfi_def_cfa_offset 0
 680:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 1635              		.loc 1 680 6 view .LVU489
 1636 0798 0222     		movs	r2, #2
 1637 079a 4620     		movs	r0, #70
 1638              	.LVL112:
 680:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 1639              		.loc 1 680 6 view .LVU490
 1640 079c C049     		ldr	r1, .L526
 1641 079e FFF7FEBF 		b	eeprom_readConfigBlock
 1642              	.LVL113:
 1643              	.L89:
 1644              	.LCFI40:
 1645              		.cfi_restore_state
 655:TMCL.c        **** 				{
 1646              		.loc 1 655 5 is_stmt 1 view .LVU491
 655:TMCL.c        **** 				{
 1647              		.loc 1 655 8 is_stmt 0 view .LVU492
 1648 07a2 0528     		cmp	r0, #5
 1649 07a4 00F04484 		beq	.L398
 658:TMCL.c        **** 				{
 1650              		.loc 1 658 12 is_stmt 1 view .LVU493
 658:TMCL.c        **** 				{
 1651              		.loc 1 658 15 is_stmt 0 view .LVU494
 1652 07a8 0628     		cmp	r0, #6
 1653 07aa 00F03985 		beq	.L399
 661:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorGain-(u32)&motorC
 1654              		.loc 1 661 12 is_stmt 1 view .LVU495
 661:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorGain-(u32)&motorC
 1655              		.loc 1 661 15 is_stmt 0 view .LVU496
 1656 07ae 0728     		cmp	r0, #7
 1657 07b0 01F06F80 		beq	.L400
 664:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorGain-(u32)&motorCo
 1658              		.loc 1 664 12 is_stmt 1 view .LVU497
 664:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torqueSensorGain-(u32)&motorCo
 1659              		.loc 1 664 15 is_stmt 0 view .LVU498
 1660 07b4 0828     		cmp	r0, #8
 1661 07b6 7FF42FAD 		bne	.L1
 665:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 1662              		.loc 1 665 6 is_stmt 1 view .LVU499
 1663              		.loc 1 1594 1 is_stmt 0 view .LVU500
 1664 07ba BDE83840 		pop	{r3, r4, r5, lr}
 1665              	.LCFI41:
 1666              		.cfi_remember_state
 1667              		.cfi_restore 14
 1668              		.cfi_restore 5
 1669              		.cfi_restore 4
 1670              		.cfi_restore 3
 1671              		.cfi_def_cfa_offset 0
 665:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 1672              		.loc 1 665 6 view .LVU501
 1673 07be 0222     		movs	r2, #2
 1674 07c0 4420     		movs	r0, #68
 1675              	.LVL114:
 665:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 1676              		.loc 1 665 6 view .LVU502
 1677 07c2 B849     		ldr	r1, .L526+4
 1678 07c4 FFF7FEBF 		b	eeprom_readConfigBlock
 1679              	.LVL115:
 1680              	.L90:
 1681              	.LCFI42:
 1682              		.cfi_restore_state
 640:TMCL.c        **** 				{
 1683              		.loc 1 640 5 is_stmt 1 view .LVU503
 640:TMCL.c        **** 				{
 1684              		.loc 1 640 8 is_stmt 0 view .LVU504
 1685 07c8 0528     		cmp	r0, #5
 1686 07ca 00F06884 		beq	.L401
 643:TMCL.c        **** 				{
 1687              		.loc 1 643 12 is_stmt 1 view .LVU505
 643:TMCL.c        **** 				{
 1688              		.loc 1 643 15 is_stmt 0 view .LVU506
 1689 07ce 0628     		cmp	r0, #6
 1690 07d0 00F05B85 		beq	.L402
 646:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalSenseDelay-(u32)&motorCo
 1691              		.loc 1 646 12 is_stmt 1 view .LVU507
 646:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalSenseDelay-(u32)&motorCo
 1692              		.loc 1 646 15 is_stmt 0 view .LVU508
 1693 07d4 0728     		cmp	r0, #7
 1694 07d6 01F02E81 		beq	.L403
 649:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalSenseDelay-(u32)&motorCon
 1695              		.loc 1 649 12 is_stmt 1 view .LVU509
 649:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalSenseDelay-(u32)&motorCon
 1696              		.loc 1 649 15 is_stmt 0 view .LVU510
 1697 07da 0828     		cmp	r0, #8
 1698 07dc 7FF41CAD 		bne	.L1
 650:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 1699              		.loc 1 650 6 is_stmt 1 view .LVU511
 1700              		.loc 1 1594 1 is_stmt 0 view .LVU512
 1701 07e0 BDE83840 		pop	{r3, r4, r5, lr}
 1702              	.LCFI43:
 1703              		.cfi_remember_state
 1704              		.cfi_restore 14
 1705              		.cfi_restore 5
 1706              		.cfi_restore 4
 1707              		.cfi_restore 3
 1708              		.cfi_def_cfa_offset 0
 650:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 1709              		.loc 1 650 6 view .LVU513
 1710 07e4 0222     		movs	r2, #2
 1711 07e6 4220     		movs	r0, #66
 1712              	.LVL116:
 650:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 1713              		.loc 1 650 6 view .LVU514
 1714 07e8 AF49     		ldr	r1, .L526+8
 1715 07ea FFF7FEBF 		b	eeprom_readConfigBlock
 1716              	.LVL117:
 1717              	.L92:
 1718              	.LCFI44:
 1719              		.cfi_restore_state
 605:TMCL.c        **** 					if (!bldc_setRampEnabled(ActualCommand.Value.Int32))
 1720              		.loc 1 605 5 is_stmt 1 view .LVU515
 605:TMCL.c        **** 					if (!bldc_setRampEnabled(ActualCommand.Value.Int32))
 1721              		.loc 1 605 8 is_stmt 0 view .LVU516
 1722 07ee 0528     		cmp	r0, #5
 1723 07f0 00F06F86 		beq	.L404
 608:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.useVelocityRamp ? 1:0;
 1724              		.loc 1 608 12 is_stmt 1 view .LVU517
 608:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.useVelocityRamp ? 1:0;
 1725              		.loc 1 608 15 is_stmt 0 view .LVU518
 1726 07f4 0628     		cmp	r0, #6
 1727 07f6 00F0FD84 		beq	.L405
 610:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.useVelocityRamp-(u32)&motorCo
 1728              		.loc 1 610 12 is_stmt 1 view .LVU519
 610:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.useVelocityRamp-(u32)&motorCo
 1729              		.loc 1 610 15 is_stmt 0 view .LVU520
 1730 07fa 0728     		cmp	r0, #7
 1731 07fc 00F0D987 		beq	.L406
 613:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.useVelocityRamp-(u32)&motorCon
 1732              		.loc 1 613 12 is_stmt 1 view .LVU521
 613:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.useVelocityRamp-(u32)&motorCon
 1733              		.loc 1 613 15 is_stmt 0 view .LVU522
 1734 0800 0828     		cmp	r0, #8
 1735 0802 7FF409AD 		bne	.L1
 614:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 1736              		.loc 1 614 6 is_stmt 1 view .LVU523
 1737              		.loc 1 1594 1 is_stmt 0 view .LVU524
 1738 0806 BDE83840 		pop	{r3, r4, r5, lr}
 1739              	.LCFI45:
 1740              		.cfi_remember_state
 1741              		.cfi_restore 14
 1742              		.cfi_restore 5
 1743              		.cfi_restore 4
 1744              		.cfi_restore 3
 1745              		.cfi_def_cfa_offset 0
 614:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 1746              		.loc 1 614 6 view .LVU525
 1747 080a 0122     		movs	r2, #1
 1748 080c BB20     		movs	r0, #187
 1749              	.LVL118:
 614:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 1750              		.loc 1 614 6 view .LVU526
 1751 080e A749     		ldr	r1, .L526+12
 1752 0810 FFF7FEBF 		b	eeprom_readConfigBlock
 1753              	.LVL119:
 1754              	.L93:
 1755              	.LCFI46:
 1756              		.cfi_restore_state
 591:TMCL.c        **** 					if (!bldc_setAcceleration(ActualCommand.Value.Int32))
 1757              		.loc 1 591 5 is_stmt 1 view .LVU527
 591:TMCL.c        **** 					if (!bldc_setAcceleration(ActualCommand.Value.Int32))
 1758              		.loc 1 591 8 is_stmt 0 view .LVU528
 1759 0814 0528     		cmp	r0, #5
 1760 0816 00F0E486 		beq	.L407
 594:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.acceleration;
 1761              		.loc 1 594 12 is_stmt 1 view .LVU529
 594:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.acceleration;
 1762              		.loc 1 594 15 is_stmt 0 view .LVU530
 1763 081a 0628     		cmp	r0, #6
 1764 081c 00F0B784 		beq	.L408
 596:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.acceleration-(u32)&motorConfi
 1765              		.loc 1 596 12 is_stmt 1 view .LVU531
 596:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.acceleration-(u32)&motorConfi
 1766              		.loc 1 596 15 is_stmt 0 view .LVU532
 1767 0820 0728     		cmp	r0, #7
 1768 0822 00F0E287 		beq	.L409
 599:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.acceleration-(u32)&motorConfig
 1769              		.loc 1 599 12 is_stmt 1 view .LVU533
 599:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.acceleration-(u32)&motorConfig
 1770              		.loc 1 599 15 is_stmt 0 view .LVU534
 1771 0826 0828     		cmp	r0, #8
 1772 0828 7FF4F6AC 		bne	.L1
 600:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 1773              		.loc 1 600 6 is_stmt 1 view .LVU535
 1774              		.loc 1 1594 1 is_stmt 0 view .LVU536
 1775 082c BDE83840 		pop	{r3, r4, r5, lr}
 1776              	.LCFI47:
 1777              		.cfi_remember_state
 1778              		.cfi_restore 14
 1779              		.cfi_restore 5
 1780              		.cfi_restore 4
 1781              		.cfi_restore 3
 1782              		.cfi_def_cfa_offset 0
 600:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 1783              		.loc 1 600 6 view .LVU537
 1784 0830 0422     		movs	r2, #4
 1785 0832 9C20     		movs	r0, #156
 1786              	.LVL120:
 600:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 1787              		.loc 1 600 6 view .LVU538
 1788 0834 9E49     		ldr	r1, .L526+16
 1789 0836 FFF7FEBF 		b	eeprom_readConfigBlock
 1790              	.LVL121:
 1791              	.L70:
 1792              	.LCFI48:
 1793              		.cfi_restore_state
 919:TMCL.c        **** 				{
 1794              		.loc 1 919 5 is_stmt 1 view .LVU539
 919:TMCL.c        **** 				{
 1795              		.loc 1 919 8 is_stmt 0 view .LVU540
 1796 083a 0528     		cmp	r0, #5
 1797 083c 00F03384 		beq	.L410
 922:TMCL.c        **** 				{
 1798              		.loc 1 922 12 is_stmt 1 view .LVU541
 922:TMCL.c        **** 				{
 1799              		.loc 1 922 15 is_stmt 0 view .LVU542
 1800 0840 0628     		cmp	r0, #6
 1801 0842 00F0FE84 		beq	.L411
 925:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_6-(u32)&motorConfig,
 1802              		.loc 1 925 12 is_stmt 1 view .LVU543
 925:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_6-(u32)&motorConfig,
 1803              		.loc 1 925 15 is_stmt 0 view .LVU544
 1804 0846 0728     		cmp	r0, #7
 1805 0848 01F0A180 		beq	.L412
 928:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_6-(u32)&motorConfig,
 1806              		.loc 1 928 12 is_stmt 1 view .LVU545
 928:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_6-(u32)&motorConfig,
 1807              		.loc 1 928 15 is_stmt 0 view .LVU546
 1808 084c 0828     		cmp	r0, #8
 1809 084e 7FF4E3AC 		bne	.L1
 929:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 1810              		.loc 1 929 6 is_stmt 1 view .LVU547
 1811              		.loc 1 1594 1 is_stmt 0 view .LVU548
 1812 0852 BDE83840 		pop	{r3, r4, r5, lr}
 1813              	.LCFI49:
 1814              		.cfi_remember_state
 1815              		.cfi_restore 14
 1816              		.cfi_restore 5
 1817              		.cfi_restore 4
 1818              		.cfi_restore 3
 1819              		.cfi_def_cfa_offset 0
 929:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 1820              		.loc 1 929 6 view .LVU549
 1821 0856 0222     		movs	r2, #2
 1822 0858 6620     		movs	r0, #102
 1823              	.LVL122:
 929:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 1824              		.loc 1 929 6 view .LVU550
 1825 085a 9649     		ldr	r1, .L526+20
 1826 085c FFF7FEBF 		b	eeprom_readConfigBlock
 1827              	.LVL123:
 1828              	.L72:
 1829              	.LCFI50:
 1830              		.cfi_restore_state
 889:TMCL.c        **** 				{
 1831              		.loc 1 889 5 is_stmt 1 view .LVU551
 889:TMCL.c        **** 				{
 1832              		.loc 1 889 8 is_stmt 0 view .LVU552
 1833 0860 0528     		cmp	r0, #5
 1834 0862 00F02784 		beq	.L413
 892:TMCL.c        **** 				{
 1835              		.loc 1 892 12 is_stmt 1 view .LVU553
 892:TMCL.c        **** 				{
 1836              		.loc 1 892 15 is_stmt 0 view .LVU554
 1837 0866 0628     		cmp	r0, #6
 1838 0868 00F0F384 		beq	.L414
 895:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_4-(u32)&motorConfig,
 1839              		.loc 1 895 12 is_stmt 1 view .LVU555
 895:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_4-(u32)&motorConfig,
 1840              		.loc 1 895 15 is_stmt 0 view .LVU556
 1841 086c 0728     		cmp	r0, #7
 1842 086e 01F09580 		beq	.L415
 898:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_4-(u32)&motorConfig,
 1843              		.loc 1 898 12 is_stmt 1 view .LVU557
 898:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_4-(u32)&motorConfig,
 1844              		.loc 1 898 15 is_stmt 0 view .LVU558
 1845 0872 0828     		cmp	r0, #8
 1846 0874 7FF4D0AC 		bne	.L1
 899:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 1847              		.loc 1 899 6 is_stmt 1 view .LVU559
 1848              		.loc 1 1594 1 is_stmt 0 view .LVU560
 1849 0878 BDE83840 		pop	{r3, r4, r5, lr}
 1850              	.LCFI51:
 1851              		.cfi_remember_state
 1852              		.cfi_restore 14
 1853              		.cfi_restore 5
 1854              		.cfi_restore 4
 1855              		.cfi_restore 3
 1856              		.cfi_def_cfa_offset 0
 899:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 1857              		.loc 1 899 6 view .LVU561
 1858 087c 0222     		movs	r2, #2
 1859 087e 6220     		movs	r0, #98
 1860              	.LVL124:
 899:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 1861              		.loc 1 899 6 view .LVU562
 1862 0880 8D49     		ldr	r1, .L526+24
 1863 0882 FFF7FEBF 		b	eeprom_readConfigBlock
 1864              	.LVL125:
 1865              	.L73:
 1866              	.LCFI52:
 1867              		.cfi_restore_state
 874:TMCL.c        **** 				{
 1868              		.loc 1 874 5 is_stmt 1 view .LVU563
 874:TMCL.c        **** 				{
 1869              		.loc 1 874 8 is_stmt 0 view .LVU564
 1870 0886 0528     		cmp	r0, #5
 1871 0888 00F06683 		beq	.L416
 877:TMCL.c        **** 				{
 1872              		.loc 1 877 12 is_stmt 1 view .LVU565
 877:TMCL.c        **** 				{
 1873              		.loc 1 877 15 is_stmt 0 view .LVU566
 1874 088c 0628     		cmp	r0, #6
 1875 088e 00F0D084 		beq	.L417
 880:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_3-(u32)&motorConfig,
 1876              		.loc 1 880 12 is_stmt 1 view .LVU567
 880:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_3-(u32)&motorConfig,
 1877              		.loc 1 880 15 is_stmt 0 view .LVU568
 1878 0892 0728     		cmp	r0, #7
 1879 0894 01F08980 		beq	.L418
 883:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_3-(u32)&motorConfig,
 1880              		.loc 1 883 12 is_stmt 1 view .LVU569
 883:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_3-(u32)&motorConfig,
 1881              		.loc 1 883 15 is_stmt 0 view .LVU570
 1882 0898 0828     		cmp	r0, #8
 1883 089a 7FF4BDAC 		bne	.L1
 884:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 1884              		.loc 1 884 6 is_stmt 1 view .LVU571
 1885              		.loc 1 1594 1 is_stmt 0 view .LVU572
 1886 089e BDE83840 		pop	{r3, r4, r5, lr}
 1887              	.LCFI53:
 1888              		.cfi_remember_state
 1889              		.cfi_restore 14
 1890              		.cfi_restore 5
 1891              		.cfi_restore 4
 1892              		.cfi_restore 3
 1893              		.cfi_def_cfa_offset 0
 884:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 1894              		.loc 1 884 6 view .LVU573
 1895 08a2 0222     		movs	r2, #2
 1896 08a4 6020     		movs	r0, #96
 1897              	.LVL126:
 884:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 1898              		.loc 1 884 6 view .LVU574
 1899 08a6 8549     		ldr	r1, .L526+28
 1900 08a8 FFF7FEBF 		b	eeprom_readConfigBlock
 1901              	.LVL127:
 1902              	.L102:
 1903              	.LCFI54:
 1904              		.cfi_restore_state
 483:TMCL.c        **** 				{
 1905              		.loc 1 483 5 is_stmt 1 view .LVU575
 483:TMCL.c        **** 				{
 1906              		.loc 1 483 8 is_stmt 0 view .LVU576
 1907 08ac 0528     		cmp	r0, #5
 1908 08ae 00F0E185 		beq	.L419
 489:TMCL.c        **** 				{
 1909              		.loc 1 489 10 is_stmt 1 view .LVU577
 489:TMCL.c        **** 				{
 1910              		.loc 1 489 13 is_stmt 0 view .LVU578
 1911 08b2 0628     		cmp	r0, #6
 1912 08b4 00F09984 		beq	.L420
 492:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_I_param-(u32)&motor
 1913              		.loc 1 492 12 is_stmt 1 view .LVU579
 492:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_I_param-(u32)&motor
 1914              		.loc 1 492 15 is_stmt 0 view .LVU580
 1915 08b8 0728     		cmp	r0, #7
 1916 08ba 00F08887 		beq	.L421
 495:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_I_param-(u32)&motorC
 1917              		.loc 1 495 12 is_stmt 1 view .LVU581
 495:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_I_param-(u32)&motorC
 1918              		.loc 1 495 15 is_stmt 0 view .LVU582
 1919 08be 0828     		cmp	r0, #8
 1920 08c0 7FF4AAAC 		bne	.L1
 496:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 1921              		.loc 1 496 6 is_stmt 1 view .LVU583
 1922              		.loc 1 1594 1 is_stmt 0 view .LVU584
 1923 08c4 BDE83840 		pop	{r3, r4, r5, lr}
 1924              	.LCFI55:
 1925              		.cfi_remember_state
 1926              		.cfi_restore 14
 1927              		.cfi_restore 5
 1928              		.cfi_restore 4
 1929              		.cfi_restore 3
 1930              		.cfi_def_cfa_offset 0
 496:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 1931              		.loc 1 496 6 view .LVU585
 1932 08c8 0222     		movs	r2, #2
 1933 08ca CA20     		movs	r0, #202
 1934              	.LVL128:
 496:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 1935              		.loc 1 496 6 view .LVU586
 1936 08cc 7C49     		ldr	r1, .L526+32
 1937 08ce FFF7FEBF 		b	eeprom_readConfigBlock
 1938              	.LVL129:
 1939              	.L104:
 1940              	.LCFI56:
 1941              		.cfi_restore_state
 459:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getDigitalHallAngle();
 1942              		.loc 1 459 5 is_stmt 1 view .LVU587
 459:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getDigitalHallAngle();
 1943              		.loc 1 459 8 is_stmt 0 view .LVU588
 1944 08d2 0628     		cmp	r0, #6
 1945 08d4 7FF4A0AC 		bne	.L1
 460:TMCL.c        **** 				}
 1946              		.loc 1 460 6 is_stmt 1 view .LVU589
 460:TMCL.c        **** 				}
 1947              		.loc 1 460 32 is_stmt 0 view .LVU590
 1948 08d8 FFF7FEFF 		bl	bldc_getDigitalHallAngle
 1949              	.LVL130:
 460:TMCL.c        **** 				}
 1950              		.loc 1 460 32 view .LVU591
 1951 08dc E060     		str	r0, [r4, #12]
 1952              		.loc 1 1594 1 view .LVU592
 1953 08de 38BD     		pop	{r3, r4, r5, pc}
 1954              	.LVL131:
 1955              	.L105:
 454:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getEncoderAngle();
 1956              		.loc 1 454 5 is_stmt 1 view .LVU593
 454:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getEncoderAngle();
 1957              		.loc 1 454 8 is_stmt 0 view .LVU594
 1958 08e0 0628     		cmp	r0, #6
 1959 08e2 7FF499AC 		bne	.L1
 455:TMCL.c        **** 				}
 1960              		.loc 1 455 6 is_stmt 1 view .LVU595
 455:TMCL.c        **** 				}
 1961              		.loc 1 455 32 is_stmt 0 view .LVU596
 1962 08e6 FFF7FEFF 		bl	bldc_getEncoderAngle
 1963              	.LVL132:
 455:TMCL.c        **** 				}
 1964              		.loc 1 455 32 view .LVU597
 1965 08ea E060     		str	r0, [r4, #12]
 1966              		.loc 1 1594 1 view .LVU598
 1967 08ec 38BD     		pop	{r3, r4, r5, pc}
 1968              	.LVL133:
 1969              	.L62:
1039:TMCL.c        **** 				{
 1970              		.loc 1 1039 5 is_stmt 1 view .LVU599
1039:TMCL.c        **** 				{
 1971              		.loc 1 1039 8 is_stmt 0 view .LVU600
 1972 08ee 0528     		cmp	r0, #5
 1973 08f0 00F05183 		beq	.L422
1042:TMCL.c        **** 				{
 1974              		.loc 1 1042 12 is_stmt 1 view .LVU601
1042:TMCL.c        **** 				{
 1975              		.loc 1 1042 15 is_stmt 0 view .LVU602
 1976 08f4 0628     		cmp	r0, #6
 1977 08f6 00F00685 		beq	.L423
1045:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_5-(u32)&motorConfig,
 1978              		.loc 1 1045 12 is_stmt 1 view .LVU603
1045:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_5-(u32)&motorConfig,
 1979              		.loc 1 1045 15 is_stmt 0 view .LVU604
 1980 08fa 0728     		cmp	r0, #7
 1981 08fc 00F0AD87 		beq	.L424
1048:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_5-(u32)&motorConfig,
 1982              		.loc 1 1048 12 is_stmt 1 view .LVU605
1048:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_5-(u32)&motorConfig,
 1983              		.loc 1 1048 15 is_stmt 0 view .LVU606
 1984 0900 0828     		cmp	r0, #8
 1985 0902 7FF489AC 		bne	.L1
1049:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
 1986              		.loc 1 1049 6 is_stmt 1 view .LVU607
 1987              		.loc 1 1594 1 is_stmt 0 view .LVU608
 1988 0906 BDE83840 		pop	{r3, r4, r5, lr}
 1989              	.LCFI57:
 1990              		.cfi_remember_state
 1991              		.cfi_restore 14
 1992              		.cfi_restore 5
 1993              		.cfi_restore 4
 1994              		.cfi_restore 3
 1995              		.cfi_def_cfa_offset 0
1049:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
 1996              		.loc 1 1049 6 view .LVU609
 1997 090a 0122     		movs	r2, #1
 1998 090c 7120     		movs	r0, #113
 1999              	.LVL134:
1049:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
 2000              		.loc 1 1049 6 view .LVU610
 2001 090e 6D49     		ldr	r1, .L526+36
 2002 0910 FFF7FEBF 		b	eeprom_readConfigBlock
 2003              	.LVL135:
 2004              	.L63:
 2005              	.LCFI58:
 2006              		.cfi_restore_state
1024:TMCL.c        **** 				{
 2007              		.loc 1 1024 5 is_stmt 1 view .LVU611
1024:TMCL.c        **** 				{
 2008              		.loc 1 1024 8 is_stmt 0 view .LVU612
 2009 0914 0528     		cmp	r0, #5
 2010 0916 00F05C83 		beq	.L425
1027:TMCL.c        **** 				{
 2011              		.loc 1 1027 12 is_stmt 1 view .LVU613
1027:TMCL.c        **** 				{
 2012              		.loc 1 1027 15 is_stmt 0 view .LVU614
 2013 091a 0628     		cmp	r0, #6
 2014 091c 00F00F85 		beq	.L426
1030:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_4-(u32)&motorConfig,
 2015              		.loc 1 1030 12 is_stmt 1 view .LVU615
1030:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_4-(u32)&motorConfig,
 2016              		.loc 1 1030 15 is_stmt 0 view .LVU616
 2017 0920 0728     		cmp	r0, #7
 2018 0922 00F0A187 		beq	.L427
1033:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_4-(u32)&motorConfig,
 2019              		.loc 1 1033 12 is_stmt 1 view .LVU617
1033:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_4-(u32)&motorConfig,
 2020              		.loc 1 1033 15 is_stmt 0 view .LVU618
 2021 0926 0828     		cmp	r0, #8
 2022 0928 7FF476AC 		bne	.L1
1034:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
 2023              		.loc 1 1034 6 is_stmt 1 view .LVU619
 2024              		.loc 1 1594 1 is_stmt 0 view .LVU620
 2025 092c BDE83840 		pop	{r3, r4, r5, lr}
 2026              	.LCFI59:
 2027              		.cfi_remember_state
 2028              		.cfi_restore 14
 2029              		.cfi_restore 5
 2030              		.cfi_restore 4
 2031              		.cfi_restore 3
 2032              		.cfi_def_cfa_offset 0
1034:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
 2033              		.loc 1 1034 6 view .LVU621
 2034 0930 0122     		movs	r2, #1
 2035 0932 7020     		movs	r0, #112
 2036              	.LVL136:
1034:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
 2037              		.loc 1 1034 6 view .LVU622
 2038 0934 6449     		ldr	r1, .L526+40
 2039 0936 FFF7FEBF 		b	eeprom_readConfigBlock
 2040              	.LVL137:
 2041              	.L64:
 2042              	.LCFI60:
 2043              		.cfi_restore_state
1009:TMCL.c        **** 				{
 2044              		.loc 1 1009 5 is_stmt 1 view .LVU623
1009:TMCL.c        **** 				{
 2045              		.loc 1 1009 8 is_stmt 0 view .LVU624
 2046 093a 0528     		cmp	r0, #5
 2047 093c 00F06883 		beq	.L428
1012:TMCL.c        **** 				{
 2048              		.loc 1 1012 12 is_stmt 1 view .LVU625
1012:TMCL.c        **** 				{
 2049              		.loc 1 1012 15 is_stmt 0 view .LVU626
 2050 0940 0628     		cmp	r0, #6
 2051 0942 00F0D284 		beq	.L429
1015:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_3-(u32)&motorConfig,
 2052              		.loc 1 1015 12 is_stmt 1 view .LVU627
1015:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_3-(u32)&motorConfig,
 2053              		.loc 1 1015 15 is_stmt 0 view .LVU628
 2054 0946 0728     		cmp	r0, #7
 2055 0948 01F06780 		beq	.L430
1018:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_3-(u32)&motorConfig,
 2056              		.loc 1 1018 12 is_stmt 1 view .LVU629
1018:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_3-(u32)&motorConfig,
 2057              		.loc 1 1018 15 is_stmt 0 view .LVU630
 2058 094c 0828     		cmp	r0, #8
 2059 094e 7FF463AC 		bne	.L1
1019:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
 2060              		.loc 1 1019 6 is_stmt 1 view .LVU631
 2061              		.loc 1 1594 1 is_stmt 0 view .LVU632
 2062 0952 BDE83840 		pop	{r3, r4, r5, lr}
 2063              	.LCFI61:
 2064              		.cfi_remember_state
 2065              		.cfi_restore 14
 2066              		.cfi_restore 5
 2067              		.cfi_restore 4
 2068              		.cfi_restore 3
 2069              		.cfi_def_cfa_offset 0
1019:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
 2070              		.loc 1 1019 6 view .LVU633
 2071 0956 0122     		movs	r2, #1
 2072 0958 6F20     		movs	r0, #111
 2073              	.LVL138:
1019:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
 2074              		.loc 1 1019 6 view .LVU634
 2075 095a 5C49     		ldr	r1, .L526+44
 2076 095c FFF7FEBF 		b	eeprom_readConfigBlock
 2077              	.LVL139:
 2078              	.L58:
 2079              	.LCFI62:
 2080              		.cfi_restore_state
1100:TMCL.c        **** 				{
 2081              		.loc 1 1100 5 is_stmt 1 view .LVU635
1100:TMCL.c        **** 				{
 2082              		.loc 1 1100 8 is_stmt 0 view .LVU636
 2083 0960 0528     		cmp	r0, #5
 2084 0962 00F0C485 		beq	.L431
1104:TMCL.c        **** 				{
 2085              		.loc 1 1104 12 is_stmt 1 view .LVU637
1104:TMCL.c        **** 				{
 2086              		.loc 1 1104 15 is_stmt 0 view .LVU638
 2087 0966 0628     		cmp	r0, #6
 2088 0968 00F03184 		beq	.L432
1107:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumSpeed-(u32)&motorConfi
 2089              		.loc 1 1107 12 is_stmt 1 view .LVU639
1107:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumSpeed-(u32)&motorConfi
 2090              		.loc 1 1107 15 is_stmt 0 view .LVU640
 2091 096c 0728     		cmp	r0, #7
 2092 096e 00F05F87 		beq	.L433
1110:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumSpeed-(u32)&motorConfig
 2093              		.loc 1 1110 12 is_stmt 1 view .LVU641
1110:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maximumSpeed-(u32)&motorConfig
 2094              		.loc 1 1110 15 is_stmt 0 view .LVU642
 2095 0972 0828     		cmp	r0, #8
 2096 0974 7FF450AC 		bne	.L1
1111:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
 2097              		.loc 1 1111 6 is_stmt 1 view .LVU643
 2098              		.loc 1 1594 1 is_stmt 0 view .LVU644
 2099 0978 BDE83840 		pop	{r3, r4, r5, lr}
 2100              	.LCFI63:
 2101              		.cfi_remember_state
 2102              		.cfi_restore 14
 2103              		.cfi_restore 5
 2104              		.cfi_restore 4
 2105              		.cfi_restore 3
 2106              		.cfi_def_cfa_offset 0
1111:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
 2107              		.loc 1 1111 6 view .LVU645
 2108 097c 0222     		movs	r2, #2
 2109 097e 7620     		movs	r0, #118
 2110              	.LVL140:
1111:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
 2111              		.loc 1 1111 6 view .LVU646
 2112 0980 5349     		ldr	r1, .L526+48
 2113 0982 FFF7FEBF 		b	eeprom_readConfigBlock
 2114              	.LVL141:
 2115              	.L60:
 2116              	.LCFI64:
 2117              		.cfi_restore_state
1069:TMCL.c        **** 				{
 2118              		.loc 1 1069 5 is_stmt 1 view .LVU647
1069:TMCL.c        **** 				{
 2119              		.loc 1 1069 8 is_stmt 0 view .LVU648
 2120 0986 0528     		cmp	r0, #5
 2121 0988 00F00A83 		beq	.L434
1072:TMCL.c        **** 				{
 2122              		.loc 1 1072 12 is_stmt 1 view .LVU649
1072:TMCL.c        **** 				{
 2123              		.loc 1 1072 15 is_stmt 0 view .LVU650
 2124 098c 0628     		cmp	r0, #6
 2125 098e 00F0BF84 		beq	.L435
1075:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_7-(u32)&motorConfig,
 2126              		.loc 1 1075 12 is_stmt 1 view .LVU651
1075:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_7-(u32)&motorConfig,
 2127              		.loc 1 1075 15 is_stmt 0 view .LVU652
 2128 0992 0728     		cmp	r0, #7
 2129 0994 00F0CA87 		beq	.L436
1078:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_7-(u32)&motorConfig,
 2130              		.loc 1 1078 12 is_stmt 1 view .LVU653
1078:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_7-(u32)&motorConfig,
 2131              		.loc 1 1078 15 is_stmt 0 view .LVU654
 2132 0998 0828     		cmp	r0, #8
 2133 099a 7FF43DAC 		bne	.L1
1079:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
 2134              		.loc 1 1079 6 is_stmt 1 view .LVU655
 2135              		.loc 1 1594 1 is_stmt 0 view .LVU656
 2136 099e BDE83840 		pop	{r3, r4, r5, lr}
 2137              	.LCFI65:
 2138              		.cfi_remember_state
 2139              		.cfi_restore 14
 2140              		.cfi_restore 5
 2141              		.cfi_restore 4
 2142              		.cfi_restore 3
 2143              		.cfi_def_cfa_offset 0
1079:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
 2144              		.loc 1 1079 6 view .LVU657
 2145 09a2 0122     		movs	r2, #1
 2146 09a4 7320     		movs	r0, #115
 2147              	.LVL142:
1079:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
 2148              		.loc 1 1079 6 view .LVU658
 2149 09a6 4B49     		ldr	r1, .L526+52
 2150 09a8 FFF7FEBF 		b	eeprom_readConfigBlock
 2151              	.LVL143:
 2152              	.L61:
 2153              	.LCFI66:
 2154              		.cfi_restore_state
1054:TMCL.c        **** 				{
 2155              		.loc 1 1054 5 is_stmt 1 view .LVU659
1054:TMCL.c        **** 				{
 2156              		.loc 1 1054 8 is_stmt 0 view .LVU660
 2157 09ac 0528     		cmp	r0, #5
 2158 09ae 00F02A83 		beq	.L437
1057:TMCL.c        **** 				{
 2159              		.loc 1 1057 12 is_stmt 1 view .LVU661
1057:TMCL.c        **** 				{
 2160              		.loc 1 1057 15 is_stmt 0 view .LVU662
 2161 09b2 0628     		cmp	r0, #6
 2162 09b4 00F09484 		beq	.L438
1060:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_6-(u32)&motorConfig,
 2163              		.loc 1 1060 12 is_stmt 1 view .LVU663
1060:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_6-(u32)&motorConfig,
 2164              		.loc 1 1060 15 is_stmt 0 view .LVU664
 2165 09b8 0728     		cmp	r0, #7
 2166 09ba 00F0BE87 		beq	.L439
1063:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_6-(u32)&motorConfig,
 2167              		.loc 1 1063 12 is_stmt 1 view .LVU665
1063:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_6-(u32)&motorConfig,
 2168              		.loc 1 1063 15 is_stmt 0 view .LVU666
 2169 09be 0828     		cmp	r0, #8
 2170 09c0 7FF42AAC 		bne	.L1
1064:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
 2171              		.loc 1 1064 6 is_stmt 1 view .LVU667
 2172              		.loc 1 1594 1 is_stmt 0 view .LVU668
 2173 09c4 BDE83840 		pop	{r3, r4, r5, lr}
 2174              	.LCFI67:
 2175              		.cfi_remember_state
 2176              		.cfi_restore 14
 2177              		.cfi_restore 5
 2178              		.cfi_restore 4
 2179              		.cfi_restore 3
 2180              		.cfi_def_cfa_offset 0
1064:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
 2181              		.loc 1 1064 6 view .LVU669
 2182 09c8 0122     		movs	r2, #1
 2183 09ca 7220     		movs	r0, #114
 2184              	.LVL144:
1064:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
 2185              		.loc 1 1064 6 view .LVU670
 2186 09cc 4249     		ldr	r1, .L526+56
 2187 09ce FFF7FEBF 		b	eeprom_readConfigBlock
 2188              	.LVL145:
 2189              	.L66:
 2190              	.LCFI68:
 2191              		.cfi_restore_state
 979:TMCL.c        **** 				{
 2192              		.loc 1 979 5 is_stmt 1 view .LVU671
 979:TMCL.c        **** 				{
 2193              		.loc 1 979 8 is_stmt 0 view .LVU672
 2194 09d2 0528     		cmp	r0, #5
 2195 09d4 00F0F082 		beq	.L440
 982:TMCL.c        **** 				{
 2196              		.loc 1 982 12 is_stmt 1 view .LVU673
 982:TMCL.c        **** 				{
 2197              		.loc 1 982 15 is_stmt 0 view .LVU674
 2198 09d8 0628     		cmp	r0, #6
 2199 09da 00F0A684 		beq	.L441
 985:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_1-(u32)&motorConfig,
 2200              		.loc 1 985 12 is_stmt 1 view .LVU675
 985:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_1-(u32)&motorConfig,
 2201              		.loc 1 985 15 is_stmt 0 view .LVU676
 2202 09de 0728     		cmp	r0, #7
 2203 09e0 01F00D80 		beq	.L442
 988:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_1-(u32)&motorConfig,
 2204              		.loc 1 988 12 is_stmt 1 view .LVU677
 988:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_1-(u32)&motorConfig,
 2205              		.loc 1 988 15 is_stmt 0 view .LVU678
 2206 09e4 0828     		cmp	r0, #8
 2207 09e6 7FF417AC 		bne	.L1
 989:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 2208              		.loc 1 989 6 is_stmt 1 view .LVU679
 2209              		.loc 1 1594 1 is_stmt 0 view .LVU680
 2210 09ea BDE83840 		pop	{r3, r4, r5, lr}
 2211              	.LCFI69:
 2212              		.cfi_remember_state
 2213              		.cfi_restore 14
 2214              		.cfi_restore 5
 2215              		.cfi_restore 4
 2216              		.cfi_restore 3
 2217              		.cfi_def_cfa_offset 0
 989:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 2218              		.loc 1 989 6 view .LVU681
 2219 09ee 0122     		movs	r2, #1
 2220 09f0 6D20     		movs	r0, #109
 2221              	.LVL146:
 989:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 2222              		.loc 1 989 6 view .LVU682
 2223 09f2 3A49     		ldr	r1, .L526+60
 2224 09f4 FFF7FEBF 		b	eeprom_readConfigBlock
 2225              	.LVL147:
 2226              	.L68:
 2227              	.LCFI70:
 2228              		.cfi_restore_state
 949:TMCL.c        **** 				{
 2229              		.loc 1 949 5 is_stmt 1 view .LVU683
 949:TMCL.c        **** 				{
 2230              		.loc 1 949 8 is_stmt 0 view .LVU684
 2231 09f8 0528     		cmp	r0, #5
 2232 09fa 00F0D682 		beq	.L443
 952:TMCL.c        **** 				{
 2233              		.loc 1 952 12 is_stmt 1 view .LVU685
 952:TMCL.c        **** 				{
 2234              		.loc 1 952 15 is_stmt 0 view .LVU686
 2235 09fe 0628     		cmp	r0, #6
 2236 0a00 00F08B84 		beq	.L444
 955:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_8-(u32)&motorConfig,
 2237              		.loc 1 955 12 is_stmt 1 view .LVU687
 955:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_8-(u32)&motorConfig,
 2238              		.loc 1 955 15 is_stmt 0 view .LVU688
 2239 0a04 0728     		cmp	r0, #7
 2240 0a06 01F00180 		beq	.L445
 958:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_8-(u32)&motorConfig,
 2241              		.loc 1 958 12 is_stmt 1 view .LVU689
 958:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_8-(u32)&motorConfig,
 2242              		.loc 1 958 15 is_stmt 0 view .LVU690
 2243 0a0a 0828     		cmp	r0, #8
 2244 0a0c 7FF404AC 		bne	.L1
 959:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 2245              		.loc 1 959 6 is_stmt 1 view .LVU691
 2246              		.loc 1 1594 1 is_stmt 0 view .LVU692
 2247 0a10 BDE83840 		pop	{r3, r4, r5, lr}
 2248              	.LCFI71:
 2249              		.cfi_remember_state
 2250              		.cfi_restore 14
 2251              		.cfi_restore 5
 2252              		.cfi_restore 4
 2253              		.cfi_restore 3
 2254              		.cfi_def_cfa_offset 0
 959:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 2255              		.loc 1 959 6 view .LVU693
 2256 0a14 0222     		movs	r2, #2
 2257 0a16 6A20     		movs	r0, #106
 2258              	.LVL148:
 959:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 2259              		.loc 1 959 6 view .LVU694
 2260 0a18 3149     		ldr	r1, .L526+64
 2261 0a1a FFF7FEBF 		b	eeprom_readConfigBlock
 2262              	.LVL149:
 2263              	.L69:
 2264              	.LCFI72:
 2265              		.cfi_restore_state
 934:TMCL.c        **** 				{
 2266              		.loc 1 934 5 is_stmt 1 view .LVU695
 934:TMCL.c        **** 				{
 2267              		.loc 1 934 8 is_stmt 0 view .LVU696
 2268 0a1e 0528     		cmp	r0, #5
 2269 0a20 00F0E182 		beq	.L446
 937:TMCL.c        **** 				{
 2270              		.loc 1 937 12 is_stmt 1 view .LVU697
 937:TMCL.c        **** 				{
 2271              		.loc 1 937 15 is_stmt 0 view .LVU698
 2272 0a24 0628     		cmp	r0, #6
 2273 0a26 00F05384 		beq	.L447
 940:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_7-(u32)&motorConfig,
 2274              		.loc 1 940 12 is_stmt 1 view .LVU699
 940:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_7-(u32)&motorConfig,
 2275              		.loc 1 940 15 is_stmt 0 view .LVU700
 2276 0a2a 0728     		cmp	r0, #7
 2277 0a2c 00F0A887 		beq	.L448
 943:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_7-(u32)&motorConfig,
 2278              		.loc 1 943 12 is_stmt 1 view .LVU701
 943:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_7-(u32)&motorConfig,
 2279              		.loc 1 943 15 is_stmt 0 view .LVU702
 2280 0a30 0828     		cmp	r0, #8
 2281 0a32 7FF4F1AB 		bne	.L1
 944:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 2282              		.loc 1 944 6 is_stmt 1 view .LVU703
 2283              		.loc 1 1594 1 is_stmt 0 view .LVU704
 2284 0a36 BDE83840 		pop	{r3, r4, r5, lr}
 2285              	.LCFI73:
 2286              		.cfi_remember_state
 2287              		.cfi_restore 14
 2288              		.cfi_restore 5
 2289              		.cfi_restore 4
 2290              		.cfi_restore 3
 2291              		.cfi_def_cfa_offset 0
 944:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 2292              		.loc 1 944 6 view .LVU705
 2293 0a3a 0222     		movs	r2, #2
 2294 0a3c 6820     		movs	r0, #104
 2295              	.LVL150:
 944:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 2296              		.loc 1 944 6 view .LVU706
 2297 0a3e 2949     		ldr	r1, .L526+68
 2298 0a40 FFF7FEBF 		b	eeprom_readConfigBlock
 2299              	.LVL151:
 2300              	.L55:
 2301              	.LCFI74:
 2302              		.cfi_restore_state
1128:TMCL.c        **** 				{
 2303              		.loc 1 1128 5 is_stmt 1 view .LVU707
1128:TMCL.c        **** 				{
 2304              		.loc 1 1128 8 is_stmt 0 view .LVU708
 2305 0a44 0628     		cmp	r0, #6
 2306 0a46 7FF4E7AB 		bne	.L1
1130:TMCL.c        **** 				}
 2307              		.loc 1 1130 6 is_stmt 1 view .LVU709
1130:TMCL.c        **** 				}
 2308              		.loc 1 1130 32 is_stmt 0 view .LVU710
 2309 0a4a FFF7FEFF 		bl	sensor_actualTorqueLimit
 2310              	.LVL152:
1130:TMCL.c        **** 				}
 2311              		.loc 1 1130 30 view .LVU711
 2312 0a4e E060     		str	r0, [r4, #12]
 2313              		.loc 1 1594 1 view .LVU712
 2314 0a50 38BD     		pop	{r3, r4, r5, pc}
 2315              	.LVL153:
 2316              	.L65:
 994:TMCL.c        **** 				{
 2317              		.loc 1 994 5 is_stmt 1 view .LVU713
 994:TMCL.c        **** 				{
 2318              		.loc 1 994 8 is_stmt 0 view .LVU714
 2319 0a52 0528     		cmp	r0, #5
 2320 0a54 00F0C282 		beq	.L449
 997:TMCL.c        **** 				{
 2321              		.loc 1 997 12 is_stmt 1 view .LVU715
 997:TMCL.c        **** 				{
 2322              		.loc 1 997 15 is_stmt 0 view .LVU716
 2323 0a58 0628     		cmp	r0, #6
 2324 0a5a 00F03484 		beq	.L450
1000:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_2-(u32)&motorConfig,
 2325              		.loc 1 1000 12 is_stmt 1 view .LVU717
1000:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_2-(u32)&motorConfig,
 2326              		.loc 1 1000 15 is_stmt 0 view .LVU718
 2327 0a5e 0728     		cmp	r0, #7
 2328 0a60 00F07287 		beq	.L451
1003:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_2-(u32)&motorConfig,
 2329              		.loc 1 1003 12 is_stmt 1 view .LVU719
1003:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_2-(u32)&motorConfig,
 2330              		.loc 1 1003 15 is_stmt 0 view .LVU720
 2331 0a64 0828     		cmp	r0, #8
 2332 0a66 7FF4D7AB 		bne	.L1
1004:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
 2333              		.loc 1 1004 6 is_stmt 1 view .LVU721
 2334              		.loc 1 1594 1 is_stmt 0 view .LVU722
 2335 0a6a BDE83840 		pop	{r3, r4, r5, lr}
 2336              	.LCFI75:
 2337              		.cfi_remember_state
 2338              		.cfi_restore 14
 2339              		.cfi_restore 5
 2340              		.cfi_restore 4
 2341              		.cfi_restore 3
 2342              		.cfi_def_cfa_offset 0
1004:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
 2343              		.loc 1 1004 6 view .LVU723
 2344 0a6e 0122     		movs	r2, #1
 2345 0a70 6E20     		movs	r0, #110
 2346              	.LVL154:
1004:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
 2347              		.loc 1 1004 6 view .LVU724
 2348 0a72 1D49     		ldr	r1, .L526+72
 2349 0a74 FFF7FEBF 		b	eeprom_readConfigBlock
 2350              	.LVL155:
 2351              	.L67:
 2352              	.LCFI76:
 2353              		.cfi_restore_state
 964:TMCL.c        **** 				{
 2354              		.loc 1 964 5 is_stmt 1 view .LVU725
 964:TMCL.c        **** 				{
 2355              		.loc 1 964 8 is_stmt 0 view .LVU726
 2356 0a78 0528     		cmp	r0, #5
 2357 0a7a 00F0BB82 		beq	.L452
 967:TMCL.c        **** 				{
 2358              		.loc 1 967 12 is_stmt 1 view .LVU727
 967:TMCL.c        **** 				{
 2359              		.loc 1 967 15 is_stmt 0 view .LVU728
 2360 0a7e 0628     		cmp	r0, #6
 2361 0a80 00F03884 		beq	.L453
 970:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_0-(u32)&motorConfig,
 2362              		.loc 1 970 12 is_stmt 1 view .LVU729
 970:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_0-(u32)&motorConfig,
 2363              		.loc 1 970 15 is_stmt 0 view .LVU730
 2364 0a84 0728     		cmp	r0, #7
 2365 0a86 00F0CF87 		beq	.L454
 973:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_0-(u32)&motorConfig,
 2366              		.loc 1 973 12 is_stmt 1 view .LVU731
 973:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_0-(u32)&motorConfig,
 2367              		.loc 1 973 15 is_stmt 0 view .LVU732
 2368 0a8a 0828     		cmp	r0, #8
 2369 0a8c 7FF4C4AB 		bne	.L1
 974:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 2370              		.loc 1 974 6 is_stmt 1 view .LVU733
 2371              		.loc 1 1594 1 is_stmt 0 view .LVU734
 2372 0a90 BDE83840 		pop	{r3, r4, r5, lr}
 2373              	.LCFI77:
 2374              		.cfi_remember_state
 2375              		.cfi_restore 14
 2376              		.cfi_restore 5
 2377              		.cfi_restore 4
 2378              		.cfi_restore 3
 2379              		.cfi_def_cfa_offset 0
 974:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 2380              		.loc 1 974 6 view .LVU735
 2381 0a94 0122     		movs	r2, #1
 2382 0a96 6C20     		movs	r0, #108
 2383              	.LVL156:
 974:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 2384              		.loc 1 974 6 view .LVU736
 2385 0a98 1449     		ldr	r1, .L526+76
 2386 0a9a FFF7FEBF 		b	eeprom_readConfigBlock
 2387              	.LVL157:
 2388              	.L527:
 2389 0a9e 00BF     		.align	2
 2390              	.L526:
 2391 0aa0 06000000 		.word	motorConfig+6
 2392 0aa4 04000000 		.word	motorConfig+4
 2393 0aa8 02000000 		.word	motorConfig+2
 2394 0aac 7B000000 		.word	motorConfig+123
 2395 0ab0 5C000000 		.word	motorConfig+92
 2396 0ab4 26000000 		.word	motorConfig+38
 2397 0ab8 22000000 		.word	motorConfig+34
 2398 0abc 20000000 		.word	motorConfig+32
 2399 0ac0 8A000000 		.word	motorConfig+138
 2400 0ac4 31000000 		.word	motorConfig+49
 2401 0ac8 30000000 		.word	motorConfig+48
 2402 0acc 2F000000 		.word	motorConfig+47
 2403 0ad0 36000000 		.word	motorConfig+54
 2404 0ad4 33000000 		.word	motorConfig+51
 2405 0ad8 32000000 		.word	motorConfig+50
 2406 0adc 2D000000 		.word	motorConfig+45
 2407 0ae0 2A000000 		.word	motorConfig+42
 2408 0ae4 28000000 		.word	motorConfig+40
 2409 0ae8 2E000000 		.word	motorConfig+46
 2410 0aec 2C000000 		.word	motorConfig+44
 2411              	.LVL158:
 2412              	.L59:
 2413              	.LCFI78:
 2414              		.cfi_restore_state
1084:TMCL.c        **** 				{
 2415              		.loc 1 1084 5 is_stmt 1 view .LVU737
1084:TMCL.c        **** 				{
 2416              		.loc 1 1084 8 is_stmt 0 view .LVU738
 2417 0af0 0528     		cmp	r0, #5
 2418 0af2 00F00183 		beq	.L455
1087:TMCL.c        **** 				{
 2419              		.loc 1 1087 12 is_stmt 1 view .LVU739
1087:TMCL.c        **** 				{
 2420              		.loc 1 1087 15 is_stmt 0 view .LVU740
 2421 0af6 0628     		cmp	r0, #6
 2422 0af8 00F0D083 		beq	.L456
1090:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_8-(u32)&motorConfig,
 2423              		.loc 1 1090 12 is_stmt 1 view .LVU741
1090:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_8-(u32)&motorConfig,
 2424              		.loc 1 1090 15 is_stmt 0 view .LVU742
 2425 0afc 0728     		cmp	r0, #7
 2426 0afe 00F00087 		beq	.L457
1093:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_8-(u32)&motorConfig,
 2427              		.loc 1 1093 12 is_stmt 1 view .LVU743
1093:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.torque_8-(u32)&motorConfig,
 2428              		.loc 1 1093 15 is_stmt 0 view .LVU744
 2429 0b02 0828     		cmp	r0, #8
 2430 0b04 7FF488AB 		bne	.L1
1094:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
 2431              		.loc 1 1094 6 is_stmt 1 view .LVU745
 2432              		.loc 1 1594 1 is_stmt 0 view .LVU746
 2433 0b08 BDE83840 		pop	{r3, r4, r5, lr}
 2434              	.LCFI79:
 2435              		.cfi_remember_state
 2436              		.cfi_restore 14
 2437              		.cfi_restore 5
 2438              		.cfi_restore 4
 2439              		.cfi_restore 3
 2440              		.cfi_def_cfa_offset 0
1094:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
 2441              		.loc 1 1094 6 view .LVU747
 2442 0b0c 0122     		movs	r2, #1
 2443 0b0e 7420     		movs	r0, #116
 2444              	.LVL159:
1094:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
 2445              		.loc 1 1094 6 view .LVU748
 2446 0b10 C449     		ldr	r1, .L528
 2447 0b12 FFF7FEBF 		b	eeprom_readConfigBlock
 2448              	.LVL160:
 2449              	.L78:
 2450              	.LCFI80:
 2451              		.cfi_restore_state
 798:TMCL.c        **** 				{
 2452              		.loc 1 798 5 is_stmt 1 view .LVU749
 798:TMCL.c        **** 				{
 2453              		.loc 1 798 8 is_stmt 0 view .LVU750
 2454 0b16 0528     		cmp	r0, #5
 2455 0b18 00F07182 		beq	.L458
 801:TMCL.c        **** 				{
 2456              		.loc 1 801 12 is_stmt 1 view .LVU751
 801:TMCL.c        **** 				{
 2457              		.loc 1 801 15 is_stmt 0 view .LVU752
 2458 0b1c 0628     		cmp	r0, #6
 2459 0b1e 00F0EE83 		beq	.L459
 804:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.positiveMotoringRampTime-(u32
 2460              		.loc 1 804 12 is_stmt 1 view .LVU753
 804:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.positiveMotoringRampTime-(u32
 2461              		.loc 1 804 15 is_stmt 0 view .LVU754
 2462 0b22 0728     		cmp	r0, #7
 2463 0b24 00F05687 		beq	.L460
 807:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.positiveMotoringRampTime-(u32)
 2464              		.loc 1 807 12 is_stmt 1 view .LVU755
 807:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.positiveMotoringRampTime-(u32)
 2465              		.loc 1 807 15 is_stmt 0 view .LVU756
 2466 0b28 0828     		cmp	r0, #8
 2467 0b2a 7FF475AB 		bne	.L1
 808:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 2468              		.loc 1 808 6 is_stmt 1 view .LVU757
 2469              		.loc 1 1594 1 is_stmt 0 view .LVU758
 2470 0b2e BDE83840 		pop	{r3, r4, r5, lr}
 2471              	.LCFI81:
 2472              		.cfi_remember_state
 2473              		.cfi_restore 14
 2474              		.cfi_restore 5
 2475              		.cfi_restore 4
 2476              		.cfi_restore 3
 2477              		.cfi_def_cfa_offset 0
 808:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 2478              		.loc 1 808 6 view .LVU759
 2479 0b32 0222     		movs	r2, #2
 2480 0b34 5620     		movs	r0, #86
 2481              	.LVL161:
 808:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 2482              		.loc 1 808 6 view .LVU760
 2483 0b36 BC49     		ldr	r1, .L528+4
 2484 0b38 FFF7FEBF 		b	eeprom_readConfigBlock
 2485              	.LVL162:
 2486              	.L80:
 2487              	.LCFI82:
 2488              		.cfi_restore_state
 783:TMCL.c        **** 				{
 2489              		.loc 1 783 5 is_stmt 1 view .LVU761
 783:TMCL.c        **** 				{
 2490              		.loc 1 783 8 is_stmt 0 view .LVU762
 2491 0b3c 0628     		cmp	r0, #6
 2492 0b3e 7FF46BAB 		bne	.L1
 785:TMCL.c        **** 				}
 2493              		.loc 1 785 6 is_stmt 1 view .LVU763
 785:TMCL.c        **** 				}
 2494              		.loc 1 785 32 is_stmt 0 view .LVU764
 2495 0b42 FFF7FEFF 		bl	sensor_pedalMotorEnable
 2496              	.LVL163:
 785:TMCL.c        **** 				}
 2497              		.loc 1 785 32 view .LVU765
 2498 0b46 E060     		str	r0, [r4, #12]
 2499              		.loc 1 1594 1 view .LVU766
 2500 0b48 38BD     		pop	{r3, r4, r5, pc}
 2501              	.LVL164:
 2502              	.L81:
 777:TMCL.c        **** 				{
 2503              		.loc 1 777 5 is_stmt 1 view .LVU767
 777:TMCL.c        **** 				{
 2504              		.loc 1 777 8 is_stmt 0 view .LVU768
 2505 0b4a 0628     		cmp	r0, #6
 2506 0b4c 7FF464AB 		bne	.L1
 779:TMCL.c        **** 				}
 2507              		.loc 1 779 6 is_stmt 1 view .LVU769
 779:TMCL.c        **** 				}
 2508              		.loc 1 779 32 is_stmt 0 view .LVU770
 2509 0b50 FFF7FEFF 		bl	sensor_pedalDirection
 2510              	.LVL165:
 779:TMCL.c        **** 				}
 2511              		.loc 1 779 32 view .LVU771
 2512 0b54 E060     		str	r0, [r4, #12]
 2513              		.loc 1 1594 1 view .LVU772
 2514 0b56 38BD     		pop	{r3, r4, r5, pc}
 2515              	.LVL166:
 2516              	.L94:
 577:TMCL.c        **** 					if (!bldc_setMaxVelocity(ActualCommand.Value.Int32))
 2517              		.loc 1 577 5 is_stmt 1 view .LVU773
 577:TMCL.c        **** 					if (!bldc_setMaxVelocity(ActualCommand.Value.Int32))
 2518              		.loc 1 577 8 is_stmt 0 view .LVU774
 2519 0b58 0528     		cmp	r0, #5
 2520 0b5a 00F04985 		beq	.L461
 580:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maxPositioningSpeed;
 2521              		.loc 1 580 12 is_stmt 1 view .LVU775
 580:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.maxPositioningSpeed;
 2522              		.loc 1 580 15 is_stmt 0 view .LVU776
 2523 0b5e 0628     		cmp	r0, #6
 2524 0b60 00F01983 		beq	.L462
 582:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxPositioningSpeed-(u32)&mot
 2525              		.loc 1 582 12 is_stmt 1 view .LVU777
 582:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxPositioningSpeed-(u32)&mot
 2526              		.loc 1 582 15 is_stmt 0 view .LVU778
 2527 0b64 0728     		cmp	r0, #7
 2528 0b66 00F05586 		beq	.L463
 585:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxPositioningSpeed-(u32)&moto
 2529              		.loc 1 585 12 is_stmt 1 view .LVU779
 585:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.maxPositioningSpeed-(u32)&moto
 2530              		.loc 1 585 15 is_stmt 0 view .LVU780
 2531 0b6a 0828     		cmp	r0, #8
 2532 0b6c 7FF454AB 		bne	.L1
 586:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 2533              		.loc 1 586 6 is_stmt 1 view .LVU781
 2534              		.loc 1 1594 1 is_stmt 0 view .LVU782
 2535 0b70 BDE83840 		pop	{r3, r4, r5, lr}
 2536              	.LCFI83:
 2537              		.cfi_remember_state
 2538              		.cfi_restore 14
 2539              		.cfi_restore 5
 2540              		.cfi_restore 4
 2541              		.cfi_restore 3
 2542              		.cfi_def_cfa_offset 0
 586:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 2543              		.loc 1 586 6 view .LVU783
 2544 0b74 0422     		movs	r2, #4
 2545 0b76 9820     		movs	r0, #152
 2546              	.LVL167:
 586:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 2547              		.loc 1 586 6 view .LVU784
 2548 0b78 AC49     		ldr	r1, .L528+8
 2549 0b7a FFF7FEBF 		b	eeprom_readConfigBlock
 2550              	.LVL168:
 2551              	.L95:
 2552              	.LCFI84:
 2553              		.cfi_restore_state
 572:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getActualVelocity();
 2554              		.loc 1 572 5 is_stmt 1 view .LVU785
 572:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getActualVelocity();
 2555              		.loc 1 572 8 is_stmt 0 view .LVU786
 2556 0b7e 0628     		cmp	r0, #6
 2557 0b80 7FF44AAB 		bne	.L1
 573:TMCL.c        **** 				}
 2558              		.loc 1 573 6 is_stmt 1 view .LVU787
 573:TMCL.c        **** 				}
 2559              		.loc 1 573 32 is_stmt 0 view .LVU788
 2560 0b84 FFF7FEFF 		bl	bldc_getActualVelocity
 2561              	.LVL169:
 573:TMCL.c        **** 				}
 2562              		.loc 1 573 30 view .LVU789
 2563 0b88 E060     		str	r0, [r4, #12]
 2564              		.loc 1 1594 1 view .LVU790
 2565 0b8a 38BD     		pop	{r3, r4, r5, pc}
 2566              	.LVL170:
 2567              	.L96:
 567:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getRampGeneratorVelocity();
 2568              		.loc 1 567 5 is_stmt 1 view .LVU791
 567:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getRampGeneratorVelocity();
 2569              		.loc 1 567 8 is_stmt 0 view .LVU792
 2570 0b8c 0628     		cmp	r0, #6
 2571 0b8e 7FF443AB 		bne	.L1
 568:TMCL.c        **** 				}
 2572              		.loc 1 568 6 is_stmt 1 view .LVU793
 568:TMCL.c        **** 				}
 2573              		.loc 1 568 32 is_stmt 0 view .LVU794
 2574 0b92 FFF7FEFF 		bl	bldc_getRampGeneratorVelocity
 2575              	.LVL171:
 568:TMCL.c        **** 				}
 2576              		.loc 1 568 30 view .LVU795
 2577 0b96 E060     		str	r0, [r4, #12]
 2578              		.loc 1 1594 1 view .LVU796
 2579 0b98 38BD     		pop	{r3, r4, r5, pc}
 2580              	.LVL172:
 2581              	.L97:
 556:TMCL.c        **** 				{
 2582              		.loc 1 556 5 is_stmt 1 view .LVU797
 556:TMCL.c        **** 				{
 2583              		.loc 1 556 8 is_stmt 0 view .LVU798
 2584 0b9a 0528     		cmp	r0, #5
 2585 0b9c 00F0EF81 		beq	.L464
 562:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getTargetVelocity();
 2586              		.loc 1 562 12 is_stmt 1 view .LVU799
 562:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getTargetVelocity();
 2587              		.loc 1 562 15 is_stmt 0 view .LVU800
 2588 0ba0 0628     		cmp	r0, #6
 2589 0ba2 7FF439AB 		bne	.L1
 563:TMCL.c        **** 				}
 2590              		.loc 1 563 6 is_stmt 1 view .LVU801
 563:TMCL.c        **** 				}
 2591              		.loc 1 563 32 is_stmt 0 view .LVU802
 2592 0ba6 FFF7FEFF 		bl	bldc_getTargetVelocity
 2593              	.LVL173:
 563:TMCL.c        **** 				}
 2594              		.loc 1 563 30 view .LVU803
 2595 0baa E060     		str	r0, [r4, #12]
 2596              		.loc 1 1594 1 view .LVU804
 2597 0bac 38BD     		pop	{r3, r4, r5, pc}
 2598              	.LVL174:
 2599              	.L74:
 859:TMCL.c        **** 				{
 2600              		.loc 1 859 5 is_stmt 1 view .LVU805
 859:TMCL.c        **** 				{
 2601              		.loc 1 859 8 is_stmt 0 view .LVU806
 2602 0bae 0528     		cmp	r0, #5
 2603 0bb0 00F0AB82 		beq	.L465
 862:TMCL.c        **** 				{
 2604              		.loc 1 862 12 is_stmt 1 view .LVU807
 862:TMCL.c        **** 				{
 2605              		.loc 1 862 15 is_stmt 0 view .LVU808
 2606 0bb4 0628     		cmp	r0, #6
 2607 0bb6 00F0E783 		beq	.L466
 865:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_2-(u32)&motorConfig,
 2608              		.loc 1 865 12 is_stmt 1 view .LVU809
 865:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_2-(u32)&motorConfig,
 2609              		.loc 1 865 15 is_stmt 0 view .LVU810
 2610 0bba 0728     		cmp	r0, #7
 2611 0bbc 00F06286 		beq	.L467
 868:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_2-(u32)&motorConfig,
 2612              		.loc 1 868 12 is_stmt 1 view .LVU811
 868:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_2-(u32)&motorConfig,
 2613              		.loc 1 868 15 is_stmt 0 view .LVU812
 2614 0bc0 0828     		cmp	r0, #8
 2615 0bc2 7FF429AB 		bne	.L1
 869:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 2616              		.loc 1 869 6 is_stmt 1 view .LVU813
 2617              		.loc 1 1594 1 is_stmt 0 view .LVU814
 2618 0bc6 BDE83840 		pop	{r3, r4, r5, lr}
 2619              	.LCFI85:
 2620              		.cfi_remember_state
 2621              		.cfi_restore 14
 2622              		.cfi_restore 5
 2623              		.cfi_restore 4
 2624              		.cfi_restore 3
 2625              		.cfi_def_cfa_offset 0
 869:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 2626              		.loc 1 869 6 view .LVU815
 2627 0bca 0222     		movs	r2, #2
 2628 0bcc 5E20     		movs	r0, #94
 2629              	.LVL175:
 869:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 2630              		.loc 1 869 6 view .LVU816
 2631 0bce 9849     		ldr	r1, .L528+12
 2632 0bd0 FFF7FEBF 		b	eeprom_readConfigBlock
 2633              	.LVL176:
 2634              	.L110:
 2635              	.LCFI86:
 2636              		.cfi_restore_state
 394:TMCL.c        **** 					if (!bldc_setDualShuntFactor(ActualCommand.Value.Int32))
 2637              		.loc 1 394 5 is_stmt 1 view .LVU817
 394:TMCL.c        **** 					if (!bldc_setDualShuntFactor(ActualCommand.Value.Int32))
 2638              		.loc 1 394 8 is_stmt 0 view .LVU818
 2639 0bd4 0528     		cmp	r0, #5
 2640 0bd6 00F0B984 		beq	.L468
 397:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getDualShuntFactor();
 2641              		.loc 1 397 12 is_stmt 1 view .LVU819
 397:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getDualShuntFactor();
 2642              		.loc 1 397 15 is_stmt 0 view .LVU820
 2643 0bda 0628     		cmp	r0, #6
 2644 0bdc 00F07D85 		beq	.L469
 400:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.dualShuntFactor-(u32)&motorCo
 2645              		.loc 1 400 10 is_stmt 1 view .LVU821
 400:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.dualShuntFactor-(u32)&motorCo
 2646              		.loc 1 400 13 is_stmt 0 view .LVU822
 2647 0be0 0728     		cmp	r0, #7
 2648 0be2 00F09485 		beq	.L470
 403:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.dualShuntFactor-(u32)&motorCon
 2649              		.loc 1 403 12 is_stmt 1 view .LVU823
 403:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.dualShuntFactor-(u32)&motorCon
 2650              		.loc 1 403 15 is_stmt 0 view .LVU824
 2651 0be6 0828     		cmp	r0, #8
 2652 0be8 7FF416AB 		bne	.L1
 404:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 2653              		.loc 1 404 6 is_stmt 1 view .LVU825
 2654              		.loc 1 1594 1 is_stmt 0 view .LVU826
 2655 0bec BDE83840 		pop	{r3, r4, r5, lr}
 2656              	.LCFI87:
 2657              		.cfi_remember_state
 2658              		.cfi_restore 14
 2659              		.cfi_restore 5
 2660              		.cfi_restore 4
 2661              		.cfi_restore 3
 2662              		.cfi_def_cfa_offset 0
 404:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 2663              		.loc 1 404 6 view .LVU827
 2664 0bf0 0222     		movs	r2, #2
 2665 0bf2 A820     		movs	r0, #168
 2666              	.LVL177:
 404:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 2667              		.loc 1 404 6 view .LVU828
 2668 0bf4 8F49     		ldr	r1, .L528+16
 2669 0bf6 FFF7FEBF 		b	eeprom_readConfigBlock
 2670              	.LVL178:
 2671              	.L112:
 2672              	.LCFI88:
 2673              		.cfi_restore_state
 386:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IWY_IUX, TMC4671
 2674              		.loc 1 386 5 is_stmt 1 view .LVU829
 386:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IWY_IUX, TMC4671
 2675              		.loc 1 386 8 is_stmt 0 view .LVU830
 2676 0bfa 0628     		cmp	r0, #6
 2677 0bfc 7FF40CAB 		bne	.L1
 387:TMCL.c        **** 				break;
 2678              		.loc 1 387 6 is_stmt 1 view .LVU831
 387:TMCL.c        **** 				break;
 2679              		.loc 1 387 41 is_stmt 0 view .LVU832
 2680 0c00 1221     		movs	r1, #18
 2681 0c02 0020     		movs	r0, #0
 2682              	.LVL179:
 387:TMCL.c        **** 				break;
 2683              		.loc 1 387 41 view .LVU833
 2684 0c04 FFF7FEFF 		bl	tmc4671_readInt
 2685              	.LVL180:
 387:TMCL.c        **** 				break;
 2686              		.loc 1 387 32 view .LVU834
 2687 0c08 0014     		asrs	r0, r0, #16
 2688 0c0a E060     		str	r0, [r4, #12]
 2689              		.loc 1 1594 1 view .LVU835
 2690 0c0c 38BD     		pop	{r3, r4, r5, pc}
 2691              	.LVL181:
 2692              	.L113:
 382:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IV, TMC4671_ADC_
 2693              		.loc 1 382 5 is_stmt 1 view .LVU836
 382:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IV, TMC4671_ADC_
 2694              		.loc 1 382 8 is_stmt 0 view .LVU837
 2695 0c0e 0628     		cmp	r0, #6
 2696 0c10 7FF402AB 		bne	.L1
 383:TMCL.c        **** 				break;
 2697              		.loc 1 383 6 is_stmt 1 view .LVU838
 383:TMCL.c        **** 				break;
 2698              		.loc 1 383 41 is_stmt 0 view .LVU839
 2699 0c14 1321     		movs	r1, #19
 2700 0c16 0020     		movs	r0, #0
 2701              	.LVL182:
 383:TMCL.c        **** 				break;
 2702              		.loc 1 383 41 view .LVU840
 2703 0c18 FFF7FEFF 		bl	tmc4671_readInt
 2704              	.LVL183:
 383:TMCL.c        **** 				break;
 2705              		.loc 1 383 32 view .LVU841
 2706 0c1c 00B2     		sxth	r0, r0
 2707 0c1e E060     		str	r0, [r4, #12]
 2708              		.loc 1 1594 1 view .LVU842
 2709 0c20 38BD     		pop	{r3, r4, r5, pc}
 2710              	.LVL184:
 2711              	.L82:
 761:TMCL.c        **** 				{
 2712              		.loc 1 761 5 is_stmt 1 view .LVU843
 761:TMCL.c        **** 				{
 2713              		.loc 1 761 8 is_stmt 0 view .LVU844
 2714 0c22 0528     		cmp	r0, #5
 2715 0c24 00F04D82 		beq	.L471
 764:TMCL.c        **** 				{
 2716              		.loc 1 764 12 is_stmt 1 view .LVU845
 764:TMCL.c        **** 				{
 2717              		.loc 1 764 15 is_stmt 0 view .LVU846
 2718 0c28 0628     		cmp	r0, #6
 2719 0c2a 00F02683 		beq	.L472
 767:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.averageSportMode-(u32)&motorC
 2720              		.loc 1 767 12 is_stmt 1 view .LVU847
 767:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.averageSportMode-(u32)&motorC
 2721              		.loc 1 767 15 is_stmt 0 view .LVU848
 2722 0c2e 0728     		cmp	r0, #7
 2723 0c30 00F06086 		beq	.L473
 770:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.averageSportMode-(u32)&motorCo
 2724              		.loc 1 770 12 is_stmt 1 view .LVU849
 770:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.averageSportMode-(u32)&motorCo
 2725              		.loc 1 770 15 is_stmt 0 view .LVU850
 2726 0c34 0828     		cmp	r0, #8
 2727 0c36 7FF4EFAA 		bne	.L1
 771:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 2728              		.loc 1 771 6 is_stmt 1 view .LVU851
 2729              		.loc 1 1594 1 is_stmt 0 view .LVU852
 2730 0c3a BDE83840 		pop	{r3, r4, r5, lr}
 2731              	.LCFI89:
 2732              		.cfi_remember_state
 2733              		.cfi_restore 14
 2734              		.cfi_restore 5
 2735              		.cfi_restore 4
 2736              		.cfi_restore 3
 2737              		.cfi_def_cfa_offset 0
 771:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 2738              		.loc 1 771 6 view .LVU853
 2739 0c3e 0122     		movs	r2, #1
 2740 0c40 5520     		movs	r0, #85
 2741              	.LVL185:
 771:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 2742              		.loc 1 771 6 view .LVU854
 2743 0c42 7D49     		ldr	r1, .L528+20
 2744 0c44 FFF7FEBF 		b	eeprom_readConfigBlock
 2745              	.LVL186:
 2746              	.L83:
 2747              	.LCFI90:
 2748              		.cfi_restore_state
 746:TMCL.c        **** 				{
 2749              		.loc 1 746 5 is_stmt 1 view .LVU855
 746:TMCL.c        **** 				{
 2750              		.loc 1 746 8 is_stmt 0 view .LVU856
 2751 0c48 0528     		cmp	r0, #5
 2752 0c4a 00F0ED81 		beq	.L474
 749:TMCL.c        **** 				{
 2753              		.loc 1 749 12 is_stmt 1 view .LVU857
 749:TMCL.c        **** 				{
 2754              		.loc 1 749 15 is_stmt 0 view .LVU858
 2755 0c4e 0628     		cmp	r0, #6
 2756 0c50 00F03583 		beq	.L475
 752:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.leftRightRatio-(u32)&motorCon
 2757              		.loc 1 752 12 is_stmt 1 view .LVU859
 752:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.leftRightRatio-(u32)&motorCon
 2758              		.loc 1 752 15 is_stmt 0 view .LVU860
 2759 0c54 0728     		cmp	r0, #7
 2760 0c56 00F07E86 		beq	.L476
 755:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.leftRightRatio-(u32)&motorConf
 2761              		.loc 1 755 12 is_stmt 1 view .LVU861
 755:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.leftRightRatio-(u32)&motorConf
 2762              		.loc 1 755 15 is_stmt 0 view .LVU862
 2763 0c5a 0828     		cmp	r0, #8
 2764 0c5c 7FF4DCAA 		bne	.L1
 756:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 2765              		.loc 1 756 6 is_stmt 1 view .LVU863
 2766              		.loc 1 1594 1 is_stmt 0 view .LVU864
 2767 0c60 BDE83840 		pop	{r3, r4, r5, lr}
 2768              	.LCFI91:
 2769              		.cfi_remember_state
 2770              		.cfi_restore 14
 2771              		.cfi_restore 5
 2772              		.cfi_restore 4
 2773              		.cfi_restore 3
 2774              		.cfi_def_cfa_offset 0
 756:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 2775              		.loc 1 756 6 view .LVU865
 2776 0c64 0122     		movs	r2, #1
 2777 0c66 5420     		movs	r0, #84
 2778              	.LVL187:
 756:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 2779              		.loc 1 756 6 view .LVU866
 2780 0c68 7449     		ldr	r1, .L528+24
 2781 0c6a FFF7FEBF 		b	eeprom_readConfigBlock
 2782              	.LVL188:
 2783              	.L84:
 2784              	.LCFI92:
 2785              		.cfi_restore_state
 731:TMCL.c        **** 				{
 2786              		.loc 1 731 5 is_stmt 1 view .LVU867
 731:TMCL.c        **** 				{
 2787              		.loc 1 731 8 is_stmt 0 view .LVU868
 2788 0c6e 0528     		cmp	r0, #5
 2789 0c70 00F0D381 		beq	.L477
 734:TMCL.c        **** 				{
 2790              		.loc 1 734 12 is_stmt 1 view .LVU869
 734:TMCL.c        **** 				{
 2791              		.loc 1 734 15 is_stmt 0 view .LVU870
 2792 0c74 0628     		cmp	r0, #6
 2793 0c76 00F01A83 		beq	.L478
 737:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorqueSpeed-(u32)
 2794              		.loc 1 737 12 is_stmt 1 view .LVU871
 737:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorqueSpeed-(u32)
 2795              		.loc 1 737 15 is_stmt 0 view .LVU872
 2796 0c7a 0728     		cmp	r0, #7
 2797 0c7c 00F07286 		beq	.L479
 740:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorqueSpeed-(u32)&
 2798              		.loc 1 740 12 is_stmt 1 view .LVU873
 740:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorqueSpeed-(u32)&
 2799              		.loc 1 740 15 is_stmt 0 view .LVU874
 2800 0c80 0828     		cmp	r0, #8
 2801 0c82 7FF4C9AA 		bne	.L1
 741:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 2802              		.loc 1 741 6 is_stmt 1 view .LVU875
 2803              		.loc 1 1594 1 is_stmt 0 view .LVU876
 2804 0c86 BDE83840 		pop	{r3, r4, r5, lr}
 2805              	.LCFI93:
 2806              		.cfi_remember_state
 2807              		.cfi_restore 14
 2808              		.cfi_restore 5
 2809              		.cfi_restore 4
 2810              		.cfi_restore 3
 2811              		.cfi_def_cfa_offset 0
 741:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 2812              		.loc 1 741 6 view .LVU877
 2813 0c8a 0422     		movs	r2, #4
 2814 0c8c 5020     		movs	r0, #80
 2815              	.LVL189:
 741:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 2816              		.loc 1 741 6 view .LVU878
 2817 0c8e 6C49     		ldr	r1, .L528+28
 2818 0c90 FFF7FEBF 		b	eeprom_readConfigBlock
 2819              	.LVL190:
 2820              	.L85:
 2821              	.LCFI94:
 2822              		.cfi_restore_state
 716:TMCL.c        **** 				{
 2823              		.loc 1 716 5 is_stmt 1 view .LVU879
 716:TMCL.c        **** 				{
 2824              		.loc 1 716 8 is_stmt 0 view .LVU880
 2825 0c94 0528     		cmp	r0, #5
 2826 0c96 00F03482 		beq	.L480
 719:TMCL.c        **** 				{
 2827              		.loc 1 719 12 is_stmt 1 view .LVU881
 719:TMCL.c        **** 				{
 2828              		.loc 1 719 15 is_stmt 0 view .LVU882
 2829 0c9a 0628     		cmp	r0, #6
 2830 0c9c 00F00383 		beq	.L481
 722:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorque-(u32)&moto
 2831              		.loc 1 722 12 is_stmt 1 view .LVU883
 722:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorque-(u32)&moto
 2832              		.loc 1 722 15 is_stmt 0 view .LVU884
 2833 0ca0 0728     		cmp	r0, #7
 2834 0ca2 00F0FD85 		beq	.L482
 725:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorque-(u32)&motor
 2835              		.loc 1 725 12 is_stmt 1 view .LVU885
 725:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.initialRightTorque-(u32)&motor
 2836              		.loc 1 725 15 is_stmt 0 view .LVU886
 2837 0ca6 0828     		cmp	r0, #8
 2838 0ca8 7FF4B6AA 		bne	.L1
 726:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 2839              		.loc 1 726 6 is_stmt 1 view .LVU887
 2840              		.loc 1 1594 1 is_stmt 0 view .LVU888
 2841 0cac BDE83840 		pop	{r3, r4, r5, lr}
 2842              	.LCFI95:
 2843              		.cfi_remember_state
 2844              		.cfi_restore 14
 2845              		.cfi_restore 5
 2846              		.cfi_restore 4
 2847              		.cfi_restore 3
 2848              		.cfi_def_cfa_offset 0
 726:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 2849              		.loc 1 726 6 view .LVU889
 2850 0cb0 0422     		movs	r2, #4
 2851 0cb2 4C20     		movs	r0, #76
 2852              	.LVL191:
 726:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 2853              		.loc 1 726 6 view .LVU890
 2854 0cb4 6349     		ldr	r1, .L528+32
 2855 0cb6 FFF7FEBF 		b	eeprom_readConfigBlock
 2856              	.LVL192:
 2857              	.L91:
 2858              	.LCFI96:
 2859              		.cfi_restore_state
 622:TMCL.c        **** 				{
 2860              		.loc 1 622 5 is_stmt 1 view .LVU891
 622:TMCL.c        **** 				{
 2861              		.loc 1 622 8 is_stmt 0 view .LVU892
 2862 0cba 0528     		cmp	r0, #5
 2863 0cbc 00F00E82 		beq	.L483
 628:TMCL.c        **** 				{
 2864              		.loc 1 628 12 is_stmt 1 view .LVU893
 628:TMCL.c        **** 				{
 2865              		.loc 1 628 15 is_stmt 0 view .LVU894
 2866 0cc0 0628     		cmp	r0, #6
 2867 0cc2 00F0CE82 		beq	.L484
 631:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalPulsesPerRotation-(u32)&
 2868              		.loc 1 631 12 is_stmt 1 view .LVU895
 631:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalPulsesPerRotation-(u32)&
 2869              		.loc 1 631 15 is_stmt 0 view .LVU896
 2870 0cc6 0728     		cmp	r0, #7
 2871 0cc8 00F07D86 		beq	.L485
 634:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalPulsesPerRotation-(u32)&m
 2872              		.loc 1 634 12 is_stmt 1 view .LVU897
 634:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pedalPulsesPerRotation-(u32)&m
 2873              		.loc 1 634 15 is_stmt 0 view .LVU898
 2874 0ccc 0828     		cmp	r0, #8
 2875 0cce 7FF4A3AA 		bne	.L1
 635:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 2876              		.loc 1 635 6 is_stmt 1 view .LVU899
 2877              		.loc 1 1594 1 is_stmt 0 view .LVU900
 2878 0cd2 BDE83840 		pop	{r3, r4, r5, lr}
 2879              	.LCFI97:
 2880              		.cfi_remember_state
 2881              		.cfi_restore 14
 2882              		.cfi_restore 5
 2883              		.cfi_restore 4
 2884              		.cfi_restore 3
 2885              		.cfi_def_cfa_offset 0
 635:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 2886              		.loc 1 635 6 view .LVU901
 2887 0cd6 0222     		movs	r2, #2
 2888 0cd8 4020     		movs	r0, #64
 2889              	.LVL193:
 635:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 2890              		.loc 1 635 6 view .LVU902
 2891 0cda 5B49     		ldr	r1, .L528+36
 2892 0cdc FFF7FEBF 		b	eeprom_readConfigBlock
 2893              	.LVL194:
 2894              	.L71:
 2895              	.LCFI98:
 2896              		.cfi_restore_state
 904:TMCL.c        **** 				{
 2897              		.loc 1 904 5 is_stmt 1 view .LVU903
 904:TMCL.c        **** 				{
 2898              		.loc 1 904 8 is_stmt 0 view .LVU904
 2899 0ce0 0528     		cmp	r0, #5
 2900 0ce2 00F01982 		beq	.L486
 907:TMCL.c        **** 				{
 2901              		.loc 1 907 12 is_stmt 1 view .LVU905
 907:TMCL.c        **** 				{
 2902              		.loc 1 907 15 is_stmt 0 view .LVU906
 2903 0ce6 0628     		cmp	r0, #6
 2904 0ce8 00F05683 		beq	.L487
 910:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_5-(u32)&motorConfig,
 2905              		.loc 1 910 12 is_stmt 1 view .LVU907
 910:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_5-(u32)&motorConfig,
 2906              		.loc 1 910 15 is_stmt 0 view .LVU908
 2907 0cec 0728     		cmp	r0, #7
 2908 0cee 00F0E585 		beq	.L488
 913:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_5-(u32)&motorConfig,
 2909              		.loc 1 913 12 is_stmt 1 view .LVU909
 913:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_5-(u32)&motorConfig,
 2910              		.loc 1 913 15 is_stmt 0 view .LVU910
 2911 0cf2 0828     		cmp	r0, #8
 2912 0cf4 7FF490AA 		bne	.L1
 914:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 2913              		.loc 1 914 6 is_stmt 1 view .LVU911
 2914              		.loc 1 1594 1 is_stmt 0 view .LVU912
 2915 0cf8 BDE83840 		pop	{r3, r4, r5, lr}
 2916              	.LCFI99:
 2917              		.cfi_remember_state
 2918              		.cfi_restore 14
 2919              		.cfi_restore 5
 2920              		.cfi_restore 4
 2921              		.cfi_restore 3
 2922              		.cfi_def_cfa_offset 0
 914:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 2923              		.loc 1 914 6 view .LVU913
 2924 0cfc 0222     		movs	r2, #2
 2925 0cfe 6420     		movs	r0, #100
 2926              	.LVL195:
 914:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 2927              		.loc 1 914 6 view .LVU914
 2928 0d00 5249     		ldr	r1, .L528+40
 2929 0d02 FFF7FEBF 		b	eeprom_readConfigBlock
 2930              	.LVL196:
 2931              	.L106:
 2932              	.LCFI100:
 2933              		.cfi_restore_state
 449:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getOpenLoopAngle();
 2934              		.loc 1 449 5 is_stmt 1 view .LVU915
 449:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getOpenLoopAngle();
 2935              		.loc 1 449 8 is_stmt 0 view .LVU916
 2936 0d06 0628     		cmp	r0, #6
 2937 0d08 7FF486AA 		bne	.L1
 450:TMCL.c        **** 				}
 2938              		.loc 1 450 6 is_stmt 1 view .LVU917
 450:TMCL.c        **** 				}
 2939              		.loc 1 450 32 is_stmt 0 view .LVU918
 2940 0d0c FFF7FEFF 		bl	bldc_getOpenLoopAngle
 2941              	.LVL197:
 450:TMCL.c        **** 				}
 2942              		.loc 1 450 32 view .LVU919
 2943 0d10 E060     		str	r0, [r4, #12]
 2944              		.loc 1 1594 1 view .LVU920
 2945 0d12 38BD     		pop	{r3, r4, r5, pc}
 2946              	.LVL198:
 2947              	.L108:
 428:TMCL.c        **** 				{
 2948              		.loc 1 428 5 is_stmt 1 view .LVU921
 428:TMCL.c        **** 				{
 2949              		.loc 1 428 8 is_stmt 0 view .LVU922
 2950 0d14 0628     		cmp	r0, #6
 2951 0d16 7FF47FAA 		bne	.L1
 430:TMCL.c        **** 				}
 2952              		.loc 1 430 6 is_stmt 1 view .LVU923
 430:TMCL.c        **** 				}
 2953              		.loc 1 430 30 is_stmt 0 view .LVU924
 2954 0d1a 0323     		movs	r3, #3
 2955 0d1c E360     		str	r3, [r4, #12]
 2956              		.loc 1 1594 1 view .LVU925
 2957 0d1e 38BD     		pop	{r3, r4, r5, pc}
 2958              	.L109:
 412:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= 0) && (ActualCommand.Value.Int32 <= MAX_TORQUE))
 2959              		.loc 1 412 5 is_stmt 1 view .LVU926
 412:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= 0) && (ActualCommand.Value.Int32 <= MAX_TORQUE))
 2960              		.loc 1 412 8 is_stmt 0 view .LVU927
 2961 0d20 0528     		cmp	r0, #5
 2962 0d22 00F0D281 		beq	.L489
 417:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.openLoopCurrent;
 2963              		.loc 1 417 12 is_stmt 1 view .LVU928
 417:TMCL.c        **** 					ActualReply.Value.Int32 = motorConfig.openLoopCurrent;
 2964              		.loc 1 417 15 is_stmt 0 view .LVU929
 2965 0d26 0628     		cmp	r0, #6
 2966 0d28 00F0AB82 		beq	.L490
 419:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.openLoopCurrent-(u32)&motorCo
 2967              		.loc 1 419 12 is_stmt 1 view .LVU930
 419:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.openLoopCurrent-(u32)&motorCo
 2968              		.loc 1 419 15 is_stmt 0 view .LVU931
 2969 0d2c 0728     		cmp	r0, #7
 2970 0d2e 00F0EF85 		beq	.L491
 422:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.openLoopCurrent-(u32)&motorCon
 2971              		.loc 1 422 12 is_stmt 1 view .LVU932
 422:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.openLoopCurrent-(u32)&motorCon
 2972              		.loc 1 422 15 is_stmt 0 view .LVU933
 2973 0d32 0828     		cmp	r0, #8
 2974 0d34 7FF470AA 		bne	.L1
 423:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 2975              		.loc 1 423 6 is_stmt 1 view .LVU934
 2976              		.loc 1 1594 1 is_stmt 0 view .LVU935
 2977 0d38 BDE83840 		pop	{r3, r4, r5, lr}
 2978              	.LCFI101:
 2979              		.cfi_remember_state
 2980              		.cfi_restore 14
 2981              		.cfi_restore 5
 2982              		.cfi_restore 4
 2983              		.cfi_restore 3
 2984              		.cfi_def_cfa_offset 0
 423:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 2985              		.loc 1 423 6 view .LVU936
 2986 0d3c 0422     		movs	r2, #4
 2987 0d3e A020     		movs	r0, #160
 2988              	.LVL199:
 423:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 2989              		.loc 1 423 6 view .LVU937
 2990 0d40 4349     		ldr	r1, .L528+44
 2991 0d42 FFF7FEBF 		b	eeprom_readConfigBlock
 2992              	.LVL200:
 2993              	.L79:
 2994              	.LCFI102:
 2995              		.cfi_restore_state
 789:TMCL.c        **** 				{
 2996              		.loc 1 789 5 is_stmt 1 view .LVU938
 789:TMCL.c        **** 				{
 2997              		.loc 1 789 8 is_stmt 0 view .LVU939
 2998 0d46 0628     		cmp	r0, #6
 2999 0d48 7FF466AA 		bne	.L1
 791:TMCL.c        **** 				}
 3000              		.loc 1 791 6 is_stmt 1 view .LVU940
 791:TMCL.c        **** 				}
 3001              		.loc 1 791 32 is_stmt 0 view .LVU941
 3002 0d4c FFF7FEFF 		bl	sensor_averageTorque
 3003              	.LVL201:
 791:TMCL.c        **** 				}
 3004              		.loc 1 791 30 view .LVU942
 3005 0d50 E060     		str	r0, [r4, #12]
 3006              		.loc 1 1594 1 view .LVU943
 3007 0d52 38BD     		pop	{r3, r4, r5, pc}
 3008              	.LVL202:
 3009              	.L98:
 548:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getActualMotorCurrent();
 3010              		.loc 1 548 5 is_stmt 1 view .LVU944
 548:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getActualMotorCurrent();
 3011              		.loc 1 548 8 is_stmt 0 view .LVU945
 3012 0d54 0628     		cmp	r0, #6
 3013 0d56 7FF45FAA 		bne	.L1
 549:TMCL.c        **** 					//ActualReply.Value.Int32 = actualTorque();
 3014              		.loc 1 549 6 is_stmt 1 view .LVU946
 549:TMCL.c        **** 					//ActualReply.Value.Int32 = actualTorque();
 3015              		.loc 1 549 32 is_stmt 0 view .LVU947
 3016 0d5a FFF7FEFF 		bl	bldc_getActualMotorCurrent
 3017              	.LVL203:
 549:TMCL.c        **** 					//ActualReply.Value.Int32 = actualTorque();
 3018              		.loc 1 549 30 view .LVU948
 3019 0d5e E060     		str	r0, [r4, #12]
 3020              		.loc 1 1594 1 view .LVU949
 3021 0d60 38BD     		pop	{r3, r4, r5, pc}
 3022              	.LVL204:
 3023              	.L99:
 538:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= -MAX_TORQUE) && (ActualCommand.Value.Int32 <= MAX_TORQUE))
 3024              		.loc 1 538 5 is_stmt 1 view .LVU950
 538:TMCL.c        **** 					if((ActualCommand.Value.Int32 >= -MAX_TORQUE) && (ActualCommand.Value.Int32 <= MAX_TORQUE))
 3025              		.loc 1 538 8 is_stmt 0 view .LVU951
 3026 0d62 0528     		cmp	r0, #5
 3027 0d64 00F0FF80 		beq	.L492
 543:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getTargetMotorCurrent();
 3028              		.loc 1 543 12 is_stmt 1 view .LVU952
 543:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getTargetMotorCurrent();
 3029              		.loc 1 543 15 is_stmt 0 view .LVU953
 3030 0d68 0628     		cmp	r0, #6
 3031 0d6a 7FF455AA 		bne	.L1
 544:TMCL.c        **** 				}
 3032              		.loc 1 544 6 is_stmt 1 view .LVU954
 544:TMCL.c        **** 				}
 3033              		.loc 1 544 32 is_stmt 0 view .LVU955
 3034 0d6e FFF7FEFF 		bl	bldc_getTargetMotorCurrent
 3035              	.LVL205:
 544:TMCL.c        **** 				}
 3036              		.loc 1 544 30 view .LVU956
 3037 0d72 E060     		str	r0, [r4, #12]
 3038              		.loc 1 1594 1 view .LVU957
 3039 0d74 38BD     		pop	{r3, r4, r5, pc}
 3040              	.LVL206:
 3041              	.L100:
 518:TMCL.c        **** 				{
 3042              		.loc 1 518 5 is_stmt 1 view .LVU958
 518:TMCL.c        **** 				{
 3043              		.loc 1 518 8 is_stmt 0 view .LVU959
 3044 0d76 0528     		cmp	r0, #5
 3045 0d78 00F0C083 		beq	.L493
 523:TMCL.c        **** 				{
 3046              		.loc 1 523 10 is_stmt 1 view .LVU960
 523:TMCL.c        **** 				{
 3047              		.loc 1 523 13 is_stmt 0 view .LVU961
 3048 0d7c 0628     		cmp	r0, #6
 3049 0d7e 00F02A82 		beq	.L494
 526:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_I_param-(u32)&mot
 3050              		.loc 1 526 12 is_stmt 1 view .LVU962
 526:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_I_param-(u32)&mot
 3051              		.loc 1 526 15 is_stmt 0 view .LVU963
 3052 0d82 0728     		cmp	r0, #7
 3053 0d84 00F0DC84 		beq	.L495
 529:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_I_param-(u32)&moto
 3054              		.loc 1 529 12 is_stmt 1 view .LVU964
 529:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_I_param-(u32)&moto
 3055              		.loc 1 529 15 is_stmt 0 view .LVU965
 3056 0d88 0828     		cmp	r0, #8
 3057 0d8a 7FF445AA 		bne	.L1
 530:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 3058              		.loc 1 530 6 is_stmt 1 view .LVU966
 3059              		.loc 1 1594 1 is_stmt 0 view .LVU967
 3060 0d8e BDE83840 		pop	{r3, r4, r5, lr}
 3061              	.LCFI103:
 3062              		.cfi_remember_state
 3063              		.cfi_restore 14
 3064              		.cfi_restore 5
 3065              		.cfi_restore 4
 3066              		.cfi_restore 3
 3067              		.cfi_def_cfa_offset 0
 530:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 3068              		.loc 1 530 6 view .LVU968
 3069 0d92 0222     		movs	r2, #2
 3070 0d94 CE20     		movs	r0, #206
 3071              	.LVL207:
 530:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 3072              		.loc 1 530 6 view .LVU969
 3073 0d96 2F49     		ldr	r1, .L528+48
 3074 0d98 FFF7FEBF 		b	eeprom_readConfigBlock
 3075              	.LVL208:
 3076              	.L101:
 3077              	.LCFI104:
 3078              		.cfi_restore_state
 501:TMCL.c        **** 				{
 3079              		.loc 1 501 5 is_stmt 1 view .LVU970
 501:TMCL.c        **** 				{
 3080              		.loc 1 501 8 is_stmt 0 view .LVU971
 3081 0d9c 0528     		cmp	r0, #5
 3082 0d9e 00F05583 		beq	.L496
 506:TMCL.c        **** 				{
 3083              		.loc 1 506 10 is_stmt 1 view .LVU972
 506:TMCL.c        **** 				{
 3084              		.loc 1 506 13 is_stmt 0 view .LVU973
 3085 0da2 0628     		cmp	r0, #6
 3086 0da4 00F01C82 		beq	.L497
 509:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_P_param-(u32)&mot
 3087              		.loc 1 509 12 is_stmt 1 view .LVU974
 509:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_P_param-(u32)&mot
 3088              		.loc 1 509 15 is_stmt 0 view .LVU975
 3089 0da8 0728     		cmp	r0, #7
 3090 0daa 00F0D784 		beq	.L498
 512:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_P_param-(u32)&moto
 3091              		.loc 1 512 12 is_stmt 1 view .LVU976
 512:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidVelocity_P_param-(u32)&moto
 3092              		.loc 1 512 15 is_stmt 0 view .LVU977
 3093 0dae 0828     		cmp	r0, #8
 3094 0db0 7FF432AA 		bne	.L1
 513:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 3095              		.loc 1 513 6 is_stmt 1 view .LVU978
 3096              		.loc 1 1594 1 is_stmt 0 view .LVU979
 3097 0db4 BDE83840 		pop	{r3, r4, r5, lr}
 3098              	.LCFI105:
 3099              		.cfi_remember_state
 3100              		.cfi_restore 14
 3101              		.cfi_restore 5
 3102              		.cfi_restore 4
 3103              		.cfi_restore 3
 3104              		.cfi_def_cfa_offset 0
 513:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 3105              		.loc 1 513 6 view .LVU980
 3106 0db8 0222     		movs	r2, #2
 3107 0dba CC20     		movs	r0, #204
 3108              	.LVL209:
 513:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 3109              		.loc 1 513 6 view .LVU981
 3110 0dbc 2649     		ldr	r1, .L528+52
 3111 0dbe FFF7FEBF 		b	eeprom_readConfigBlock
 3112              	.LVL210:
 3113              	.L114:
 3114              	.LCFI106:
 3115              		.cfi_restore_state
 368:TMCL.c        **** 					if (!bldc_setAdcI1Offset(ActualCommand.Value.Int32))
 3116              		.loc 1 368 5 is_stmt 1 view .LVU982
 368:TMCL.c        **** 					if (!bldc_setAdcI1Offset(ActualCommand.Value.Int32))
 3117              		.loc 1 368 8 is_stmt 0 view .LVU983
 3118 0dc2 0528     		cmp	r0, #5
 3119 0dc4 00F07E83 		beq	.L499
 371:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getAdcI1Offset();
 3120              		.loc 1 371 12 is_stmt 1 view .LVU984
 371:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getAdcI1Offset();
 3121              		.loc 1 371 15 is_stmt 0 view .LVU985
 3122 0dc8 0628     		cmp	r0, #6
 3123 0dca 00F08E84 		beq	.L500
 373:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I1_offset-(u32)&motorConf
 3124              		.loc 1 373 12 is_stmt 1 view .LVU986
 373:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I1_offset-(u32)&motorConf
 3125              		.loc 1 373 15 is_stmt 0 view .LVU987
 3126 0dce 0728     		cmp	r0, #7
 3127 0dd0 00F0A484 		beq	.L501
 376:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I1_offset-(u32)&motorConfi
 3128              		.loc 1 376 12 is_stmt 1 view .LVU988
 376:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I1_offset-(u32)&motorConfi
 3129              		.loc 1 376 15 is_stmt 0 view .LVU989
 3130 0dd4 0828     		cmp	r0, #8
 3131 0dd6 7FF41FAA 		bne	.L1
 377:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 3132              		.loc 1 377 6 is_stmt 1 view .LVU990
 3133              		.loc 1 1594 1 is_stmt 0 view .LVU991
 3134 0dda BDE83840 		pop	{r3, r4, r5, lr}
 3135              	.LCFI107:
 3136              		.cfi_remember_state
 3137              		.cfi_restore 14
 3138              		.cfi_restore 5
 3139              		.cfi_restore 4
 3140              		.cfi_restore 3
 3141              		.cfi_def_cfa_offset 0
 377:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 3142              		.loc 1 377 6 view .LVU992
 3143 0dde 0222     		movs	r2, #2
 3144 0de0 A620     		movs	r0, #166
 3145              	.LVL211:
 377:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 3146              		.loc 1 377 6 view .LVU993
 3147 0de2 1E49     		ldr	r1, .L528+56
 3148 0de4 FFF7FEBF 		b	eeprom_readConfigBlock
 3149              	.LVL212:
 3150              	.L116:
 3151              	.LCFI108:
 3152              		.cfi_restore_state
 347:TMCL.c        **** 				{
 3153              		.loc 1 347 5 is_stmt 1 view .LVU994
 347:TMCL.c        **** 				{
 3154              		.loc 1 347 8 is_stmt 0 view .LVU995
 3155 0de8 0628     		cmp	r0, #6
 3156 0dea 7FF415AA 		bne	.L1
 349:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_I1_
 3157              		.loc 1 349 6 is_stmt 1 view .LVU996
 3158 0dee 0022     		movs	r2, #0
 3159 0df0 0321     		movs	r1, #3
 3160 0df2 1046     		mov	r0, r2
 3161              	.LVL213:
 349:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_I1_
 3162              		.loc 1 349 6 is_stmt 0 view .LVU997
 3163 0df4 FFF7FEFF 		bl	tmc4671_writeInt
 3164              	.LVL214:
 350:TMCL.c        **** 				}
 3165              		.loc 1 350 6 is_stmt 1 view .LVU998
 350:TMCL.c        **** 				}
 3166              		.loc 1 350 32 is_stmt 0 view .LVU999
 3167 0df8 0221     		movs	r1, #2
 3168 0dfa 0020     		movs	r0, #0
 3169 0dfc FFF7FEFF 		bl	tmc4671_readInt
 3170              	.LVL215:
 3171 0e00 000C     		lsrs	r0, r0, #16
 350:TMCL.c        **** 				}
 3172              		.loc 1 350 30 view .LVU1000
 3173 0e02 E060     		str	r0, [r4, #12]
 3174              		.loc 1 1594 1 view .LVU1001
 3175 0e04 38BD     		pop	{r3, r4, r5, pc}
 3176              	.LVL216:
 3177              	.L117:
 340:TMCL.c        **** 				{
 3178              		.loc 1 340 5 is_stmt 1 view .LVU1002
 340:TMCL.c        **** 				{
 3179              		.loc 1 340 8 is_stmt 0 view .LVU1003
 3180 0e06 0628     		cmp	r0, #6
 3181 0e08 7FF406AA 		bne	.L1
 342:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_I0_
 3182              		.loc 1 342 6 is_stmt 1 view .LVU1004
 3183 0e0c 0022     		movs	r2, #0
 3184 0e0e 0321     		movs	r1, #3
 3185 0e10 1046     		mov	r0, r2
 3186              	.LVL217:
 342:TMCL.c        **** 					ActualReply.Value.Int32 = TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_RAW_DATA, TMC4671_ADC_I0_
 3187              		.loc 1 342 6 is_stmt 0 view .LVU1005
 3188 0e12 FFF7FEFF 		bl	tmc4671_writeInt
 3189              	.LVL218:
 343:TMCL.c        **** 				}
 3190              		.loc 1 343 6 is_stmt 1 view .LVU1006
 343:TMCL.c        **** 				}
 3191              		.loc 1 343 32 is_stmt 0 view .LVU1007
 3192 0e16 0221     		movs	r1, #2
 3193 0e18 0020     		movs	r0, #0
 3194 0e1a FFF7FEFF 		bl	tmc4671_readInt
 3195              	.LVL219:
 3196 0e1e 80B2     		uxth	r0, r0
 343:TMCL.c        **** 				}
 3197              		.loc 1 343 30 view .LVU1008
 3198 0e20 E060     		str	r0, [r4, #12]
 3199              		.loc 1 1594 1 view .LVU1009
 3200 0e22 38BD     		pop	{r3, r4, r5, pc}
 3201              	.L529:
 3202              		.align	2
 3203              	.L528:
 3204 0e24 34000000 		.word	motorConfig+52
 3205 0e28 16000000 		.word	motorConfig+22
 3206 0e2c 58000000 		.word	motorConfig+88
 3207 0e30 1E000000 		.word	motorConfig+30
 3208 0e34 68000000 		.word	motorConfig+104
 3209 0e38 15000000 		.word	motorConfig+21
 3210 0e3c 14000000 		.word	motorConfig+20
 3211 0e40 10000000 		.word	motorConfig+16
 3212 0e44 0C000000 		.word	motorConfig+12
 3213 0e48 00000000 		.word	motorConfig
 3214 0e4c 24000000 		.word	motorConfig+36
 3215 0e50 60000000 		.word	motorConfig+96
 3216 0e54 8E000000 		.word	motorConfig+142
 3217 0e58 8C000000 		.word	motorConfig+140
 3218 0e5c 66000000 		.word	motorConfig+102
 3219              	.LVL220:
 3220              	.L76:
 829:TMCL.c        **** 				{
 3221              		.loc 1 829 5 is_stmt 1 view .LVU1010
 829:TMCL.c        **** 				{
 3222              		.loc 1 829 8 is_stmt 0 view .LVU1011
 3223 0e60 0528     		cmp	r0, #5
 3224 0e62 00F04281 		beq	.L502
 832:TMCL.c        **** 				{
 3225              		.loc 1 832 12 is_stmt 1 view .LVU1012
 832:TMCL.c        **** 				{
 3226              		.loc 1 832 15 is_stmt 0 view .LVU1013
 3227 0e66 0628     		cmp	r0, #6
 3228 0e68 00F0FF81 		beq	.L503
 835:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_0-(u32)&motorConfig,
 3229              		.loc 1 835 12 is_stmt 1 view .LVU1014
 835:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_0-(u32)&motorConfig,
 3230              		.loc 1 835 15 is_stmt 0 view .LVU1015
 3231 0e6c 0728     		cmp	r0, #7
 3232 0e6e 00F0E985 		beq	.L504
 838:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_0-(u32)&motorConfig,
 3233              		.loc 1 838 12 is_stmt 1 view .LVU1016
 838:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_0-(u32)&motorConfig,
 3234              		.loc 1 838 15 is_stmt 0 view .LVU1017
 3235 0e72 0828     		cmp	r0, #8
 3236 0e74 7FF4D0A9 		bne	.L1
 839:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 3237              		.loc 1 839 6 is_stmt 1 view .LVU1018
 3238              		.loc 1 1594 1 is_stmt 0 view .LVU1019
 3239 0e78 BDE83840 		pop	{r3, r4, r5, lr}
 3240              	.LCFI109:
 3241              		.cfi_remember_state
 3242              		.cfi_restore 14
 3243              		.cfi_restore 5
 3244              		.cfi_restore 4
 3245              		.cfi_restore 3
 3246              		.cfi_def_cfa_offset 0
 839:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 3247              		.loc 1 839 6 view .LVU1020
 3248 0e7c 0222     		movs	r2, #2
 3249 0e7e 5A20     		movs	r0, #90
 3250              	.LVL221:
 839:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 3251              		.loc 1 839 6 view .LVU1021
 3252 0e80 B549     		ldr	r1, .L530
 3253 0e82 FFF7FEBF 		b	eeprom_readConfigBlock
 3254              	.LVL222:
 3255              	.L77:
 3256              	.LCFI110:
 3257              		.cfi_restore_state
 813:TMCL.c        **** 				{
 3258              		.loc 1 813 5 is_stmt 1 view .LVU1022
 813:TMCL.c        **** 				{
 3259              		.loc 1 813 8 is_stmt 0 view .LVU1023
 3260 0e86 0528     		cmp	r0, #5
 3261 0e88 00F0D680 		beq	.L505
 816:TMCL.c        **** 				{
 3262              		.loc 1 816 12 is_stmt 1 view .LVU1024
 816:TMCL.c        **** 				{
 3263              		.loc 1 816 15 is_stmt 0 view .LVU1025
 3264 0e8c 0628     		cmp	r0, #6
 3265 0e8e 00F0CC81 		beq	.L506
 819:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.negativeMotoringRampTime-(u32
 3266              		.loc 1 819 12 is_stmt 1 view .LVU1026
 819:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.negativeMotoringRampTime-(u32
 3267              		.loc 1 819 15 is_stmt 0 view .LVU1027
 3268 0e92 0728     		cmp	r0, #7
 3269 0e94 00F00B85 		beq	.L507
 822:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.negativeMotoringRampTime-(u32)
 3270              		.loc 1 822 12 is_stmt 1 view .LVU1028
 822:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.negativeMotoringRampTime-(u32)
 3271              		.loc 1 822 15 is_stmt 0 view .LVU1029
 3272 0e98 0828     		cmp	r0, #8
 3273 0e9a 7FF4BDA9 		bne	.L1
 823:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 3274              		.loc 1 823 6 is_stmt 1 view .LVU1030
 3275              		.loc 1 1594 1 is_stmt 0 view .LVU1031
 3276 0e9e BDE83840 		pop	{r3, r4, r5, lr}
 3277              	.LCFI111:
 3278              		.cfi_remember_state
 3279              		.cfi_restore 14
 3280              		.cfi_restore 5
 3281              		.cfi_restore 4
 3282              		.cfi_restore 3
 3283              		.cfi_def_cfa_offset 0
 823:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 3284              		.loc 1 823 6 view .LVU1032
 3285 0ea2 0222     		movs	r2, #2
 3286 0ea4 5820     		movs	r0, #88
 3287              	.LVL223:
 823:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 3288              		.loc 1 823 6 view .LVU1033
 3289 0ea6 AD49     		ldr	r1, .L530+4
 3290 0ea8 FFF7FEBF 		b	eeprom_readConfigBlock
 3291              	.LVL224:
 3292              	.L75:
 3293              	.LCFI112:
 3294              		.cfi_restore_state
 844:TMCL.c        **** 				{
 3295              		.loc 1 844 5 is_stmt 1 view .LVU1034
 844:TMCL.c        **** 				{
 3296              		.loc 1 844 8 is_stmt 0 view .LVU1035
 3297 0eac 0528     		cmp	r0, #5
 3298 0eae 00F03A81 		beq	.L508
 847:TMCL.c        **** 				{
 3299              		.loc 1 847 12 is_stmt 1 view .LVU1036
 847:TMCL.c        **** 				{
 3300              		.loc 1 847 15 is_stmt 0 view .LVU1037
 3301 0eb2 0628     		cmp	r0, #6
 3302 0eb4 00F07D82 		beq	.L509
 850:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_1-(u32)&motorConfig,
 3303              		.loc 1 850 12 is_stmt 1 view .LVU1038
 850:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_1-(u32)&motorConfig,
 3304              		.loc 1 850 15 is_stmt 0 view .LVU1039
 3305 0eb8 0728     		cmp	r0, #7
 3306 0eba 00F07D85 		beq	.L510
 853:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_1-(u32)&motorConfig,
 3307              		.loc 1 853 12 is_stmt 1 view .LVU1040
 853:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.speed_1-(u32)&motorConfig,
 3308              		.loc 1 853 15 is_stmt 0 view .LVU1041
 3309 0ebe 0828     		cmp	r0, #8
 3310 0ec0 7FF4AAA9 		bne	.L1
 854:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 3311              		.loc 1 854 6 is_stmt 1 view .LVU1042
 3312              		.loc 1 1594 1 is_stmt 0 view .LVU1043
 3313 0ec4 BDE83840 		pop	{r3, r4, r5, lr}
 3314              	.LCFI113:
 3315              		.cfi_remember_state
 3316              		.cfi_restore 14
 3317              		.cfi_restore 5
 3318              		.cfi_restore 4
 3319              		.cfi_restore 3
 3320              		.cfi_def_cfa_offset 0
 854:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 3321              		.loc 1 854 6 view .LVU1044
 3322 0ec8 0222     		movs	r2, #2
 3323 0eca 5C20     		movs	r0, #92
 3324              	.LVL225:
 854:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 3325              		.loc 1 854 6 view .LVU1045
 3326 0ecc A449     		ldr	r1, .L530+8
 3327 0ece FFF7FEBF 		b	eeprom_readConfigBlock
 3328              	.LVL226:
 3329              	.L103:
 3330              	.LCFI114:
 3331              		.cfi_restore_state
 465:TMCL.c        **** 				{
 3332              		.loc 1 465 5 is_stmt 1 view .LVU1046
 465:TMCL.c        **** 				{
 3333              		.loc 1 465 8 is_stmt 0 view .LVU1047
 3334 0ed2 0528     		cmp	r0, #5
 3335 0ed4 00F0C283 		beq	.L511
 471:TMCL.c        **** 				{
 3336              		.loc 1 471 10 is_stmt 1 view .LVU1048
 471:TMCL.c        **** 				{
 3337              		.loc 1 471 13 is_stmt 0 view .LVU1049
 3338 0ed8 0628     		cmp	r0, #6
 3339 0eda 00F04F81 		beq	.L512
 474:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_P_param-(u32)&motor
 3340              		.loc 1 474 12 is_stmt 1 view .LVU1050
 474:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_P_param-(u32)&motor
 3341              		.loc 1 474 15 is_stmt 0 view .LVU1051
 3342 0ede 0728     		cmp	r0, #7
 3343 0ee0 00F0B484 		beq	.L513
 477:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_P_param-(u32)&motorC
 3344              		.loc 1 477 12 is_stmt 1 view .LVU1052
 477:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.pidTorque_P_param-(u32)&motorC
 3345              		.loc 1 477 15 is_stmt 0 view .LVU1053
 3346 0ee4 0828     		cmp	r0, #8
 3347 0ee6 7FF497A9 		bne	.L1
 478:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 3348              		.loc 1 478 6 is_stmt 1 view .LVU1054
 3349              		.loc 1 1594 1 is_stmt 0 view .LVU1055
 3350 0eea BDE83840 		pop	{r3, r4, r5, lr}
 3351              	.LCFI115:
 3352              		.cfi_remember_state
 3353              		.cfi_restore 14
 3354              		.cfi_restore 5
 3355              		.cfi_restore 4
 3356              		.cfi_restore 3
 3357              		.cfi_def_cfa_offset 0
 478:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 3358              		.loc 1 478 6 view .LVU1056
 3359 0eee 0222     		movs	r2, #2
 3360 0ef0 C820     		movs	r0, #200
 3361              	.LVL227:
 478:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 3362              		.loc 1 478 6 view .LVU1057
 3363 0ef2 9C49     		ldr	r1, .L530+12
 3364 0ef4 FFF7FEBF 		b	eeprom_readConfigBlock
 3365              	.LVL228:
 3366              	.L111:
 3367              	.LCFI116:
 3368              		.cfi_restore_state
 390:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IWY_IUX, TMC4671
 3369              		.loc 1 390 5 is_stmt 1 view .LVU1058
 390:TMCL.c        **** 					ActualReply.Value.Int32 = (int16_t)TMC4671_FIELD_READ(DEFAULT_MC, TMC4671_ADC_IWY_IUX, TMC4671
 3370              		.loc 1 390 8 is_stmt 0 view .LVU1059
 3371 0ef8 0628     		cmp	r0, #6
 3372 0efa 7FF48DA9 		bne	.L1
 391:TMCL.c        **** 				break;
 3373              		.loc 1 391 6 is_stmt 1 view .LVU1060
 391:TMCL.c        **** 				break;
 3374              		.loc 1 391 41 is_stmt 0 view .LVU1061
 3375 0efe 1221     		movs	r1, #18
 3376 0f00 0020     		movs	r0, #0
 3377              	.LVL229:
 391:TMCL.c        **** 				break;
 3378              		.loc 1 391 41 view .LVU1062
 3379 0f02 FFF7FEFF 		bl	tmc4671_readInt
 3380              	.LVL230:
 391:TMCL.c        **** 				break;
 3381              		.loc 1 391 32 view .LVU1063
 3382 0f06 00B2     		sxth	r0, r0
 3383 0f08 E060     		str	r0, [r4, #12]
 3384              		.loc 1 1594 1 view .LVU1064
 3385 0f0a 38BD     		pop	{r3, r4, r5, pc}
 3386              	.LVL231:
 3387              	.L107:
 434:TMCL.c        **** 					if (!bldc_setCommutationMode(ActualCommand.Value.Int32))
 3388              		.loc 1 434 5 is_stmt 1 view .LVU1065
 434:TMCL.c        **** 					if (!bldc_setCommutationMode(ActualCommand.Value.Int32))
 3389              		.loc 1 434 8 is_stmt 0 view .LVU1066
 3390 0f0c 0528     		cmp	r0, #5
 3391 0f0e 00F0D183 		beq	.L514
 437:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getCommutationMode();
 3392              		.loc 1 437 12 is_stmt 1 view .LVU1067
 437:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getCommutationMode();
 3393              		.loc 1 437 15 is_stmt 0 view .LVU1068
 3394 0f12 0628     		cmp	r0, #6
 3395 0f14 00F0D983 		beq	.L515
 439:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.commutationMode-(u32)&motorCo
 3396              		.loc 1 439 12 is_stmt 1 view .LVU1069
 439:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.commutationMode-(u32)&motorCo
 3397              		.loc 1 439 15 is_stmt 0 view .LVU1070
 3398 0f18 0728     		cmp	r0, #7
 3399 0f1a 00F0F183 		beq	.L516
 442:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.commutationMode-(u32)&motorCon
 3400              		.loc 1 442 12 is_stmt 1 view .LVU1071
 442:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.commutationMode-(u32)&motorCon
 3401              		.loc 1 442 15 is_stmt 0 view .LVU1072
 3402 0f1e 0828     		cmp	r0, #8
 3403 0f20 7FF47AA9 		bne	.L1
 443:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 3404              		.loc 1 443 6 is_stmt 1 view .LVU1073
 3405              		.loc 1 1594 1 is_stmt 0 view .LVU1074
 3406 0f24 BDE83840 		pop	{r3, r4, r5, lr}
 3407              	.LCFI117:
 3408              		.cfi_remember_state
 3409              		.cfi_restore 14
 3410              		.cfi_restore 5
 3411              		.cfi_restore 4
 3412              		.cfi_restore 3
 3413              		.cfi_def_cfa_offset 0
 443:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 3414              		.loc 1 443 6 view .LVU1075
 3415 0f28 0122     		movs	r2, #1
 3416 0f2a AA20     		movs	r0, #170
 3417              	.LVL232:
 443:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 3418              		.loc 1 443 6 view .LVU1076
 3419 0f2c 8E49     		ldr	r1, .L530+16
 3420 0f2e FFF7FEBF 		b	eeprom_readConfigBlock
 3421              	.LVL233:
 3422              	.L115:
 3423              	.LCFI118:
 3424              		.cfi_restore_state
 354:TMCL.c        **** 					if (!bldc_setAdcI0Offset(ActualCommand.Value.Int32))
 3425              		.loc 1 354 5 is_stmt 1 view .LVU1077
 354:TMCL.c        **** 					if (!bldc_setAdcI0Offset(ActualCommand.Value.Int32))
 3426              		.loc 1 354 8 is_stmt 0 view .LVU1078
 3427 0f32 0528     		cmp	r0, #5
 3428 0f34 00F0BF82 		beq	.L517
 357:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getAdcI0Offset();
 3429              		.loc 1 357 12 is_stmt 1 view .LVU1079
 357:TMCL.c        **** 					ActualReply.Value.Int32 = bldc_getAdcI0Offset();
 3430              		.loc 1 357 15 is_stmt 0 view .LVU1080
 3431 0f38 0628     		cmp	r0, #6
 3432 0f3a 00F0D283 		beq	.L518
 359:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I0_offset-(u32)&motorConf
 3433              		.loc 1 359 12 is_stmt 1 view .LVU1081
 359:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I0_offset-(u32)&motorConf
 3434              		.loc 1 359 15 is_stmt 0 view .LVU1082
 3435 0f3e 0728     		cmp	r0, #7
 3436 0f40 00F0D783 		beq	.L519
 362:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I0_offset-(u32)&motorConfi
 3437              		.loc 1 362 12 is_stmt 1 view .LVU1083
 362:TMCL.c        **** 					eeprom_readConfigBlock(TMCM_ADDR_MOTOR_CONFIG+(u32)&motorConfig.adc_I0_offset-(u32)&motorConfi
 3438              		.loc 1 362 15 is_stmt 0 view .LVU1084
 3439 0f44 0828     		cmp	r0, #8
 3440 0f46 7FF467A9 		bne	.L1
 363:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 3441              		.loc 1 363 6 is_stmt 1 view .LVU1085
 3442              		.loc 1 1594 1 is_stmt 0 view .LVU1086
 3443 0f4a BDE83840 		pop	{r3, r4, r5, lr}
 3444              	.LCFI119:
 3445              		.cfi_remember_state
 3446              		.cfi_restore 14
 3447              		.cfi_restore 5
 3448              		.cfi_restore 4
 3449              		.cfi_restore 3
 3450              		.cfi_def_cfa_offset 0
 363:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 3451              		.loc 1 363 6 view .LVU1087
 3452 0f4e 0222     		movs	r2, #2
 3453 0f50 A420     		movs	r0, #164
 3454              	.LVL234:
 363:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 3455              		.loc 1 363 6 view .LVU1088
 3456 0f52 8649     		ldr	r1, .L530+20
 3457 0f54 FFF7FEBF 		b	eeprom_readConfigBlock
 3458              	.LVL235:
 3459              	.L416:
 3460              	.LCFI120:
 3461              		.cfi_restore_state
 876:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3462              		.loc 1 876 6 is_stmt 1 view .LVU1089
 876:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3463              		.loc 1 876 26 is_stmt 0 view .LVU1090
 3464 0f58 6368     		ldr	r3, [r4, #4]
 3465 0f5a 854A     		ldr	r2, .L530+24
 3466 0f5c 03EB8303 		add	r3, r3, r3, lsl #2
 3467 0f60 5B00     		lsls	r3, r3, #1
 3468 0f62 1384     		strh	r3, [r2, #32]	@ movhi
 3469              		.loc 1 1594 1 view .LVU1091
 3470 0f64 38BD     		pop	{r3, r4, r5, pc}
 3471              	.L492:
 539:TMCL.c        **** 						bldc_setTargetMotorCurrent(ActualCommand.Value.Int32);
 3472              		.loc 1 539 6 is_stmt 1 view .LVU1092
 539:TMCL.c        **** 						bldc_setTargetMotorCurrent(ActualCommand.Value.Int32);
 3473              		.loc 1 539 8 is_stmt 0 view .LVU1093
 3474 0f66 4EF66022 		movw	r2, #60000
 539:TMCL.c        **** 						bldc_setTargetMotorCurrent(ActualCommand.Value.Int32);
 3475              		.loc 1 539 29 view .LVU1094
 3476 0f6a 6068     		ldr	r0, [r4, #4]
 3477              	.LVL236:
 539:TMCL.c        **** 						bldc_setTargetMotorCurrent(ActualCommand.Value.Int32);
 3478              		.loc 1 539 52 view .LVU1095
 3479 0f6c 00F5EA43 		add	r3, r0, #29952
 3480 0f70 3033     		adds	r3, r3, #48
 539:TMCL.c        **** 						bldc_setTargetMotorCurrent(ActualCommand.Value.Int32);
 3481              		.loc 1 539 8 view .LVU1096
 3482 0f72 9342     		cmp	r3, r2
 3483 0f74 40F2E083 		bls	.L520
 3484              	.L125:
 356:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3485              		.loc 1 356 7 is_stmt 1 view .LVU1097
 356:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3486              		.loc 1 356 26 is_stmt 0 view .LVU1098
 3487 0f78 0423     		movs	r3, #4
 3488 0f7a 2372     		strb	r3, [r4, #8]
 3489              		.loc 1 1594 1 view .LVU1099
 3490 0f7c 38BD     		pop	{r3, r4, r5, pc}
 3491              	.LVL237:
 3492              	.L464:
 558:TMCL.c        **** 						bldc_setTargetVelocity(ActualCommand.Value.Int32);
 3493              		.loc 1 558 6 is_stmt 1 view .LVU1100
 558:TMCL.c        **** 						bldc_setTargetVelocity(ActualCommand.Value.Int32);
 3494              		.loc 1 558 29 is_stmt 0 view .LVU1101
 3495 0f7e 6068     		ldr	r0, [r4, #4]
 3496              	.LVL238:
 558:TMCL.c        **** 						bldc_setTargetVelocity(ActualCommand.Value.Int32);
 3497              		.loc 1 558 8 view .LVU1102
 3498 0f80 7C4A     		ldr	r2, .L530+28
 558:TMCL.c        **** 						bldc_setTargetVelocity(ActualCommand.Value.Int32);
 3499              		.loc 1 558 54 view .LVU1103
 3500 0f82 00F54333 		add	r3, r0, #199680
 3501 0f86 03F5A073 		add	r3, r3, #320
 558:TMCL.c        **** 						bldc_setTargetVelocity(ActualCommand.Value.Int32);
 3502              		.loc 1 558 8 view .LVU1104
 3503 0f8a 9342     		cmp	r3, r2
 3504 0f8c F4D8     		bhi	.L125
 559:TMCL.c        **** 					else
 3505              		.loc 1 559 7 is_stmt 1 view .LVU1105
 3506              		.loc 1 1594 1 is_stmt 0 view .LVU1106
 3507 0f8e BDE83840 		pop	{r3, r4, r5, lr}
 3508              	.LCFI121:
 3509              		.cfi_remember_state
 3510              		.cfi_restore 14
 3511              		.cfi_restore 5
 3512              		.cfi_restore 4
 3513              		.cfi_restore 3
 3514              		.cfi_def_cfa_offset 0
 559:TMCL.c        **** 					else
 3515              		.loc 1 559 7 view .LVU1107
 3516 0f92 FFF7FEBF 		b	bldc_setTargetVelocity
 3517              	.LVL239:
 3518              	.L422:
 3519              	.LCFI122:
 3520              		.cfi_restore_state
1041:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3521              		.loc 1 1041 6 is_stmt 1 view .LVU1108
1041:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3522              		.loc 1 1041 27 is_stmt 0 view .LVU1109
 3523 0f96 764B     		ldr	r3, .L530+24
 3524 0f98 6268     		ldr	r2, [r4, #4]
 3525 0f9a 83F83120 		strb	r2, [r3, #49]
 3526              		.loc 1 1594 1 view .LVU1110
 3527 0f9e 38BD     		pop	{r3, r4, r5, pc}
 3528              	.L434:
1071:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3529              		.loc 1 1071 6 is_stmt 1 view .LVU1111
1071:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3530              		.loc 1 1071 27 is_stmt 0 view .LVU1112
 3531 0fa0 734B     		ldr	r3, .L530+24
 3532 0fa2 6268     		ldr	r2, [r4, #4]
 3533 0fa4 83F83320 		strb	r2, [r3, #51]
 3534              		.loc 1 1594 1 view .LVU1113
 3535 0fa8 38BD     		pop	{r3, r4, r5, pc}
 3536              	.L443:
 951:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3537              		.loc 1 951 6 is_stmt 1 view .LVU1114
 951:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3538              		.loc 1 951 26 is_stmt 0 view .LVU1115
 3539 0faa 6368     		ldr	r3, [r4, #4]
 3540 0fac 704A     		ldr	r2, .L530+24
 3541 0fae 03EB8303 		add	r3, r3, r3, lsl #2
 3542 0fb2 5B00     		lsls	r3, r3, #1
 3543 0fb4 5385     		strh	r3, [r2, #42]	@ movhi
 3544              		.loc 1 1594 1 view .LVU1116
 3545 0fb6 38BD     		pop	{r3, r4, r5, pc}
 3546              	.L440:
 981:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3547              		.loc 1 981 6 is_stmt 1 view .LVU1117
 981:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3548              		.loc 1 981 27 is_stmt 0 view .LVU1118
 3549 0fb8 6D4B     		ldr	r3, .L530+24
 3550 0fba 6268     		ldr	r2, [r4, #4]
 3551 0fbc 83F82D20 		strb	r2, [r3, #45]
 3552              		.loc 1 1594 1 view .LVU1119
 3553 0fc0 38BD     		pop	{r3, r4, r5, pc}
 3554              	.L383:
1300:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3555              		.loc 1 1300 6 is_stmt 1 view .LVU1120
1300:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3556              		.loc 1 1300 59 is_stmt 0 view .LVU1121
 3557 0fc2 6368     		ldr	r3, [r4, #4]
1300:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3558              		.loc 1 1300 38 view .LVU1122
 3559 0fc4 6A4A     		ldr	r2, .L530+24
1300:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3560              		.loc 1 1300 59 view .LVU1123
 3561 0fc6 003B     		subs	r3, r3, #0
 3562 0fc8 18BF     		it	ne
 3563 0fca 0123     		movne	r3, #1
 3564 0fcc 82F84C30 		strb	r3, [r2, #76]
 3565              		.loc 1 1594 1 view .LVU1124
 3566 0fd0 38BD     		pop	{r3, r4, r5, pc}
 3567              	.L425:
1026:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3568              		.loc 1 1026 6 is_stmt 1 view .LVU1125
1026:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3569              		.loc 1 1026 27 is_stmt 0 view .LVU1126
 3570 0fd2 674B     		ldr	r3, .L530+24
 3571 0fd4 6268     		ldr	r2, [r4, #4]
 3572 0fd6 83F83020 		strb	r2, [r3, #48]
 3573              		.loc 1 1594 1 view .LVU1127
 3574 0fda 38BD     		pop	{r3, r4, r5, pc}
 3575              	.L449:
 996:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3576              		.loc 1 996 6 is_stmt 1 view .LVU1128
 996:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3577              		.loc 1 996 27 is_stmt 0 view .LVU1129
 3578 0fdc 644B     		ldr	r3, .L530+24
 3579 0fde 6268     		ldr	r2, [r4, #4]
 3580 0fe0 83F82E20 		strb	r2, [r3, #46]
 3581              		.loc 1 1594 1 view .LVU1130
 3582 0fe4 38BD     		pop	{r3, r4, r5, pc}
 3583              	.L446:
 936:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3584              		.loc 1 936 6 is_stmt 1 view .LVU1131
 936:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3585              		.loc 1 936 26 is_stmt 0 view .LVU1132
 3586 0fe6 6368     		ldr	r3, [r4, #4]
 3587 0fe8 614A     		ldr	r2, .L530+24
 3588 0fea 03EB8303 		add	r3, r3, r3, lsl #2
 3589 0fee 5B00     		lsls	r3, r3, #1
 3590 0ff0 1385     		strh	r3, [r2, #40]	@ movhi
 3591              		.loc 1 1594 1 view .LVU1133
 3592 0ff2 38BD     		pop	{r3, r4, r5, pc}
 3593              	.L452:
 966:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3594              		.loc 1 966 6 is_stmt 1 view .LVU1134
 966:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3595              		.loc 1 966 27 is_stmt 0 view .LVU1135
 3596 0ff4 5E4B     		ldr	r3, .L530+24
 3597 0ff6 6268     		ldr	r2, [r4, #4]
 3598 0ff8 83F82C20 		strb	r2, [r3, #44]
 3599              		.loc 1 1594 1 view .LVU1136
 3600 0ffc 38BD     		pop	{r3, r4, r5, pc}
 3601              	.L458:
 800:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3602              		.loc 1 800 6 is_stmt 1 view .LVU1137
 800:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3603              		.loc 1 800 43 is_stmt 0 view .LVU1138
 3604 0ffe 5C4B     		ldr	r3, .L530+24
 3605 1000 6268     		ldr	r2, [r4, #4]
 3606 1002 DA82     		strh	r2, [r3, #22]	@ movhi
 3607              		.loc 1 1594 1 view .LVU1139
 3608 1004 38BD     		pop	{r3, r4, r5, pc}
 3609              	.L437:
1056:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3610              		.loc 1 1056 6 is_stmt 1 view .LVU1140
1056:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3611              		.loc 1 1056 27 is_stmt 0 view .LVU1141
 3612 1006 5A4B     		ldr	r3, .L530+24
 3613 1008 6268     		ldr	r2, [r4, #4]
 3614 100a 83F83220 		strb	r2, [r3, #50]
 3615              		.loc 1 1594 1 view .LVU1142
 3616 100e 38BD     		pop	{r3, r4, r5, pc}
 3617              	.L428:
1011:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3618              		.loc 1 1011 6 is_stmt 1 view .LVU1143
1011:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3619              		.loc 1 1011 27 is_stmt 0 view .LVU1144
 3620 1010 574B     		ldr	r3, .L530+24
 3621 1012 6268     		ldr	r2, [r4, #4]
 3622 1014 83F82F20 		strb	r2, [r3, #47]
 3623              		.loc 1 1594 1 view .LVU1145
 3624 1018 38BD     		pop	{r3, r4, r5, pc}
 3625              	.L477:
 733:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3626              		.loc 1 733 6 is_stmt 1 view .LVU1146
 733:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3627              		.loc 1 733 70 is_stmt 0 view .LVU1147
 3628 101a 6368     		ldr	r3, [r4, #4]
 733:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3629              		.loc 1 733 42 view .LVU1148
 3630 101c 544A     		ldr	r2, .L530+24
 733:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3631              		.loc 1 733 70 view .LVU1149
 3632 101e 03EB8303 		add	r3, r3, r3, lsl #2
 3633 1022 5B00     		lsls	r3, r3, #1
 733:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3634              		.loc 1 733 42 view .LVU1150
 3635 1024 1361     		str	r3, [r2, #16]
 3636              		.loc 1 1594 1 view .LVU1151
 3637 1026 38BD     		pop	{r3, r4, r5, pc}
 3638              	.L474:
 748:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3639              		.loc 1 748 6 is_stmt 1 view .LVU1152
 748:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3640              		.loc 1 748 33 is_stmt 0 view .LVU1153
 3641 1028 514B     		ldr	r3, .L530+24
 3642 102a 6268     		ldr	r2, [r4, #4]
 3643 102c 1A75     		strb	r2, [r3, #20]
 3644              		.loc 1 1594 1 view .LVU1154
 3645 102e 38BD     		pop	{r3, r4, r5, pc}
 3646              	.L398:
 657:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3647              		.loc 1 657 6 is_stmt 1 view .LVU1155
 657:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3648              		.loc 1 657 35 is_stmt 0 view .LVU1156
 3649 1030 4F4B     		ldr	r3, .L530+24
 3650 1032 6268     		ldr	r2, [r4, #4]
 3651 1034 9A80     		strh	r2, [r3, #4]	@ movhi
 3652              		.loc 1 1594 1 view .LVU1157
 3653 1036 38BD     		pop	{r3, r4, r5, pc}
 3654              	.L505:
 815:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3655              		.loc 1 815 6 is_stmt 1 view .LVU1158
 815:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3656              		.loc 1 815 43 is_stmt 0 view .LVU1159
 3657 1038 4D4B     		ldr	r3, .L530+24
 3658 103a 6268     		ldr	r2, [r4, #4]
 3659 103c 1A83     		strh	r2, [r3, #24]	@ movhi
 3660              		.loc 1 1594 1 view .LVU1160
 3661 103e 38BD     		pop	{r3, r4, r5, pc}
 3662              	.L392:
 687:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3663              		.loc 1 687 6 is_stmt 1 view .LVU1161
 687:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3664              		.loc 1 687 33 is_stmt 0 view .LVU1162
 3665 1040 4B4B     		ldr	r3, .L530+24
 3666 1042 6268     		ldr	r2, [r4, #4]
 3667 1044 1A81     		strh	r2, [r3, #8]	@ movhi
 3668              		.loc 1 1594 1 view .LVU1163
 3669 1046 38BD     		pop	{r3, r4, r5, pc}
 3670              	.L395:
 672:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3671              		.loc 1 672 6 is_stmt 1 view .LVU1164
 672:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3672              		.loc 1 672 37 is_stmt 0 view .LVU1165
 3673 1048 494B     		ldr	r3, .L530+24
 3674 104a 6268     		ldr	r2, [r4, #4]
 3675 104c DA80     		strh	r2, [r3, #6]	@ movhi
 3676              		.loc 1 1594 1 view .LVU1166
 3677 104e 38BD     		pop	{r3, r4, r5, pc}
 3678              	.L368:
1271:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3679              		.loc 1 1271 6 is_stmt 1 view .LVU1167
1271:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3680              		.loc 1 1271 44 is_stmt 0 view .LVU1168
 3681 1050 474B     		ldr	r3, .L530+24
 3682 1052 6268     		ldr	r2, [r4, #4]
 3683 1054 A3F84820 		strh	r2, [r3, #72]	@ movhi
 3684              		.loc 1 1594 1 view .LVU1169
 3685 1058 38BD     		pop	{r3, r4, r5, pc}
 3686              	.L362:
1315:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3687              		.loc 1 1315 6 is_stmt 1 view .LVU1170
1315:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3688              		.loc 1 1315 54 is_stmt 0 view .LVU1171
 3689 105a 6368     		ldr	r3, [r4, #4]
1315:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3690              		.loc 1 1315 33 view .LVU1172
 3691 105c 444A     		ldr	r2, .L530+24
1315:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3692              		.loc 1 1315 54 view .LVU1173
 3693 105e 003B     		subs	r3, r3, #0
 3694 1060 18BF     		it	ne
 3695 1062 0123     		movne	r3, #1
 3696 1064 82F84D30 		strb	r3, [r2, #77]
 3697              		.loc 1 1594 1 view .LVU1174
 3698 1068 38BD     		pop	{r3, r4, r5, pc}
 3699              	.L365:
1285:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3700              		.loc 1 1285 6 is_stmt 1 view .LVU1175
1285:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3701              		.loc 1 1285 38 is_stmt 0 view .LVU1176
 3702 106a 414B     		ldr	r3, .L530+24
 3703 106c 6268     		ldr	r2, [r4, #4]
 3704 106e A3F84A20 		strh	r2, [r3, #74]	@ movhi
 3705              		.loc 1 1594 1 view .LVU1177
 3706 1072 38BD     		pop	{r3, r4, r5, pc}
 3707              	.L347:
1352:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3708              		.loc 1 1352 6 is_stmt 1 view .LVU1178
1352:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3709              		.loc 1 1352 36 is_stmt 0 view .LVU1179
 3710 1074 6368     		ldr	r3, [r4, #4]
 3711 1076 3E4A     		ldr	r2, .L530+24
 3712 1078 03EB8303 		add	r3, r3, r3, lsl #2
 3713 107c 5B00     		lsls	r3, r3, #1
 3714 107e A2F84E30 		strh	r3, [r2, #78]	@ movhi
 3715              		.loc 1 1594 1 view .LVU1180
 3716 1082 38BD     		pop	{r3, r4, r5, pc}
 3717              	.L326:
1582:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3718              		.loc 1 1582 6 is_stmt 1 view .LVU1181
1582:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3719              		.loc 1 1582 62 is_stmt 0 view .LVU1182
 3720 1084 6368     		ldr	r3, [r4, #4]
 3721 1086 002B     		cmp	r3, #0
 3722 1088 40F01B83 		bne	.L316
 3723              		.loc 1 1594 1 view .LVU1183
 3724 108c BDE83840 		pop	{r3, r4, r5, lr}
 3725              	.LCFI123:
 3726              		.cfi_remember_state
 3727              		.cfi_restore 14
 3728              		.cfi_restore 5
 3729              		.cfi_restore 4
 3730              		.cfi_restore 3
 3731              		.cfi_def_cfa_offset 0
1582:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3732              		.loc 1 1582 41 view .LVU1184
 3733 1090 FFF7FEBF 		b	tmcm_disableDriver
 3734              	.LVL240:
 3735              	.L374:
 3736              	.LCFI124:
 3737              		.cfi_restore_state
1169:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3738              		.loc 1 1169 6 is_stmt 1 view .LVU1185
1169:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3739              		.loc 1 1169 28 is_stmt 0 view .LVU1186
 3740 1094 364B     		ldr	r3, .L530+24
 3741 1096 6268     		ldr	r2, [r4, #4]
 3742 1098 83F83D20 		strb	r2, [r3, #61]
 3743              		.loc 1 1594 1 view .LVU1187
 3744 109c 38BD     		pop	{r3, r4, r5, pc}
 3745              	.L401:
 642:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3746              		.loc 1 642 6 is_stmt 1 view .LVU1188
 642:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3747              		.loc 1 642 34 is_stmt 0 view .LVU1189
 3748 109e 344B     		ldr	r3, .L530+24
 3749 10a0 6268     		ldr	r2, [r4, #4]
 3750 10a2 5A80     		strh	r2, [r3, #2]	@ movhi
 3751              		.loc 1 1594 1 view .LVU1190
 3752 10a4 38BD     		pop	{r3, r4, r5, pc}
 3753              	.L410:
 921:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3754              		.loc 1 921 6 is_stmt 1 view .LVU1191
 921:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3755              		.loc 1 921 26 is_stmt 0 view .LVU1192
 3756 10a6 6368     		ldr	r3, [r4, #4]
 3757 10a8 314A     		ldr	r2, .L530+24
 3758 10aa 03EB8303 		add	r3, r3, r3, lsl #2
 3759 10ae 5B00     		lsls	r3, r3, #1
 3760 10b0 D384     		strh	r3, [r2, #38]	@ movhi
 3761              		.loc 1 1594 1 view .LVU1193
 3762 10b2 38BD     		pop	{r3, r4, r5, pc}
 3763              	.L413:
 891:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3764              		.loc 1 891 6 is_stmt 1 view .LVU1194
 891:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3765              		.loc 1 891 26 is_stmt 0 view .LVU1195
 3766 10b4 6368     		ldr	r3, [r4, #4]
 3767 10b6 2E4A     		ldr	r2, .L530+24
 3768 10b8 03EB8303 		add	r3, r3, r3, lsl #2
 3769 10bc 5B00     		lsls	r3, r3, #1
 3770 10be 5384     		strh	r3, [r2, #34]	@ movhi
 3771              		.loc 1 1594 1 view .LVU1196
 3772 10c0 38BD     		pop	{r3, r4, r5, pc}
 3773              	.L471:
 763:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3774              		.loc 1 763 6 is_stmt 1 view .LVU1197
 763:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3775              		.loc 1 763 35 is_stmt 0 view .LVU1198
 3776 10c2 2B4B     		ldr	r3, .L530+24
 3777 10c4 6268     		ldr	r2, [r4, #4]
 3778 10c6 5A75     		strb	r2, [r3, #21]
 3779              		.loc 1 1594 1 view .LVU1199
 3780 10c8 38BD     		pop	{r3, r4, r5, pc}
 3781              	.L489:
 413:TMCL.c        **** 						motorConfig.openLoopCurrent = ActualCommand.Value.Int32;
 3782              		.loc 1 413 6 is_stmt 1 view .LVU1200
 413:TMCL.c        **** 						motorConfig.openLoopCurrent = ActualCommand.Value.Int32;
 3783              		.loc 1 413 8 is_stmt 0 view .LVU1201
 3784 10ca 47F23052 		movw	r2, #30000
 413:TMCL.c        **** 						motorConfig.openLoopCurrent = ActualCommand.Value.Int32;
 3785              		.loc 1 413 42 view .LVU1202
 3786 10ce 6368     		ldr	r3, [r4, #4]
 413:TMCL.c        **** 						motorConfig.openLoopCurrent = ActualCommand.Value.Int32;
 3787              		.loc 1 413 8 view .LVU1203
 3788 10d0 9342     		cmp	r3, r2
 3789 10d2 3FF651AF 		bhi	.L125
 414:TMCL.c        **** 					else
 3790              		.loc 1 414 7 is_stmt 1 view .LVU1204
 414:TMCL.c        **** 					else
 3791              		.loc 1 414 35 is_stmt 0 view .LVU1205
 3792 10d6 264A     		ldr	r2, .L530+24
 3793 10d8 1366     		str	r3, [r2, #96]
 3794              		.loc 1 1594 1 view .LVU1206
 3795 10da 38BD     		pop	{r3, r4, r5, pc}
 3796              	.L483:
 624:TMCL.c        **** 						motorConfig.pedalPulsesPerRotation = ActualCommand.Value.Int32;
 3797              		.loc 1 624 6 is_stmt 1 view .LVU1207
 624:TMCL.c        **** 						motorConfig.pedalPulsesPerRotation = ActualCommand.Value.Int32;
 3798              		.loc 1 624 30 is_stmt 0 view .LVU1208
 3799 10dc 6368     		ldr	r3, [r4, #4]
 624:TMCL.c        **** 						motorConfig.pedalPulsesPerRotation = ActualCommand.Value.Int32;
 3800              		.loc 1 624 9 view .LVU1209
 3801 10de 202B     		cmp	r3, #32
 3802 10e0 3FF64AAF 		bhi	.L125
 625:TMCL.c        **** 					else
 3803              		.loc 1 625 7 is_stmt 1 view .LVU1210
 625:TMCL.c        **** 					else
 3804              		.loc 1 625 42 is_stmt 0 view .LVU1211
 3805 10e4 224A     		ldr	r2, .L530+24
 3806 10e6 1380     		strh	r3, [r2]	@ movhi
 3807              		.loc 1 1594 1 view .LVU1212
 3808 10e8 38BD     		pop	{r3, r4, r5, pc}
 3809              	.L502:
 831:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3810              		.loc 1 831 6 is_stmt 1 view .LVU1213
 831:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3811              		.loc 1 831 26 is_stmt 0 view .LVU1214
 3812 10ea 6368     		ldr	r3, [r4, #4]
 3813 10ec 204A     		ldr	r2, .L530+24
 3814 10ee 03EB8303 		add	r3, r3, r3, lsl #2
 3815 10f2 5B00     		lsls	r3, r3, #1
 3816 10f4 5383     		strh	r3, [r2, #26]	@ movhi
 3817              		.loc 1 1594 1 view .LVU1215
 3818 10f6 38BD     		pop	{r3, r4, r5, pc}
 3819              	.L455:
1086:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3820              		.loc 1 1086 6 is_stmt 1 view .LVU1216
1086:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3821              		.loc 1 1086 27 is_stmt 0 view .LVU1217
 3822 10f8 1D4B     		ldr	r3, .L530+24
 3823 10fa 6268     		ldr	r2, [r4, #4]
 3824 10fc 83F83420 		strb	r2, [r3, #52]
 3825              		.loc 1 1594 1 view .LVU1218
 3826 1100 38BD     		pop	{r3, r4, r5, pc}
 3827              	.L480:
 718:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3828              		.loc 1 718 6 is_stmt 1 view .LVU1219
 718:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3829              		.loc 1 718 37 is_stmt 0 view .LVU1220
 3830 1102 1B4B     		ldr	r3, .L530+24
 3831 1104 6268     		ldr	r2, [r4, #4]
 3832 1106 DA60     		str	r2, [r3, #12]
 3833              		.loc 1 1594 1 view .LVU1221
 3834 1108 38BD     		pop	{r3, r4, r5, pc}
 3835              	.L465:
 861:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3836              		.loc 1 861 6 is_stmt 1 view .LVU1222
 861:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3837              		.loc 1 861 26 is_stmt 0 view .LVU1223
 3838 110a 6368     		ldr	r3, [r4, #4]
 3839 110c 184A     		ldr	r2, .L530+24
 3840 110e 03EB8303 		add	r3, r3, r3, lsl #2
 3841 1112 5B00     		lsls	r3, r3, #1
 3842 1114 D383     		strh	r3, [r2, #30]	@ movhi
 3843              		.loc 1 1594 1 view .LVU1224
 3844 1116 38BD     		pop	{r3, r4, r5, pc}
 3845              	.L486:
 906:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3846              		.loc 1 906 6 is_stmt 1 view .LVU1225
 906:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3847              		.loc 1 906 26 is_stmt 0 view .LVU1226
 3848 1118 6368     		ldr	r3, [r4, #4]
 3849 111a 154A     		ldr	r2, .L530+24
 3850 111c 03EB8303 		add	r3, r3, r3, lsl #2
 3851 1120 5B00     		lsls	r3, r3, #1
 3852 1122 9384     		strh	r3, [r2, #36]	@ movhi
 3853              		.loc 1 1594 1 view .LVU1227
 3854 1124 38BD     		pop	{r3, r4, r5, pc}
 3855              	.L508:
 846:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3856              		.loc 1 846 6 is_stmt 1 view .LVU1228
 846:TMCL.c        **** 				} else if (command == TMCL_GAP)
 3857              		.loc 1 846 26 is_stmt 0 view .LVU1229
 3858 1126 6368     		ldr	r3, [r4, #4]
 3859 1128 114A     		ldr	r2, .L530+24
 3860 112a 03EB8303 		add	r3, r3, r3, lsl #2
 3861 112e 5B00     		lsls	r3, r3, #1
 3862 1130 9383     		strh	r3, [r2, #28]	@ movhi
 3863              		.loc 1 1594 1 view .LVU1230
 3864 1132 38BD     		pop	{r3, r4, r5, pc}
 3865              	.L380:
1183:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3866              		.loc 1 1183 6 is_stmt 1 view .LVU1231
1183:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3867              		.loc 1 1183 32 is_stmt 0 view .LVU1232
 3868 1134 0E4B     		ldr	r3, .L530+24
 3869 1136 6268     		ldr	r2, [r4, #4]
 3870 1138 DA87     		strh	r2, [r3, #62]	@ movhi
 3871              		.loc 1 1594 1 view .LVU1233
 3872 113a 38BD     		pop	{r3, r4, r5, pc}
 3873              	.L371:
1197:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3874              		.loc 1 1197 6 is_stmt 1 view .LVU1234
1197:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 3875              		.loc 1 1197 41 is_stmt 0 view .LVU1235
 3876 113c 0C4B     		ldr	r3, .L530+24
 3877 113e 6268     		ldr	r2, [r4, #4]
 3878 1140 83F84020 		strb	r2, [r3, #64]
 3879              		.loc 1 1594 1 view .LVU1236
 3880 1144 38BD     		pop	{r3, r4, r5, pc}
 3881              	.L345:
1371:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3882              		.loc 1 1371 6 is_stmt 1 view .LVU1237
1371:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3883              		.loc 1 1371 43 is_stmt 0 view .LVU1238
 3884 1146 0A4B     		ldr	r3, .L530+24
1371:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3885              		.loc 1 1371 61 view .LVU1239
 3886 1148 0B4A     		ldr	r2, .L530+32
 3887 114a B3F85030 		ldrh	r3, [r3, #80]
 3888 114e A2FB0323 		umull	r2, r3, r2, r3
 3889 1152 DB08     		lsrs	r3, r3, #3
 3890 1154 E360     		str	r3, [r4, #12]
 3891              		.loc 1 1594 1 view .LVU1240
 3892 1156 38BD     		pop	{r3, r4, r5, pc}
 3893              	.L531:
 3894              		.align	2
 3895              	.L530:
 3896 1158 1A000000 		.word	motorConfig+26
 3897 115c 18000000 		.word	motorConfig+24
 3898 1160 1C000000 		.word	motorConfig+28
 3899 1164 88000000 		.word	motorConfig+136
 3900 1168 6A000000 		.word	motorConfig+106
 3901 116c 64000000 		.word	motorConfig+100
 3902 1170 00000000 		.word	motorConfig
 3903 1174 801A0600 		.word	400000
 3904 1178 CDCCCCCC 		.word	-858993459
 3905              	.L512:
 473:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3906              		.loc 1 473 6 is_stmt 1 view .LVU1241
 473:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3907              		.loc 1 473 43 is_stmt 0 view .LVU1242
 3908 117c A54B     		ldr	r3, .L532
 3909 117e B3F88830 		ldrh	r3, [r3, #136]
 3910 1182 E360     		str	r3, [r4, #12]
 3911              		.loc 1 1594 1 view .LVU1243
 3912 1184 38BD     		pop	{r3, r4, r5, pc}
 3913              	.L387:
1142:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3914              		.loc 1 1142 6 is_stmt 1 view .LVU1244
1142:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3915              		.loc 1 1142 43 is_stmt 0 view .LVU1245
 3916 1186 A34B     		ldr	r3, .L532
1142:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3917              		.loc 1 1142 30 view .LVU1246
 3918 1188 9B6B     		ldr	r3, [r3, #56]
 3919 118a E360     		str	r3, [r4, #12]
 3920              		.loc 1 1594 1 view .LVU1247
 3921 118c 38BD     		pop	{r3, r4, r5, pc}
 3922              	.L408:
 595:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3923              		.loc 1 595 6 is_stmt 1 view .LVU1248
 595:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3924              		.loc 1 595 43 is_stmt 0 view .LVU1249
 3925 118e A14B     		ldr	r3, .L532
 595:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3926              		.loc 1 595 30 view .LVU1250
 3927 1190 DB6D     		ldr	r3, [r3, #92]
 3928 1192 E360     		str	r3, [r4, #12]
 3929              		.loc 1 1594 1 view .LVU1251
 3930 1194 38BD     		pop	{r3, r4, r5, pc}
 3931              	.L462:
 581:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3932              		.loc 1 581 6 is_stmt 1 view .LVU1252
 581:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3933              		.loc 1 581 43 is_stmt 0 view .LVU1253
 3934 1196 9F4B     		ldr	r3, .L532
 581:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3935              		.loc 1 581 30 view .LVU1254
 3936 1198 9B6D     		ldr	r3, [r3, #88]
 3937 119a E360     		str	r3, [r4, #12]
 3938              		.loc 1 1594 1 view .LVU1255
 3939 119c 38BD     		pop	{r3, r4, r5, pc}
 3940              	.L342:
1387:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3941              		.loc 1 1387 6 is_stmt 1 view .LVU1256
1387:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3942              		.loc 1 1387 43 is_stmt 0 view .LVU1257
 3943 119e 9D4B     		ldr	r3, .L532
1387:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3944              		.loc 1 1387 57 view .LVU1258
 3945 11a0 9D4A     		ldr	r2, .L532+4
 3946 11a2 B3F85230 		ldrh	r3, [r3, #82]
 3947 11a6 A2FB0323 		umull	r2, r3, r2, r3
 3948 11aa DB08     		lsrs	r3, r3, #3
 3949 11ac E360     		str	r3, [r4, #12]
 3950              		.loc 1 1594 1 view .LVU1259
 3951 11ae 38BD     		pop	{r3, r4, r5, pc}
 3952              	.L339:
1403:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3953              		.loc 1 1403 6 is_stmt 1 view .LVU1260
1403:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3954              		.loc 1 1403 43 is_stmt 0 view .LVU1261
 3955 11b0 984B     		ldr	r3, .L532
 3956 11b2 B3F85430 		ldrh	r3, [r3, #84]
 3957 11b6 E360     		str	r3, [r4, #12]
 3958              		.loc 1 1594 1 view .LVU1262
 3959 11b8 38BD     		pop	{r3, r4, r5, pc}
 3960              	.L357:
1229:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3961              		.loc 1 1229 6 is_stmt 1 view .LVU1263
1229:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3962              		.loc 1 1229 43 is_stmt 0 view .LVU1264
 3963 11ba 964B     		ldr	r3, .L532
 3964 11bc 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 3965 11c0 E360     		str	r3, [r4, #12]
 3966              		.loc 1 1594 1 view .LVU1265
 3967 11c2 38BD     		pop	{r3, r4, r5, pc}
 3968              	.L354:
1244:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3969              		.loc 1 1244 6 is_stmt 1 view .LVU1266
1244:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3970              		.loc 1 1244 43 is_stmt 0 view .LVU1267
 3971 11c4 934B     		ldr	r3, .L532
 3972 11c6 93F84530 		ldrb	r3, [r3, #69]	@ zero_extendqisi2
 3973 11ca E360     		str	r3, [r4, #12]
 3974              		.loc 1 1594 1 view .LVU1268
 3975 11cc 38BD     		pop	{r3, r4, r5, pc}
 3976              	.L432:
1106:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3977              		.loc 1 1106 6 is_stmt 1 view .LVU1269
1106:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3978              		.loc 1 1106 43 is_stmt 0 view .LVU1270
 3979 11ce 914B     		ldr	r3, .L532
 3980 11d0 DB8E     		ldrh	r3, [r3, #54]
 3981 11d2 E360     		str	r3, [r4, #12]
 3982              		.loc 1 1594 1 view .LVU1271
 3983 11d4 38BD     		pop	{r3, r4, r5, pc}
 3984              	.L494:
 525:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3985              		.loc 1 525 6 is_stmt 1 view .LVU1272
 525:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3986              		.loc 1 525 43 is_stmt 0 view .LVU1273
 3987 11d6 8F4B     		ldr	r3, .L532
 3988 11d8 B3F88E30 		ldrh	r3, [r3, #142]
 3989 11dc E360     		str	r3, [r4, #12]
 3990              		.loc 1 1594 1 view .LVU1274
 3991 11de 38BD     		pop	{r3, r4, r5, pc}
 3992              	.L497:
 508:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3993              		.loc 1 508 6 is_stmt 1 view .LVU1275
 508:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 3994              		.loc 1 508 43 is_stmt 0 view .LVU1276
 3995 11e0 8C4B     		ldr	r3, .L532
 3996 11e2 B3F88C30 		ldrh	r3, [r3, #140]
 3997 11e6 E360     		str	r3, [r4, #12]
 3998              		.loc 1 1594 1 view .LVU1277
 3999 11e8 38BD     		pop	{r3, r4, r5, pc}
 4000              	.L420:
 491:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4001              		.loc 1 491 6 is_stmt 1 view .LVU1278
 491:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4002              		.loc 1 491 43 is_stmt 0 view .LVU1279
 4003 11ea 8A4B     		ldr	r3, .L532
 4004 11ec B3F88A30 		ldrh	r3, [r3, #138]
 4005 11f0 E360     		str	r3, [r4, #12]
 4006              		.loc 1 1594 1 view .LVU1280
 4007 11f2 38BD     		pop	{r3, r4, r5, pc}
 4008              	.L405:
 609:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4009              		.loc 1 609 6 is_stmt 1 view .LVU1281
 609:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4010              		.loc 1 609 43 is_stmt 0 view .LVU1282
 4011 11f4 874B     		ldr	r3, .L532
 609:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4012              		.loc 1 609 63 view .LVU1283
 4013 11f6 93F87B30 		ldrb	r3, [r3, #123]	@ zero_extendqisi2
 4014 11fa 003B     		subs	r3, r3, #0
 4015 11fc 18BF     		it	ne
 4016 11fe 0123     		movne	r3, #1
 609:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4017              		.loc 1 609 30 view .LVU1284
 4018 1200 E360     		str	r3, [r4, #12]
 4019              		.loc 1 1594 1 view .LVU1285
 4020 1202 38BD     		pop	{r3, r4, r5, pc}
 4021              	.L390:
 706:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4022              		.loc 1 706 6 is_stmt 1 view .LVU1286
 706:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4023              		.loc 1 706 43 is_stmt 0 view .LVU1287
 4024 1204 834B     		ldr	r3, .L532
 4025 1206 5B89     		ldrh	r3, [r3, #10]
 4026 1208 E360     		str	r3, [r4, #12]
 4027              		.loc 1 1594 1 view .LVU1288
 4028 120a 38BD     		pop	{r3, r4, r5, pc}
 4029              	.L360:
1214:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4030              		.loc 1 1214 6 is_stmt 1 view .LVU1289
1214:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4031              		.loc 1 1214 43 is_stmt 0 view .LVU1290
 4032 120c 814B     		ldr	r3, .L532
 4033 120e B3F94230 		ldrsh	r3, [r3, #66]
 4034 1212 E360     		str	r3, [r4, #12]
 4035              		.loc 1 1594 1 view .LVU1291
 4036 1214 38BD     		pop	{r3, r4, r5, pc}
 4037              	.L351:
1259:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4038              		.loc 1 1259 6 is_stmt 1 view .LVU1292
1259:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4039              		.loc 1 1259 43 is_stmt 0 view .LVU1293
 4040 1216 7F4B     		ldr	r3, .L532
 4041 1218 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 4042 121c E360     		str	r3, [r4, #12]
 4043              		.loc 1 1594 1 view .LVU1294
 4044 121e 38BD     		pop	{r3, r4, r5, pc}
 4045              	.L399:
 660:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4046              		.loc 1 660 6 is_stmt 1 view .LVU1295
 660:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4047              		.loc 1 660 43 is_stmt 0 view .LVU1296
 4048 1220 7C4B     		ldr	r3, .L532
 4049 1222 B3F90430 		ldrsh	r3, [r3, #4]
 4050 1226 E360     		str	r3, [r4, #12]
 4051              		.loc 1 1594 1 view .LVU1297
 4052 1228 38BD     		pop	{r3, r4, r5, pc}
 4053              	.L506:
 818:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4054              		.loc 1 818 6 is_stmt 1 view .LVU1298
 818:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4055              		.loc 1 818 43 is_stmt 0 view .LVU1299
 4056 122a 7A4B     		ldr	r3, .L532
 4057 122c 1B8B     		ldrh	r3, [r3, #24]
 4058 122e E360     		str	r3, [r4, #12]
 4059              		.loc 1 1594 1 view .LVU1300
 4060 1230 38BD     		pop	{r3, r4, r5, pc}
 4061              	.L417:
 879:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4062              		.loc 1 879 6 is_stmt 1 view .LVU1301
 879:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4063              		.loc 1 879 43 is_stmt 0 view .LVU1302
 4064 1232 784B     		ldr	r3, .L532
 879:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4065              		.loc 1 879 52 view .LVU1303
 4066 1234 784A     		ldr	r2, .L532+4
 4067 1236 1B8C     		ldrh	r3, [r3, #32]
 4068 1238 A2FB0323 		umull	r2, r3, r2, r3
 4069 123c DB08     		lsrs	r3, r3, #3
 4070 123e E360     		str	r3, [r4, #12]
 4071              		.loc 1 1594 1 view .LVU1304
 4072 1240 38BD     		pop	{r3, r4, r5, pc}
 4073              	.L411:
 924:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4074              		.loc 1 924 6 is_stmt 1 view .LVU1305
 924:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4075              		.loc 1 924 43 is_stmt 0 view .LVU1306
 4076 1242 744B     		ldr	r3, .L532
 924:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4077              		.loc 1 924 52 view .LVU1307
 4078 1244 744A     		ldr	r2, .L532+4
 4079 1246 DB8C     		ldrh	r3, [r3, #38]
 4080 1248 A2FB0323 		umull	r2, r3, r2, r3
 4081 124c DB08     		lsrs	r3, r3, #3
 4082 124e E360     		str	r3, [r4, #12]
 4083              		.loc 1 1594 1 view .LVU1308
 4084 1250 38BD     		pop	{r3, r4, r5, pc}
 4085              	.L414:
 894:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4086              		.loc 1 894 6 is_stmt 1 view .LVU1309
 894:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4087              		.loc 1 894 43 is_stmt 0 view .LVU1310
 4088 1252 704B     		ldr	r3, .L532
 894:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4089              		.loc 1 894 52 view .LVU1311
 4090 1254 704A     		ldr	r2, .L532+4
 4091 1256 5B8C     		ldrh	r3, [r3, #34]
 4092 1258 A2FB0323 		umull	r2, r3, r2, r3
 4093 125c DB08     		lsrs	r3, r3, #3
 4094 125e E360     		str	r3, [r4, #12]
 4095              		.loc 1 1594 1 view .LVU1312
 4096 1260 38BD     		pop	{r3, r4, r5, pc}
 4097              	.L484:
 630:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4098              		.loc 1 630 6 is_stmt 1 view .LVU1313
 630:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4099              		.loc 1 630 43 is_stmt 0 view .LVU1314
 4100 1262 6C4B     		ldr	r3, .L532
 4101 1264 1B88     		ldrh	r3, [r3]
 4102 1266 E360     		str	r3, [r4, #12]
 4103              		.loc 1 1594 1 view .LVU1315
 4104 1268 38BD     		pop	{r3, r4, r5, pc}
 4105              	.L503:
 834:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4106              		.loc 1 834 6 is_stmt 1 view .LVU1316
 834:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4107              		.loc 1 834 43 is_stmt 0 view .LVU1317
 4108 126a 6A4B     		ldr	r3, .L532
 834:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4109              		.loc 1 834 52 view .LVU1318
 4110 126c 6A4A     		ldr	r2, .L532+4
 4111 126e 5B8B     		ldrh	r3, [r3, #26]
 4112 1270 A2FB0323 		umull	r2, r3, r2, r3
 4113 1274 DB08     		lsrs	r3, r3, #3
 4114 1276 E360     		str	r3, [r4, #12]
 4115              		.loc 1 1594 1 view .LVU1319
 4116 1278 38BD     		pop	{r3, r4, r5, pc}
 4117              	.L472:
 766:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4118              		.loc 1 766 6 is_stmt 1 view .LVU1320
 766:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4119              		.loc 1 766 43 is_stmt 0 view .LVU1321
 4120 127a 664B     		ldr	r3, .L532
 4121 127c 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 4122 127e E360     		str	r3, [r4, #12]
 4123              		.loc 1 1594 1 view .LVU1322
 4124 1280 38BD     		pop	{r3, r4, r5, pc}
 4125              	.L490:
 418:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4126              		.loc 1 418 6 is_stmt 1 view .LVU1323
 418:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4127              		.loc 1 418 43 is_stmt 0 view .LVU1324
 4128 1282 644B     		ldr	r3, .L532
 418:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4129              		.loc 1 418 30 view .LVU1325
 4130 1284 1B6E     		ldr	r3, [r3, #96]
 4131 1286 E360     		str	r3, [r4, #12]
 4132              		.loc 1 1594 1 view .LVU1326
 4133 1288 38BD     		pop	{r3, r4, r5, pc}
 4134              	.L402:
 645:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4135              		.loc 1 645 6 is_stmt 1 view .LVU1327
 645:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4136              		.loc 1 645 43 is_stmt 0 view .LVU1328
 4137 128a 624B     		ldr	r3, .L532
 4138 128c 5B88     		ldrh	r3, [r3, #2]
 4139 128e E360     		str	r3, [r4, #12]
 4140              		.loc 1 1594 1 view .LVU1329
 4141 1290 38BD     		pop	{r3, r4, r5, pc}
 4142              	.L372:
1199:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4143              		.loc 1 1199 6 is_stmt 1 view .LVU1330
1199:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4144              		.loc 1 1199 43 is_stmt 0 view .LVU1331
 4145 1292 604B     		ldr	r3, .L532
 4146 1294 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 4147 1298 E360     		str	r3, [r4, #12]
 4148              		.loc 1 1594 1 view .LVU1332
 4149 129a 38BD     		pop	{r3, r4, r5, pc}
 4150              	.L456:
1089:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4151              		.loc 1 1089 6 is_stmt 1 view .LVU1333
1089:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4152              		.loc 1 1089 43 is_stmt 0 view .LVU1334
 4153 129c 5D4B     		ldr	r3, .L532
 4154 129e 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 4155 12a2 E360     		str	r3, [r4, #12]
 4156              		.loc 1 1594 1 view .LVU1335
 4157 12a4 38BD     		pop	{r3, r4, r5, pc}
 4158              	.L481:
 721:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4159              		.loc 1 721 6 is_stmt 1 view .LVU1336
 721:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4160              		.loc 1 721 43 is_stmt 0 view .LVU1337
 4161 12a6 5B4B     		ldr	r3, .L532
 721:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4162              		.loc 1 721 30 view .LVU1338
 4163 12a8 DB68     		ldr	r3, [r3, #12]
 4164 12aa E360     		str	r3, [r4, #12]
 4165              		.loc 1 1594 1 view .LVU1339
 4166 12ac 38BD     		pop	{r3, r4, r5, pc}
 4167              	.L478:
 736:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4168              		.loc 1 736 6 is_stmt 1 view .LVU1340
 736:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4169              		.loc 1 736 43 is_stmt 0 view .LVU1341
 4170 12ae 594B     		ldr	r3, .L532
 736:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4171              		.loc 1 736 68 view .LVU1342
 4172 12b0 594A     		ldr	r2, .L532+4
 4173 12b2 1B69     		ldr	r3, [r3, #16]
 4174 12b4 A2FB0323 		umull	r2, r3, r2, r3
 4175 12b8 DB08     		lsrs	r3, r3, #3
 736:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4176              		.loc 1 736 30 view .LVU1343
 4177 12ba E360     		str	r3, [r4, #12]
 4178              		.loc 1 1594 1 view .LVU1344
 4179 12bc 38BD     		pop	{r3, r4, r5, pc}
 4180              	.L475:
 751:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4181              		.loc 1 751 6 is_stmt 1 view .LVU1345
 751:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4182              		.loc 1 751 43 is_stmt 0 view .LVU1346
 4183 12be 554B     		ldr	r3, .L532
 4184 12c0 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 4185 12c2 E360     		str	r3, [r4, #12]
 4186              		.loc 1 1594 1 view .LVU1347
 4187 12c4 38BD     		pop	{r3, r4, r5, pc}
 4188              	.L450:
 999:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4189              		.loc 1 999 6 is_stmt 1 view .LVU1348
 999:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4190              		.loc 1 999 43 is_stmt 0 view .LVU1349
 4191 12c6 534B     		ldr	r3, .L532
 4192 12c8 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 4193 12cc E360     		str	r3, [r4, #12]
 4194              		.loc 1 1594 1 view .LVU1350
 4195 12ce 38BD     		pop	{r3, r4, r5, pc}
 4196              	.L447:
 939:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4197              		.loc 1 939 6 is_stmt 1 view .LVU1351
 939:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4198              		.loc 1 939 43 is_stmt 0 view .LVU1352
 4199 12d0 504B     		ldr	r3, .L532
 939:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4200              		.loc 1 939 52 view .LVU1353
 4201 12d2 514A     		ldr	r2, .L532+4
 4202 12d4 1B8D     		ldrh	r3, [r3, #40]
 4203 12d6 A2FB0323 		umull	r2, r3, r2, r3
 4204 12da DB08     		lsrs	r3, r3, #3
 4205 12dc E360     		str	r3, [r4, #12]
 4206              		.loc 1 1594 1 view .LVU1354
 4207 12de 38BD     		pop	{r3, r4, r5, pc}
 4208              	.L438:
1059:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4209              		.loc 1 1059 6 is_stmt 1 view .LVU1355
1059:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4210              		.loc 1 1059 43 is_stmt 0 view .LVU1356
 4211 12e0 4C4B     		ldr	r3, .L532
 4212 12e2 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4213 12e6 E360     		str	r3, [r4, #12]
 4214              		.loc 1 1594 1 view .LVU1357
 4215 12e8 38BD     		pop	{r3, r4, r5, pc}
 4216              	.L429:
1014:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4217              		.loc 1 1014 6 is_stmt 1 view .LVU1358
1014:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4218              		.loc 1 1014 43 is_stmt 0 view .LVU1359
 4219 12ea 4A4B     		ldr	r3, .L532
 4220 12ec 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 4221 12f0 E360     		str	r3, [r4, #12]
 4222              		.loc 1 1594 1 view .LVU1360
 4223 12f2 38BD     		pop	{r3, r4, r5, pc}
 4224              	.L453:
 969:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4225              		.loc 1 969 6 is_stmt 1 view .LVU1361
 969:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4226              		.loc 1 969 43 is_stmt 0 view .LVU1362
 4227 12f4 474B     		ldr	r3, .L532
 4228 12f6 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 4229 12fa E360     		str	r3, [r4, #12]
 4230              		.loc 1 1594 1 view .LVU1363
 4231 12fc 38BD     		pop	{r3, r4, r5, pc}
 4232              	.L459:
 803:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4233              		.loc 1 803 6 is_stmt 1 view .LVU1364
 803:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4234              		.loc 1 803 43 is_stmt 0 view .LVU1365
 4235 12fe 454B     		ldr	r3, .L532
 4236 1300 DB8A     		ldrh	r3, [r3, #22]
 4237 1302 E360     		str	r3, [r4, #12]
 4238              		.loc 1 1594 1 view .LVU1366
 4239 1304 38BD     		pop	{r3, r4, r5, pc}
 4240              	.L423:
1044:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4241              		.loc 1 1044 6 is_stmt 1 view .LVU1367
1044:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4242              		.loc 1 1044 43 is_stmt 0 view .LVU1368
 4243 1306 434B     		ldr	r3, .L532
 4244 1308 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 4245 130c E360     		str	r3, [r4, #12]
 4246              		.loc 1 1594 1 view .LVU1369
 4247 130e 38BD     		pop	{r3, r4, r5, pc}
 4248              	.L435:
1074:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4249              		.loc 1 1074 6 is_stmt 1 view .LVU1370
1074:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4250              		.loc 1 1074 43 is_stmt 0 view .LVU1371
 4251 1310 404B     		ldr	r3, .L532
 4252 1312 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 4253 1316 E360     		str	r3, [r4, #12]
 4254              		.loc 1 1594 1 view .LVU1372
 4255 1318 38BD     		pop	{r3, r4, r5, pc}
 4256              	.L444:
 954:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4257              		.loc 1 954 6 is_stmt 1 view .LVU1373
 954:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4258              		.loc 1 954 43 is_stmt 0 view .LVU1374
 4259 131a 3E4B     		ldr	r3, .L532
 954:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4260              		.loc 1 954 52 view .LVU1375
 4261 131c 3E4A     		ldr	r2, .L532+4
 4262 131e 5B8D     		ldrh	r3, [r3, #42]
 4263 1320 A2FB0323 		umull	r2, r3, r2, r3
 4264 1324 DB08     		lsrs	r3, r3, #3
 4265 1326 E360     		str	r3, [r4, #12]
 4266              		.loc 1 1594 1 view .LVU1376
 4267 1328 38BD     		pop	{r3, r4, r5, pc}
 4268              	.L441:
 984:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4269              		.loc 1 984 6 is_stmt 1 view .LVU1377
 984:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4270              		.loc 1 984 43 is_stmt 0 view .LVU1378
 4271 132a 3A4B     		ldr	r3, .L532
 4272 132c 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 4273 1330 E360     		str	r3, [r4, #12]
 4274              		.loc 1 1594 1 view .LVU1379
 4275 1332 38BD     		pop	{r3, r4, r5, pc}
 4276              	.L384:
1303:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4277              		.loc 1 1303 6 is_stmt 1 view .LVU1380
1303:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4278              		.loc 1 1303 43 is_stmt 0 view .LVU1381
 4279 1334 374B     		ldr	r3, .L532
 4280 1336 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 4281 133a E360     		str	r3, [r4, #12]
 4282              		.loc 1 1594 1 view .LVU1382
 4283 133c 38BD     		pop	{r3, r4, r5, pc}
 4284              	.L426:
1029:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4285              		.loc 1 1029 6 is_stmt 1 view .LVU1383
1029:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4286              		.loc 1 1029 43 is_stmt 0 view .LVU1384
 4287 133e 354B     		ldr	r3, .L532
 4288 1340 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4289 1344 E360     		str	r3, [r4, #12]
 4290              		.loc 1 1594 1 view .LVU1385
 4291 1346 38BD     		pop	{r3, r4, r5, pc}
 4292              	.L369:
1273:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4293              		.loc 1 1273 6 is_stmt 1 view .LVU1386
1273:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4294              		.loc 1 1273 43 is_stmt 0 view .LVU1387
 4295 1348 324B     		ldr	r3, .L532
 4296 134a B3F84830 		ldrh	r3, [r3, #72]
 4297 134e E360     		str	r3, [r4, #12]
 4298              		.loc 1 1594 1 view .LVU1388
 4299 1350 38BD     		pop	{r3, r4, r5, pc}
 4300              	.L363:
1318:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4301              		.loc 1 1318 6 is_stmt 1 view .LVU1389
1318:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4302              		.loc 1 1318 43 is_stmt 0 view .LVU1390
 4303 1352 304B     		ldr	r3, .L532
 4304 1354 93F84D30 		ldrb	r3, [r3, #77]	@ zero_extendqisi2
 4305 1358 E360     		str	r3, [r4, #12]
 4306              		.loc 1 1594 1 view .LVU1391
 4307 135a 38BD     		pop	{r3, r4, r5, pc}
 4308              	.L393:
 690:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4309              		.loc 1 690 6 is_stmt 1 view .LVU1392
 690:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4310              		.loc 1 690 43 is_stmt 0 view .LVU1393
 4311 135c 2D4B     		ldr	r3, .L532
 4312 135e 1B89     		ldrh	r3, [r3, #8]
 4313 1360 E360     		str	r3, [r4, #12]
 4314              		.loc 1 1594 1 view .LVU1394
 4315 1362 38BD     		pop	{r3, r4, r5, pc}
 4316              	.L396:
 675:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4317              		.loc 1 675 6 is_stmt 1 view .LVU1395
 675:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4318              		.loc 1 675 43 is_stmt 0 view .LVU1396
 4319 1364 2B4B     		ldr	r3, .L532
 4320 1366 DB88     		ldrh	r3, [r3, #6]
 4321 1368 E360     		str	r3, [r4, #12]
 4322              		.loc 1 1594 1 view .LVU1397
 4323 136a 38BD     		pop	{r3, r4, r5, pc}
 4324              	.L366:
1288:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4325              		.loc 1 1288 6 is_stmt 1 view .LVU1398
1288:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4326              		.loc 1 1288 43 is_stmt 0 view .LVU1399
 4327 136c 294B     		ldr	r3, .L532
 4328 136e B3F84A30 		ldrh	r3, [r3, #74]
 4329 1372 E360     		str	r3, [r4, #12]
 4330              		.loc 1 1594 1 view .LVU1400
 4331 1374 38BD     		pop	{r3, r4, r5, pc}
 4332              	.L348:
1355:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4333              		.loc 1 1355 6 is_stmt 1 view .LVU1401
1355:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4334              		.loc 1 1355 43 is_stmt 0 view .LVU1402
 4335 1376 274B     		ldr	r3, .L532
1355:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4336              		.loc 1 1355 61 view .LVU1403
 4337 1378 274A     		ldr	r2, .L532+4
 4338 137a B3F84E30 		ldrh	r3, [r3, #78]
 4339 137e A2FB0323 		umull	r2, r3, r2, r3
 4340 1382 DB08     		lsrs	r3, r3, #3
 4341 1384 E360     		str	r3, [r4, #12]
 4342              		.loc 1 1594 1 view .LVU1404
 4343 1386 38BD     		pop	{r3, r4, r5, pc}
 4344              	.L466:
 864:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4345              		.loc 1 864 6 is_stmt 1 view .LVU1405
 864:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4346              		.loc 1 864 43 is_stmt 0 view .LVU1406
 4347 1388 224B     		ldr	r3, .L532
 864:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4348              		.loc 1 864 52 view .LVU1407
 4349 138a 234A     		ldr	r2, .L532+4
 4350 138c DB8B     		ldrh	r3, [r3, #30]
 4351 138e A2FB0323 		umull	r2, r3, r2, r3
 4352 1392 DB08     		lsrs	r3, r3, #3
 4353 1394 E360     		str	r3, [r4, #12]
 4354              		.loc 1 1594 1 view .LVU1408
 4355 1396 38BD     		pop	{r3, r4, r5, pc}
 4356              	.L487:
 909:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4357              		.loc 1 909 6 is_stmt 1 view .LVU1409
 909:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4358              		.loc 1 909 43 is_stmt 0 view .LVU1410
 4359 1398 1E4B     		ldr	r3, .L532
 909:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4360              		.loc 1 909 52 view .LVU1411
 4361 139a 1F4A     		ldr	r2, .L532+4
 4362 139c 9B8C     		ldrh	r3, [r3, #36]
 4363 139e A2FB0323 		umull	r2, r3, r2, r3
 4364 13a2 DB08     		lsrs	r3, r3, #3
 4365 13a4 E360     		str	r3, [r4, #12]
 4366              		.loc 1 1594 1 view .LVU1412
 4367 13a6 38BD     		pop	{r3, r4, r5, pc}
 4368              	.L375:
1171:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4369              		.loc 1 1171 6 is_stmt 1 view .LVU1413
1171:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4370              		.loc 1 1171 43 is_stmt 0 view .LVU1414
 4371 13a8 1A4B     		ldr	r3, .L532
 4372 13aa 93F83D30 		ldrb	r3, [r3, #61]	@ zero_extendqisi2
 4373 13ae E360     		str	r3, [r4, #12]
 4374              		.loc 1 1594 1 view .LVU1415
 4375 13b0 38BD     		pop	{r3, r4, r5, pc}
 4376              	.L509:
 849:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4377              		.loc 1 849 6 is_stmt 1 view .LVU1416
 849:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4378              		.loc 1 849 43 is_stmt 0 view .LVU1417
 4379 13b2 184B     		ldr	r3, .L532
 849:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4380              		.loc 1 849 52 view .LVU1418
 4381 13b4 184A     		ldr	r2, .L532+4
 4382 13b6 9B8B     		ldrh	r3, [r3, #28]
 4383 13b8 A2FB0323 		umull	r2, r3, r2, r3
 4384 13bc DB08     		lsrs	r3, r3, #3
 4385 13be E360     		str	r3, [r4, #12]
 4386              		.loc 1 1594 1 view .LVU1419
 4387 13c0 38BD     		pop	{r3, r4, r5, pc}
 4388              	.L381:
1185:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4389              		.loc 1 1185 6 is_stmt 1 view .LVU1420
1185:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 4390              		.loc 1 1185 43 is_stmt 0 view .LVU1421
 4391 13c2 144B     		ldr	r3, .L532
 4392 13c4 DB8F     		ldrh	r3, [r3, #62]
 4393 13c6 E360     		str	r3, [r4, #12]
 4394              		.loc 1 1594 1 view .LVU1422
 4395 13c8 38BD     		pop	{r3, r4, r5, pc}
 4396              	.L344:
1367:TMCL.c        **** 					button_updateBatteryStatusFactor();
 4397              		.loc 1 1367 6 is_stmt 1 view .LVU1423
1367:TMCL.c        **** 					button_updateBatteryStatusFactor();
 4398              		.loc 1 1367 36 is_stmt 0 view .LVU1424
 4399 13ca 6368     		ldr	r3, [r4, #4]
 4400 13cc 114A     		ldr	r2, .L532
 4401 13ce 03EB8303 		add	r3, r3, r3, lsl #2
 4402 13d2 5B00     		lsls	r3, r3, #1
 4403 13d4 A2F85030 		strh	r3, [r2, #80]	@ movhi
1368:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4404              		.loc 1 1368 6 is_stmt 1 view .LVU1425
 4405              		.loc 1 1594 1 is_stmt 0 view .LVU1426
 4406 13d8 BDE83840 		pop	{r3, r4, r5, lr}
 4407              	.LCFI125:
 4408              		.cfi_remember_state
 4409              		.cfi_restore 14
 4410              		.cfi_restore 5
 4411              		.cfi_restore 4
 4412              		.cfi_restore 3
 4413              		.cfi_def_cfa_offset 0
1368:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4414              		.loc 1 1368 6 view .LVU1427
 4415 13dc FFF7FEBF 		b	button_updateBatteryStatusFactor
 4416              	.LVL241:
 4417              	.L331:
 4418              	.LCFI126:
 4419              		.cfi_restore_state
1554:TMCL.c        **** 				else if (command == TMCL_GAP)
 4420              		.loc 1 1554 6 is_stmt 1 view .LVU1428
 4421 13e0 6068     		ldr	r0, [r4, #4]
 4422              	.LVL242:
 4423              		.loc 1 1594 1 is_stmt 0 view .LVU1429
 4424 13e2 BDE83840 		pop	{r3, r4, r5, lr}
 4425              	.LCFI127:
 4426              		.cfi_remember_state
 4427              		.cfi_restore 14
 4428              		.cfi_restore 5
 4429              		.cfi_restore 4
 4430              		.cfi_restore 3
 4431              		.cfi_def_cfa_offset 0
1554:TMCL.c        **** 				else if (command == TMCL_GAP)
 4432              		.loc 1 1554 6 view .LVU1430
 4433 13e6 FFF7FEBF 		b	debug_setTestVar7
 4434              	.LVL243:
 4435              	.L359:
 4436              	.LCFI128:
 4437              		.cfi_restore_state
1211:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_PHI_E_PHI_M_OFFSET, TMC4671_HALL_PHI_E_OFFSET_MA
 4438              		.loc 1 1211 6 is_stmt 1 view .LVU1431
1211:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_PHI_E_PHI_M_OFFSET, TMC4671_HALL_PHI_E_OFFSET_MA
 4439              		.loc 1 1211 29 is_stmt 0 view .LVU1432
 4440 13ea 6368     		ldr	r3, [r4, #4]
 4441 13ec 094D     		ldr	r5, .L532
1212:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4442              		.loc 1 1212 6 view .LVU1433
 4443 13ee 3721     		movs	r1, #55
 4444 13f0 0020     		movs	r0, #0
 4445              	.LVL244:
1211:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_PHI_E_PHI_M_OFFSET, TMC4671_HALL_PHI_E_OFFSET_MA
 4446              		.loc 1 1211 29 view .LVU1434
 4447 13f2 A5F84230 		strh	r3, [r5, #66]	@ movhi
1212:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4448              		.loc 1 1212 6 is_stmt 1 view .LVU1435
 4449 13f6 FFF7FEFF 		bl	tmc4671_readInt
 4450              	.LVL245:
 4451 13fa 0346     		mov	r3, r0
 4452 13fc B5F94220 		ldrsh	r2, [r5, #66]
 4453 1400 9BB2     		uxth	r3, r3
 4454 1402 43EA0242 		orr	r2, r3, r2, lsl #16
 4455 1406 3721     		movs	r1, #55
 4456              		.loc 1 1594 1 is_stmt 0 view .LVU1436
 4457 1408 BDE83840 		pop	{r3, r4, r5, lr}
 4458              	.LCFI129:
 4459              		.cfi_remember_state
 4460              		.cfi_restore 14
 4461              		.cfi_restore 5
 4462              		.cfi_restore 4
 4463              		.cfi_restore 3
 4464              		.cfi_def_cfa_offset 0
1212:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4465              		.loc 1 1212 6 view .LVU1437
 4466 140c 0020     		movs	r0, #0
 4467 140e FFF7FEBF 		b	tmc4671_writeInt
 4468              	.LVL246:
 4469              	.L533:
 4470 1412 00BF     		.align	2
 4471              	.L532:
 4472 1414 00000000 		.word	motorConfig
 4473 1418 CDCCCCCC 		.word	-858993459
 4474              	.LVL247:
 4475              	.L350:
 4476              	.LCFI130:
 4477              		.cfi_restore_state
1256:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_DIRECTION_MASK, TMC4671_HALL_DIRECTION
 4478              		.loc 1 1256 6 is_stmt 1 view .LVU1438
1256:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_DIRECTION_MASK, TMC4671_HALL_DIRECTION
 4479              		.loc 1 1256 53 is_stmt 0 view .LVU1439
 4480 141c 6368     		ldr	r3, [r4, #4]
1256:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_DIRECTION_MASK, TMC4671_HALL_DIRECTION
 4481              		.loc 1 1256 32 view .LVU1440
 4482 141e D64C     		ldr	r4, .L534
1256:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_DIRECTION_MASK, TMC4671_HALL_DIRECTION
 4483              		.loc 1 1256 53 view .LVU1441
 4484 1420 003B     		subs	r3, r3, #0
 4485 1422 18BF     		it	ne
 4486 1424 0123     		movne	r3, #1
1257:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4487              		.loc 1 1257 6 view .LVU1442
 4488 1426 3321     		movs	r1, #51
 4489 1428 0020     		movs	r0, #0
 4490              	.LVL248:
1256:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_DIRECTION_MASK, TMC4671_HALL_DIRECTION
 4491              		.loc 1 1256 53 view .LVU1443
 4492 142a 84F84630 		strb	r3, [r4, #70]
1257:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4493              		.loc 1 1257 6 is_stmt 1 view .LVU1444
 4494 142e FFF7FEFF 		bl	tmc4671_readInt
 4495              	.LVL249:
 4496 1432 0346     		mov	r3, r0
 4497 1434 94F84620 		ldrb	r2, [r4, #70]	@ zero_extendqisi2
 4498 1438 23F48053 		bic	r3, r3, #4096
 4499 143c 43EA0232 		orr	r2, r3, r2, lsl #12
 4500 1440 3321     		movs	r1, #51
 4501              		.loc 1 1594 1 is_stmt 0 view .LVU1445
 4502 1442 BDE83840 		pop	{r3, r4, r5, lr}
 4503              	.LCFI131:
 4504              		.cfi_remember_state
 4505              		.cfi_restore 14
 4506              		.cfi_restore 5
 4507              		.cfi_restore 4
 4508              		.cfi_restore 3
 4509              		.cfi_def_cfa_offset 0
1257:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4510              		.loc 1 1257 6 view .LVU1446
 4511 1446 0020     		movs	r0, #0
 4512 1448 FFF7FEBF 		b	tmc4671_writeInt
 4513              	.LVL250:
 4514              	.L496:
 4515              	.LCFI132:
 4516              		.cfi_restore_state
 503:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_P_MASK, TMC467
 4517              		.loc 1 503 6 is_stmt 1 view .LVU1447
 503:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_P_MASK, TMC467
 4518              		.loc 1 503 38 is_stmt 0 view .LVU1448
 4519 144c 6368     		ldr	r3, [r4, #4]
 4520 144e CA4D     		ldr	r5, .L534
 504:TMCL.c        **** 				}
 4521              		.loc 1 504 6 view .LVU1449
 4522 1450 5821     		movs	r1, #88
 4523 1452 0020     		movs	r0, #0
 4524              	.LVL251:
 503:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_P_MASK, TMC467
 4525              		.loc 1 503 38 view .LVU1450
 4526 1454 A5F88C30 		strh	r3, [r5, #140]	@ movhi
 504:TMCL.c        **** 				}
 4527              		.loc 1 504 6 is_stmt 1 view .LVU1451
 4528 1458 FFF7FEFF 		bl	tmc4671_readInt
 4529              	.LVL252:
 4530 145c 0346     		mov	r3, r0
 4531 145e B5F88C20 		ldrh	r2, [r5, #140]
 4532 1462 9BB2     		uxth	r3, r3
 4533 1464 43EA0242 		orr	r2, r3, r2, lsl #16
 4534 1468 5821     		movs	r1, #88
 4535              		.loc 1 1594 1 is_stmt 0 view .LVU1452
 4536 146a BDE83840 		pop	{r3, r4, r5, lr}
 4537              	.LCFI133:
 4538              		.cfi_remember_state
 4539              		.cfi_restore 14
 4540              		.cfi_restore 5
 4541              		.cfi_restore 4
 4542              		.cfi_restore 3
 4543              		.cfi_def_cfa_offset 0
 504:TMCL.c        **** 				}
 4544              		.loc 1 504 6 view .LVU1453
 4545 146e 0020     		movs	r0, #0
 4546 1470 FFF7FEBF 		b	tmc4671_writeInt
 4547              	.LVL253:
 4548              	.L419:
 4549              	.LCFI134:
 4550              		.cfi_restore_state
 485:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_I_MASK, TMC4671_PID_FLUX_I
 4551              		.loc 1 485 6 is_stmt 1 view .LVU1454
 485:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_I_MASK, TMC4671_PID_FLUX_I
 4552              		.loc 1 485 36 is_stmt 0 view .LVU1455
 4553 1474 C04D     		ldr	r5, .L534
 4554 1476 6368     		ldr	r3, [r4, #4]
 486:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_TORQUE_P_TORQUE_I, TMC4671_PID_TORQUE_I_MASK, TMC4671_PID_
 4555              		.loc 1 486 6 view .LVU1456
 4556 1478 5421     		movs	r1, #84
 4557 147a 0020     		movs	r0, #0
 4558              	.LVL254:
 485:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_I_MASK, TMC4671_PID_FLUX_I
 4559              		.loc 1 485 36 view .LVU1457
 4560 147c A5F88A30 		strh	r3, [r5, #138]	@ movhi
 486:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_TORQUE_P_TORQUE_I, TMC4671_PID_TORQUE_I_MASK, TMC4671_PID_
 4561              		.loc 1 486 6 is_stmt 1 view .LVU1458
 4562 1480 FFF7FEFF 		bl	tmc4671_readInt
 4563              	.LVL255:
 4564 1484 0346     		mov	r3, r0
 4565 1486 BD4C     		ldr	r4, .L534+4
 4566 1488 B5F88A20 		ldrh	r2, [r5, #138]
 4567 148c 2340     		ands	r3, r3, r4
 4568 148e 1A43     		orrs	r2, r2, r3
 4569 1490 5421     		movs	r1, #84
 4570 1492 0020     		movs	r0, #0
 4571 1494 FFF7FEFF 		bl	tmc4671_writeInt
 4572              	.LVL256:
 487:TMCL.c        **** 				}
 4573              		.loc 1 487 6 view .LVU1459
 4574 1498 5621     		movs	r1, #86
 4575 149a 0020     		movs	r0, #0
 4576 149c FFF7FEFF 		bl	tmc4671_readInt
 4577              	.LVL257:
 4578 14a0 0346     		mov	r3, r0
 4579 14a2 B5F88A20 		ldrh	r2, [r5, #138]
 4580 14a6 2340     		ands	r3, r3, r4
 4581 14a8 1A43     		orrs	r2, r2, r3
 4582 14aa 5621     		movs	r1, #86
 4583              		.loc 1 1594 1 is_stmt 0 view .LVU1460
 4584 14ac BDE83840 		pop	{r3, r4, r5, lr}
 4585              	.LCFI135:
 4586              		.cfi_remember_state
 4587              		.cfi_restore 14
 4588              		.cfi_restore 5
 4589              		.cfi_restore 4
 4590              		.cfi_restore 3
 4591              		.cfi_def_cfa_offset 0
 487:TMCL.c        **** 				}
 4592              		.loc 1 487 6 view .LVU1461
 4593 14b0 0020     		movs	r0, #0
 4594 14b2 FFF7FEBF 		b	tmc4671_writeInt
 4595              	.LVL258:
 4596              	.L517:
 4597              	.LCFI136:
 4598              		.cfi_restore_state
 355:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4599              		.loc 1 355 6 is_stmt 1 view .LVU1462
 355:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4600              		.loc 1 355 11 is_stmt 0 view .LVU1463
 4601 14b6 6068     		ldr	r0, [r4, #4]
 4602              	.LVL259:
 355:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4603              		.loc 1 355 11 view .LVU1464
 4604 14b8 FFF7FEFF 		bl	bldc_setAdcI0Offset
 4605              	.LVL260:
 355:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4606              		.loc 1 355 9 view .LVU1465
 4607 14bc 0028     		cmp	r0, #0
 4608 14be 3FF45BAD 		beq	.L125
 4609              		.loc 1 1594 1 view .LVU1466
 4610 14c2 38BD     		pop	{r3, r4, r5, pc}
 4611              	.LVL261:
 4612              	.L499:
 369:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4613              		.loc 1 369 6 is_stmt 1 view .LVU1467
 369:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4614              		.loc 1 369 11 is_stmt 0 view .LVU1468
 4615 14c4 6068     		ldr	r0, [r4, #4]
 4616              	.LVL262:
 369:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4617              		.loc 1 369 11 view .LVU1469
 4618 14c6 FFF7FEFF 		bl	bldc_setAdcI1Offset
 4619              	.LVL263:
 369:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4620              		.loc 1 369 9 view .LVU1470
 4621 14ca 0028     		cmp	r0, #0
 4622 14cc 3FF454AD 		beq	.L125
 4623              		.loc 1 1594 1 view .LVU1471
 4624 14d0 38BD     		pop	{r3, r4, r5, pc}
 4625              	.LVL264:
 4626              	.L404:
 606:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4627              		.loc 1 606 6 is_stmt 1 view .LVU1472
 606:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4628              		.loc 1 606 11 is_stmt 0 view .LVU1473
 4629 14d2 6068     		ldr	r0, [r4, #4]
 4630              	.LVL265:
 606:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4631              		.loc 1 606 11 view .LVU1474
 4632 14d4 FFF7FEFF 		bl	bldc_setRampEnabled
 4633              	.LVL266:
 606:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4634              		.loc 1 606 9 view .LVU1475
 4635 14d8 0028     		cmp	r0, #0
 4636 14da 3FF44DAD 		beq	.L125
 4637              		.loc 1 1594 1 view .LVU1476
 4638 14de 38BD     		pop	{r3, r4, r5, pc}
 4639              	.LVL267:
 4640              	.L389:
 702:TMCL.c        **** 					sensor_updateCutOffTime();
 4641              		.loc 1 702 6 is_stmt 1 view .LVU1477
 702:TMCL.c        **** 					sensor_updateCutOffTime();
 4642              		.loc 1 702 39 is_stmt 0 view .LVU1478
 4643 14e0 A54B     		ldr	r3, .L534
 4644 14e2 6268     		ldr	r2, [r4, #4]
 4645 14e4 5A81     		strh	r2, [r3, #10]	@ movhi
 703:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4646              		.loc 1 703 6 is_stmt 1 view .LVU1479
 4647              		.loc 1 1594 1 is_stmt 0 view .LVU1480
 4648 14e6 BDE83840 		pop	{r3, r4, r5, lr}
 4649              	.LCFI137:
 4650              		.cfi_remember_state
 4651              		.cfi_restore 14
 4652              		.cfi_restore 5
 4653              		.cfi_restore 4
 4654              		.cfi_restore 3
 4655              		.cfi_def_cfa_offset 0
 703:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4656              		.loc 1 703 6 view .LVU1481
 4657 14ea FFF7FEBF 		b	sensor_updateCutOffTime
 4658              	.LVL268:
 4659              	.L431:
 4660              	.LCFI138:
 4661              		.cfi_restore_state
1102:TMCL.c        **** 					sensor_updateCutOffTime();
 4662              		.loc 1 1102 6 is_stmt 1 view .LVU1482
1102:TMCL.c        **** 					sensor_updateCutOffTime();
 4663              		.loc 1 1102 31 is_stmt 0 view .LVU1483
 4664 14ee A24B     		ldr	r3, .L534
 4665 14f0 6268     		ldr	r2, [r4, #4]
 4666 14f2 DA86     		strh	r2, [r3, #54]	@ movhi
1103:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4667              		.loc 1 1103 6 is_stmt 1 view .LVU1484
 4668              		.loc 1 1594 1 is_stmt 0 view .LVU1485
 4669 14f4 BDE83840 		pop	{r3, r4, r5, lr}
 4670              	.LCFI139:
 4671              		.cfi_remember_state
 4672              		.cfi_restore 14
 4673              		.cfi_restore 5
 4674              		.cfi_restore 4
 4675              		.cfi_restore 3
 4676              		.cfi_def_cfa_offset 0
1103:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4677              		.loc 1 1103 6 view .LVU1486
 4678 14f8 FFF7FEBF 		b	sensor_updateCutOffTime
 4679              	.LVL269:
 4680              	.L493:
 4681              	.LCFI140:
 4682              		.cfi_restore_state
 520:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_I_MASK, TMC467
 4683              		.loc 1 520 6 is_stmt 1 view .LVU1487
 520:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_I_MASK, TMC467
 4684              		.loc 1 520 38 is_stmt 0 view .LVU1488
 4685 14fc 6368     		ldr	r3, [r4, #4]
 4686 14fe 9E4D     		ldr	r5, .L534
 521:TMCL.c        **** 				}
 4687              		.loc 1 521 6 view .LVU1489
 4688 1500 5821     		movs	r1, #88
 4689 1502 0020     		movs	r0, #0
 4690              	.LVL270:
 520:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, TMC4671_PID_VELOCITY_I_MASK, TMC467
 4691              		.loc 1 520 38 view .LVU1490
 4692 1504 A5F88E30 		strh	r3, [r5, #142]	@ movhi
 521:TMCL.c        **** 				}
 4693              		.loc 1 521 6 is_stmt 1 view .LVU1491
 4694 1508 FFF7FEFF 		bl	tmc4671_readInt
 4695              	.LVL271:
 4696 150c 0346     		mov	r3, r0
 4697 150e B5F88E20 		ldrh	r2, [r5, #142]
 4698 1512 1B0C     		lsrs	r3, r3, #16
 4699 1514 1B04     		lsls	r3, r3, #16
 4700 1516 1A43     		orrs	r2, r2, r3
 4701 1518 5821     		movs	r1, #88
 4702              		.loc 1 1594 1 is_stmt 0 view .LVU1492
 4703 151a BDE83840 		pop	{r3, r4, r5, lr}
 4704              	.LCFI141:
 4705              		.cfi_remember_state
 4706              		.cfi_restore 14
 4707              		.cfi_restore 5
 4708              		.cfi_restore 4
 4709              		.cfi_restore 3
 4710              		.cfi_def_cfa_offset 0
 521:TMCL.c        **** 				}
 4711              		.loc 1 521 6 view .LVU1493
 4712 151e 0020     		movs	r0, #0
 4713 1520 FFF7FEBF 		b	tmc4671_writeInt
 4714              	.LVL272:
 4715              	.L377:
 4716              	.LCFI142:
 4717              		.cfi_restore_state
1154:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, T
 4718              		.loc 1 1154 6 is_stmt 1 view .LVU1494
1154:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, T
 4719              		.loc 1 1154 28 is_stmt 0 view .LVU1495
 4720 1524 6368     		ldr	r3, [r4, #4]
 4721 1526 944D     		ldr	r5, .L534
1155:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4722              		.loc 1 1155 6 view .LVU1496
 4723 1528 1B21     		movs	r1, #27
 4724 152a 0020     		movs	r0, #0
 4725              	.LVL273:
1154:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, T
 4726              		.loc 1 1154 28 view .LVU1497
 4727 152c 85F83C30 		strb	r3, [r5, #60]
1155:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4728              		.loc 1 1155 6 is_stmt 1 view .LVU1498
 4729 1530 FFF7FEFF 		bl	tmc4671_readInt
 4730              	.LVL274:
 4731 1534 0346     		mov	r3, r0
 4732 1536 95F83C20 		ldrb	r2, [r5, #60]	@ zero_extendqisi2
 4733 153a 1B0C     		lsrs	r3, r3, #16
 4734 153c 1B04     		lsls	r3, r3, #16
 4735 153e 1A43     		orrs	r2, r2, r3
 4736 1540 1B21     		movs	r1, #27
 4737              		.loc 1 1594 1 is_stmt 0 view .LVU1499
 4738 1542 BDE83840 		pop	{r3, r4, r5, lr}
 4739              	.LCFI143:
 4740              		.cfi_remember_state
 4741              		.cfi_restore 14
 4742              		.cfi_restore 5
 4743              		.cfi_restore 4
 4744              		.cfi_restore 3
 4745              		.cfi_def_cfa_offset 0
1155:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 4746              		.loc 1 1155 6 view .LVU1500
 4747 1546 0020     		movs	r0, #0
 4748 1548 FFF7FEBF 		b	tmc4671_writeInt
 4749              	.LVL275:
 4750              	.L468:
 4751              	.LCFI144:
 4752              		.cfi_restore_state
 395:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4753              		.loc 1 395 6 is_stmt 1 view .LVU1501
 395:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4754              		.loc 1 395 11 is_stmt 0 view .LVU1502
 4755 154c A088     		ldrh	r0, [r4, #4]
 4756              	.LVL276:
 395:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4757              		.loc 1 395 11 view .LVU1503
 4758 154e FFF7FEFF 		bl	bldc_setDualShuntFactor
 4759              	.LVL277:
 395:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4760              		.loc 1 395 9 view .LVU1504
 4761 1552 0028     		cmp	r0, #0
 4762 1554 3FF410AD 		beq	.L125
 4763              		.loc 1 1594 1 view .LVU1505
 4764 1558 38BD     		pop	{r3, r4, r5, pc}
 4765              	.LVL278:
 4766              	.L327:
1574:TMCL.c        **** 				else if (command == TMCL_GAP)
 4767              		.loc 1 1574 6 is_stmt 1 view .LVU1506
 4768 155a 6068     		ldr	r0, [r4, #4]
 4769              	.LVL279:
 4770              		.loc 1 1594 1 is_stmt 0 view .LVU1507
 4771 155c BDE83840 		pop	{r3, r4, r5, lr}
 4772              	.LCFI145:
 4773              		.cfi_remember_state
 4774              		.cfi_restore 14
 4775              		.cfi_restore 5
 4776              		.cfi_restore 4
 4777              		.cfi_restore 3
 4778              		.cfi_def_cfa_offset 0
1574:TMCL.c        **** 				else if (command == TMCL_GAP)
 4779              		.loc 1 1574 6 view .LVU1508
 4780 1560 FFF7FEBF 		b	sensor_setFltActualTorque
 4781              	.LVL280:
 4782              	.L335:
 4783              	.LCFI146:
 4784              		.cfi_restore_state
1536:TMCL.c        **** 				else if (command == TMCL_GAP)
 4785              		.loc 1 1536 6 is_stmt 1 view .LVU1509
 4786 1564 6068     		ldr	r0, [r4, #4]
 4787              	.LVL281:
 4788              		.loc 1 1594 1 is_stmt 0 view .LVU1510
 4789 1566 BDE83840 		pop	{r3, r4, r5, lr}
 4790              	.LCFI147:
 4791              		.cfi_remember_state
 4792              		.cfi_restore 14
 4793              		.cfi_restore 5
 4794              		.cfi_restore 4
 4795              		.cfi_restore 3
 4796              		.cfi_def_cfa_offset 0
1536:TMCL.c        **** 				else if (command == TMCL_GAP)
 4797              		.loc 1 1536 6 view .LVU1511
 4798 156a FFF7FEBF 		b	debug_setTestVar4
 4799              	.LVL282:
 4800              	.L330:
 4801              	.LCFI148:
 4802              		.cfi_restore_state
1542:TMCL.c        **** 				else if (command == TMCL_GAP)
 4803              		.loc 1 1542 6 is_stmt 1 view .LVU1512
 4804 156e 6068     		ldr	r0, [r4, #4]
 4805              	.LVL283:
 4806              		.loc 1 1594 1 is_stmt 0 view .LVU1513
 4807 1570 BDE83840 		pop	{r3, r4, r5, lr}
 4808              	.LCFI149:
 4809              		.cfi_remember_state
 4810              		.cfi_restore 14
 4811              		.cfi_restore 5
 4812              		.cfi_restore 4
 4813              		.cfi_restore 3
 4814              		.cfi_def_cfa_offset 0
1542:TMCL.c        **** 				else if (command == TMCL_GAP)
 4815              		.loc 1 1542 6 view .LVU1514
 4816 1574 FFF7FEBF 		b	debug_setTestVar5
 4817              	.LVL284:
 4818              	.L336:
 4819              	.LCFI150:
 4820              		.cfi_restore_state
1560:TMCL.c        **** 				else if (command == TMCL_GAP)
 4821              		.loc 1 1560 6 is_stmt 1 view .LVU1515
 4822 1578 6068     		ldr	r0, [r4, #4]
 4823              	.LVL285:
 4824              		.loc 1 1594 1 is_stmt 0 view .LVU1516
 4825 157a BDE83840 		pop	{r3, r4, r5, lr}
 4826              	.LCFI151:
 4827              		.cfi_remember_state
 4828              		.cfi_restore 14
 4829              		.cfi_restore 5
 4830              		.cfi_restore 4
 4831              		.cfi_restore 3
 4832              		.cfi_def_cfa_offset 0
1560:TMCL.c        **** 				else if (command == TMCL_GAP)
 4833              		.loc 1 1560 6 view .LVU1517
 4834 157e FFF7FEBF 		b	debug_setTestVar8
 4835              	.LVL286:
 4836              	.L329:
 4837              	.LCFI152:
 4838              		.cfi_restore_state
1518:TMCL.c        **** 				else if (command == TMCL_GAP)
 4839              		.loc 1 1518 6 is_stmt 1 view .LVU1518
 4840 1582 6068     		ldr	r0, [r4, #4]
 4841              	.LVL287:
 4842              		.loc 1 1594 1 is_stmt 0 view .LVU1519
 4843 1584 BDE83840 		pop	{r3, r4, r5, lr}
 4844              	.LCFI153:
 4845              		.cfi_remember_state
 4846              		.cfi_restore 14
 4847              		.cfi_restore 5
 4848              		.cfi_restore 4
 4849              		.cfi_restore 3
 4850              		.cfi_def_cfa_offset 0
1518:TMCL.c        **** 				else if (command == TMCL_GAP)
 4851              		.loc 1 1518 6 view .LVU1520
 4852 1588 FFF7FEBF 		b	debug_setTestVar1
 4853              	.LVL288:
 4854              	.L334:
 4855              	.LCFI154:
 4856              		.cfi_restore_state
1524:TMCL.c        **** 				else if (command == TMCL_GAP)
 4857              		.loc 1 1524 6 is_stmt 1 view .LVU1521
 4858 158c 6068     		ldr	r0, [r4, #4]
 4859              	.LVL289:
 4860              		.loc 1 1594 1 is_stmt 0 view .LVU1522
 4861 158e BDE83840 		pop	{r3, r4, r5, lr}
 4862              	.LCFI155:
 4863              		.cfi_remember_state
 4864              		.cfi_restore 14
 4865              		.cfi_restore 5
 4866              		.cfi_restore 4
 4867              		.cfi_restore 3
 4868              		.cfi_def_cfa_offset 0
1524:TMCL.c        **** 				else if (command == TMCL_GAP)
 4869              		.loc 1 1524 6 view .LVU1523
 4870 1592 FFF7FEBF 		b	debug_setTestVar2
 4871              	.LVL290:
 4872              	.L333:
 4873              	.LCFI156:
 4874              		.cfi_restore_state
1530:TMCL.c        **** 				else if (command == TMCL_GAP)
 4875              		.loc 1 1530 6 is_stmt 1 view .LVU1524
 4876 1596 6068     		ldr	r0, [r4, #4]
 4877              	.LVL291:
 4878              		.loc 1 1594 1 is_stmt 0 view .LVU1525
 4879 1598 BDE83840 		pop	{r3, r4, r5, lr}
 4880              	.LCFI157:
 4881              		.cfi_remember_state
 4882              		.cfi_restore 14
 4883              		.cfi_restore 5
 4884              		.cfi_restore 4
 4885              		.cfi_restore 3
 4886              		.cfi_def_cfa_offset 0
1530:TMCL.c        **** 				else if (command == TMCL_GAP)
 4887              		.loc 1 1530 6 view .LVU1526
 4888 159c FFF7FEBF 		b	debug_setTestVar3
 4889              	.LVL292:
 4890              	.L328:
 4891              	.LCFI158:
 4892              		.cfi_restore_state
1567:TMCL.c        **** 				else if (command == TMCL_GAP)
 4893              		.loc 1 1567 6 is_stmt 1 view .LVU1527
 4894 15a0 6068     		ldr	r0, [r4, #4]
 4895              	.LVL293:
 4896              		.loc 1 1594 1 is_stmt 0 view .LVU1528
 4897 15a2 BDE83840 		pop	{r3, r4, r5, lr}
 4898              	.LCFI159:
 4899              		.cfi_remember_state
 4900              		.cfi_restore 14
 4901              		.cfi_restore 5
 4902              		.cfi_restore 4
 4903              		.cfi_restore 3
 4904              		.cfi_def_cfa_offset 0
1567:TMCL.c        **** 				else if (command == TMCL_GAP)
 4905              		.loc 1 1567 6 view .LVU1529
 4906 15a6 FFF7FEBF 		b	debug_setTestVar9
 4907              	.LVL294:
 4908              	.L332:
 4909              	.LCFI160:
 4910              		.cfi_restore_state
1548:TMCL.c        **** 				else if (command == TMCL_GAP)
 4911              		.loc 1 1548 6 is_stmt 1 view .LVU1530
 4912 15aa 6068     		ldr	r0, [r4, #4]
 4913              	.LVL295:
 4914              		.loc 1 1594 1 is_stmt 0 view .LVU1531
 4915 15ac BDE83840 		pop	{r3, r4, r5, lr}
 4916              	.LCFI161:
 4917              		.cfi_remember_state
 4918              		.cfi_restore 14
 4919              		.cfi_restore 5
 4920              		.cfi_restore 4
 4921              		.cfi_restore 3
 4922              		.cfi_def_cfa_offset 0
1548:TMCL.c        **** 				else if (command == TMCL_GAP)
 4923              		.loc 1 1548 6 view .LVU1532
 4924 15b0 FFF7FEBF 		b	debug_setTestVar6
 4925              	.LVL296:
 4926              	.L337:
 4927              	.LCFI162:
 4928              		.cfi_restore_state
1512:TMCL.c        **** 				else if (command == TMCL_GAP)
 4929              		.loc 1 1512 6 is_stmt 1 view .LVU1533
 4930 15b4 6068     		ldr	r0, [r4, #4]
 4931              	.LVL297:
 4932              		.loc 1 1594 1 is_stmt 0 view .LVU1534
 4933 15b6 BDE83840 		pop	{r3, r4, r5, lr}
 4934              	.LCFI163:
 4935              		.cfi_remember_state
 4936              		.cfi_restore 14
 4937              		.cfi_restore 5
 4938              		.cfi_restore 4
 4939              		.cfi_restore 3
 4940              		.cfi_def_cfa_offset 0
1512:TMCL.c        **** 				else if (command == TMCL_GAP)
 4941              		.loc 1 1512 6 view .LVU1535
 4942 15ba FFF7FEBF 		b	debug_setTestVar0
 4943              	.LVL298:
 4944              	.L341:
 4945              	.LCFI164:
 4946              		.cfi_restore_state
1383:TMCL.c        **** 					button_updateBatteryStatusFactor();
 4947              		.loc 1 1383 6 is_stmt 1 view .LVU1536
1383:TMCL.c        **** 					button_updateBatteryStatusFactor();
 4948              		.loc 1 1383 32 is_stmt 0 view .LVU1537
 4949 15be 6368     		ldr	r3, [r4, #4]
 4950 15c0 6D4A     		ldr	r2, .L534
 4951 15c2 03EB8303 		add	r3, r3, r3, lsl #2
 4952 15c6 5B00     		lsls	r3, r3, #1
 4953 15c8 A2F85230 		strh	r3, [r2, #82]	@ movhi
1384:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4954              		.loc 1 1384 6 is_stmt 1 view .LVU1538
 4955              		.loc 1 1594 1 is_stmt 0 view .LVU1539
 4956 15cc BDE83840 		pop	{r3, r4, r5, lr}
 4957              	.LCFI165:
 4958              		.cfi_remember_state
 4959              		.cfi_restore 14
 4960              		.cfi_restore 5
 4961              		.cfi_restore 4
 4962              		.cfi_restore 3
 4963              		.cfi_def_cfa_offset 0
1384:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4964              		.loc 1 1384 6 view .LVU1540
 4965 15d0 FFF7FEBF 		b	button_updateBatteryStatusFactor
 4966              	.LVL299:
 4967              	.L338:
 4968              	.LCFI166:
 4969              		.cfi_restore_state
1399:TMCL.c        **** 					motorConfig.batterySavingTimer = ActualCommand.Value.Int32;
 4970              		.loc 1 1399 6 is_stmt 1 view .LVU1541
 4971 15d4 FFF7FEFF 		bl	button_resetSavingTimer
 4972              	.LVL300:
1400:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4973              		.loc 1 1400 6 view .LVU1542
1400:TMCL.c        **** 				} else if (command == TMCL_GAP)
 4974              		.loc 1 1400 37 is_stmt 0 view .LVU1543
 4975 15d8 674B     		ldr	r3, .L534
 4976 15da 6268     		ldr	r2, [r4, #4]
 4977 15dc A3F85420 		strh	r2, [r3, #84]	@ movhi
 4978              		.loc 1 1594 1 view .LVU1544
 4979 15e0 38BD     		pop	{r3, r4, r5, pc}
 4980              	.LVL301:
 4981              	.L407:
 592:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4982              		.loc 1 592 6 is_stmt 1 view .LVU1545
 592:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4983              		.loc 1 592 11 is_stmt 0 view .LVU1546
 4984 15e2 6068     		ldr	r0, [r4, #4]
 4985              	.LVL302:
 592:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4986              		.loc 1 592 11 view .LVU1547
 4987 15e4 FFF7FEFF 		bl	bldc_setAcceleration
 4988              	.LVL303:
 592:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4989              		.loc 1 592 9 view .LVU1548
 4990 15e8 0028     		cmp	r0, #0
 4991 15ea 3FF4C5AC 		beq	.L125
 4992              		.loc 1 1594 1 view .LVU1549
 4993 15ee 38BD     		pop	{r3, r4, r5, pc}
 4994              	.LVL304:
 4995              	.L461:
 578:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4996              		.loc 1 578 6 is_stmt 1 view .LVU1550
 578:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 4997              		.loc 1 578 11 is_stmt 0 view .LVU1551
 4998 15f0 6068     		ldr	r0, [r4, #4]
 4999              	.LVL305:
 578:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 5000              		.loc 1 578 11 view .LVU1552
 5001 15f2 FFF7FEFF 		bl	bldc_setMaxVelocity
 5002              	.LVL306:
 578:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 5003              		.loc 1 578 9 view .LVU1553
 5004 15f6 0028     		cmp	r0, #0
 5005 15f8 3FF4BEAC 		beq	.L125
 5006              		.loc 1 1594 1 view .LVU1554
 5007 15fc 38BD     		pop	{r3, r4, r5, pc}
 5008              	.LVL307:
 5009              	.L356:
1226:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_MODE, TMC4671_HALL_POLARITY_MASK, TMC4671_HALL_P
 5010              		.loc 1 1226 6 is_stmt 1 view .LVU1555
1226:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_MODE, TMC4671_HALL_POLARITY_MASK, TMC4671_HALL_P
 5011              		.loc 1 1226 52 is_stmt 0 view .LVU1556
 5012 15fe 6368     		ldr	r3, [r4, #4]
1226:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_MODE, TMC4671_HALL_POLARITY_MASK, TMC4671_HALL_P
 5013              		.loc 1 1226 31 view .LVU1557
 5014 1600 5D4C     		ldr	r4, .L534
1226:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_MODE, TMC4671_HALL_POLARITY_MASK, TMC4671_HALL_P
 5015              		.loc 1 1226 52 view .LVU1558
 5016 1602 003B     		subs	r3, r3, #0
 5017 1604 18BF     		it	ne
 5018 1606 0123     		movne	r3, #1
1227:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5019              		.loc 1 1227 6 view .LVU1559
 5020 1608 3321     		movs	r1, #51
 5021 160a 0020     		movs	r0, #0
 5022              	.LVL308:
1226:TMCL.c        **** 					TMC4671_FIELD_UPDATE(DEFAULT_MC, TMC4671_HALL_MODE, TMC4671_HALL_POLARITY_MASK, TMC4671_HALL_P
 5023              		.loc 1 1226 52 view .LVU1560
 5024 160c 84F84430 		strb	r3, [r4, #68]
1227:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5025              		.loc 1 1227 6 is_stmt 1 view .LVU1561
 5026 1610 FFF7FEFF 		bl	tmc4671_readInt
 5027              	.LVL309:
 5028 1614 0346     		mov	r3, r0
 5029 1616 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 5030 161a 23F00103 		bic	r3, r3, #1
 5031 161e 1A43     		orrs	r2, r2, r3
 5032 1620 3321     		movs	r1, #51
 5033              		.loc 1 1594 1 is_stmt 0 view .LVU1562
 5034 1622 BDE83840 		pop	{r3, r4, r5, lr}
 5035              	.LCFI167:
 5036              		.cfi_remember_state
 5037              		.cfi_restore 14
 5038              		.cfi_restore 5
 5039              		.cfi_restore 4
 5040              		.cfi_restore 3
 5041              		.cfi_def_cfa_offset 0
1227:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5042              		.loc 1 1227 6 view .LVU1563
 5043 1626 0020     		movs	r0, #0
 5044 1628 FFF7FEBF 		b	tmc4671_writeInt
 5045              	.LVL310:
 5046              	.L353:
 5047              	.LCFI168:
 5048              		.cfi_restore_state
1241:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_INTERPOLATION_MASK, TMC4671_HALL_INTER
 5049              		.loc 1 1241 6 is_stmt 1 view .LVU1564
1241:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_INTERPOLATION_MASK, TMC4671_HALL_INTER
 5050              		.loc 1 1241 57 is_stmt 0 view .LVU1565
 5051 162c 6368     		ldr	r3, [r4, #4]
1241:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_INTERPOLATION_MASK, TMC4671_HALL_INTER
 5052              		.loc 1 1241 36 view .LVU1566
 5053 162e 524C     		ldr	r4, .L534
1241:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_INTERPOLATION_MASK, TMC4671_HALL_INTER
 5054              		.loc 1 1241 57 view .LVU1567
 5055 1630 003B     		subs	r3, r3, #0
 5056 1632 18BF     		it	ne
 5057 1634 0123     		movne	r3, #1
1242:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5058              		.loc 1 1242 6 view .LVU1568
 5059 1636 3321     		movs	r1, #51
 5060 1638 0020     		movs	r0, #0
 5061              	.LVL311:
1241:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_HALL_MODE, TMC4671_HALL_INTERPOLATION_MASK, TMC4671_HALL_INTER
 5062              		.loc 1 1241 57 view .LVU1569
 5063 163a 84F84530 		strb	r3, [r4, #69]
1242:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5064              		.loc 1 1242 6 is_stmt 1 view .LVU1570
 5065 163e FFF7FEFF 		bl	tmc4671_readInt
 5066              	.LVL312:
 5067 1642 0346     		mov	r3, r0
 5068 1644 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 5069 1648 23F48073 		bic	r3, r3, #256
 5070 164c 43EA0222 		orr	r2, r3, r2, lsl #8
 5071 1650 3321     		movs	r1, #51
 5072              		.loc 1 1594 1 is_stmt 0 view .LVU1571
 5073 1652 BDE83840 		pop	{r3, r4, r5, lr}
 5074              	.LCFI169:
 5075              		.cfi_remember_state
 5076              		.cfi_restore 14
 5077              		.cfi_restore 5
 5078              		.cfi_restore 4
 5079              		.cfi_restore 3
 5080              		.cfi_def_cfa_offset 0
1242:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5081              		.loc 1 1242 6 view .LVU1572
 5082 1656 0020     		movs	r0, #0
 5083 1658 FFF7FEBF 		b	tmc4671_writeInt
 5084              	.LVL313:
 5085              	.L511:
 5086              	.LCFI170:
 5087              		.cfi_restore_state
 467:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_P_MASK, TMC4671_PID_FLUX_P
 5088              		.loc 1 467 6 is_stmt 1 view .LVU1573
 467:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_P_MASK, TMC4671_PID_FLUX_P
 5089              		.loc 1 467 36 is_stmt 0 view .LVU1574
 5090 165c 464D     		ldr	r5, .L534
 5091 165e 6368     		ldr	r3, [r4, #4]
 468:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_TORQUE_P_TORQUE_I, TMC4671_PID_TORQUE_P_MASK, TMC4671_PID_
 5092              		.loc 1 468 6 view .LVU1575
 5093 1660 5421     		movs	r1, #84
 5094 1662 0020     		movs	r0, #0
 5095              	.LVL314:
 467:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_FLUX_P_FLUX_I, TMC4671_PID_FLUX_P_MASK, TMC4671_PID_FLUX_P
 5096              		.loc 1 467 36 view .LVU1576
 5097 1664 A5F88830 		strh	r3, [r5, #136]	@ movhi
 468:TMCL.c        **** 					TMC4671_FIELD_UPDATE(0, TMC4671_PID_TORQUE_P_TORQUE_I, TMC4671_PID_TORQUE_P_MASK, TMC4671_PID_
 5098              		.loc 1 468 6 is_stmt 1 view .LVU1577
 5099 1668 FFF7FEFF 		bl	tmc4671_readInt
 5100              	.LVL315:
 5101 166c 0346     		mov	r3, r0
 5102 166e B5F88820 		ldrh	r2, [r5, #136]
 5103 1672 9BB2     		uxth	r3, r3
 5104 1674 43EA0242 		orr	r2, r3, r2, lsl #16
 5105 1678 5421     		movs	r1, #84
 5106 167a 0020     		movs	r0, #0
 5107 167c FFF7FEFF 		bl	tmc4671_writeInt
 5108              	.LVL316:
 469:TMCL.c        **** 				}
 5109              		.loc 1 469 6 view .LVU1578
 5110 1680 5621     		movs	r1, #86
 5111 1682 0020     		movs	r0, #0
 5112 1684 FFF7FEFF 		bl	tmc4671_readInt
 5113              	.LVL317:
 5114 1688 0346     		mov	r3, r0
 5115 168a B5F88820 		ldrh	r2, [r5, #136]
 5116 168e 9BB2     		uxth	r3, r3
 5117 1690 43EA0242 		orr	r2, r3, r2, lsl #16
 5118 1694 5621     		movs	r1, #86
 5119              		.loc 1 1594 1 is_stmt 0 view .LVU1579
 5120 1696 BDE83840 		pop	{r3, r4, r5, lr}
 5121              	.LCFI171:
 5122              		.cfi_remember_state
 5123              		.cfi_restore 14
 5124              		.cfi_restore 5
 5125              		.cfi_restore 4
 5126              		.cfi_restore 3
 5127              		.cfi_def_cfa_offset 0
 469:TMCL.c        **** 				}
 5128              		.loc 1 469 6 view .LVU1580
 5129 169a 0020     		movs	r0, #0
 5130 169c FFF7FEBF 		b	tmc4671_writeInt
 5131              	.LVL318:
 5132              	.L386:
 5133              	.LCFI172:
 5134              		.cfi_restore_state
1139:TMCL.c        **** 					tmc4671_setTorqueFluxLimit_mA(DEFAULT_MC, motorConfig.dualShuntFactor, motorConfig.maximumCurr
 5135              		.loc 1 1139 6 is_stmt 1 view .LVU1581
1139:TMCL.c        **** 					tmc4671_setTorqueFluxLimit_mA(DEFAULT_MC, motorConfig.dualShuntFactor, motorConfig.maximumCurr
 5136              		.loc 1 1139 33 is_stmt 0 view .LVU1582
 5137 16a0 354B     		ldr	r3, .L534
1139:TMCL.c        **** 					tmc4671_setTorqueFluxLimit_mA(DEFAULT_MC, motorConfig.dualShuntFactor, motorConfig.maximumCurr
 5138              		.loc 1 1139 54 view .LVU1583
 5139 16a2 6268     		ldr	r2, [r4, #4]
1140:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5140              		.loc 1 1140 6 view .LVU1584
 5141 16a4 B3F86810 		ldrh	r1, [r3, #104]
1139:TMCL.c        **** 					tmc4671_setTorqueFluxLimit_mA(DEFAULT_MC, motorConfig.dualShuntFactor, motorConfig.maximumCurr
 5142              		.loc 1 1139 33 view .LVU1585
 5143 16a8 9A63     		str	r2, [r3, #56]
1140:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5144              		.loc 1 1140 6 is_stmt 1 view .LVU1586
 5145 16aa 0020     		movs	r0, #0
 5146              	.LVL319:
 5147              		.loc 1 1594 1 is_stmt 0 view .LVU1587
 5148 16ac BDE83840 		pop	{r3, r4, r5, lr}
 5149              	.LCFI173:
 5150              		.cfi_remember_state
 5151              		.cfi_restore 14
 5152              		.cfi_restore 5
 5153              		.cfi_restore 4
 5154              		.cfi_restore 3
 5155              		.cfi_def_cfa_offset 0
1140:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5156              		.loc 1 1140 6 view .LVU1588
 5157 16b0 FFF7FEBF 		b	tmc4671_setTorqueFluxLimit_mA
 5158              	.LVL320:
 5159              	.L514:
 5160              	.LCFI174:
 5161              		.cfi_restore_state
 435:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 5162              		.loc 1 435 6 is_stmt 1 view .LVU1589
 435:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 5163              		.loc 1 435 11 is_stmt 0 view .LVU1590
 5164 16b4 2079     		ldrb	r0, [r4, #4]	@ zero_extendqisi2
 5165              	.LVL321:
 435:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 5166              		.loc 1 435 11 view .LVU1591
 5167 16b6 FFF7FEFF 		bl	bldc_setCommutationMode
 5168              	.LVL322:
 435:TMCL.c        **** 						ActualReply.Status = REPLY_INVALID_VALUE;
 5169              		.loc 1 435 9 view .LVU1592
 5170 16ba 0028     		cmp	r0, #0
 5171 16bc 3FF45CAC 		beq	.L125
 5172              		.loc 1 1594 1 view .LVU1593
 5173 16c0 38BD     		pop	{r3, r4, r5, pc}
 5174              	.LVL323:
 5175              	.L316:
 5176              		.loc 1 1594 1 view .LVU1594
 5177 16c2 BDE83840 		pop	{r3, r4, r5, lr}
 5178              	.LCFI175:
 5179              		.cfi_remember_state
 5180              		.cfi_restore 14
 5181              		.cfi_restore 5
 5182              		.cfi_restore 4
 5183              		.cfi_restore 3
 5184              		.cfi_def_cfa_offset 0
1582:TMCL.c        **** 				} else if (command == TMCL_GAP) {
 5185              		.loc 1 1582 64 view .LVU1595
 5186 16c6 FFF7FEBF 		b	tmcm_enableDriver
 5187              	.LVL324:
 5188              	.L515:
 5189              	.LCFI176:
 5190              		.cfi_restore_state
 438:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5191              		.loc 1 438 6 is_stmt 1 view .LVU1596
 438:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5192              		.loc 1 438 32 is_stmt 0 view .LVU1597
 5193 16ca FFF7FEFF 		bl	bldc_getCommutationMode
 5194              	.LVL325:
 438:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5195              		.loc 1 438 32 view .LVU1598
 5196 16ce E060     		str	r0, [r4, #12]
 5197              		.loc 1 1594 1 view .LVU1599
 5198 16d0 38BD     		pop	{r3, r4, r5, pc}
 5199              	.LVL326:
 5200              	.L378:
1157:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5201              		.loc 1 1157 6 is_stmt 1 view .LVU1600
1157:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5202              		.loc 1 1157 32 is_stmt 0 view .LVU1601
 5203 16d2 FFF7FEFF 		bl	bldc_getMotorPolePairs
 5204              	.LVL327:
1157:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5205              		.loc 1 1157 32 view .LVU1602
 5206 16d6 E060     		str	r0, [r4, #12]
 5207              		.loc 1 1594 1 view .LVU1603
 5208 16d8 38BD     		pop	{r3, r4, r5, pc}
 5209              	.LVL328:
 5210              	.L469:
 398:TMCL.c        **** 				}
 5211              		.loc 1 398 6 is_stmt 1 view .LVU1604
 398:TMCL.c        **** 				}
 5212              		.loc 1 398 32 is_stmt 0 view .LVU1605
 5213 16da FFF7FEFF 		bl	bldc_getDualShuntFactor
 5214              	.LVL329:
 398:TMCL.c        **** 				}
 5215              		.loc 1 398 32 view .LVU1606
 5216 16de E060     		str	r0, [r4, #12]
 5217              		.loc 1 1594 1 view .LVU1607
 5218 16e0 38BD     		pop	{r3, r4, r5, pc}
 5219              	.LVL330:
 5220              	.L518:
 358:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5221              		.loc 1 358 6 is_stmt 1 view .LVU1608
 358:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5222              		.loc 1 358 32 is_stmt 0 view .LVU1609
 5223 16e2 FFF7FEFF 		bl	bldc_getAdcI0Offset
 5224              	.LVL331:
 358:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5225              		.loc 1 358 30 view .LVU1610
 5226 16e6 E060     		str	r0, [r4, #12]
 5227              		.loc 1 1594 1 view .LVU1611
 5228 16e8 38BD     		pop	{r3, r4, r5, pc}
 5229              	.LVL332:
 5230              	.L500:
 372:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5231              		.loc 1 372 6 is_stmt 1 view .LVU1612
 372:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5232              		.loc 1 372 32 is_stmt 0 view .LVU1613
 5233 16ea FFF7FEFF 		bl	bldc_getAdcI1Offset
 5234              	.LVL333:
 372:TMCL.c        **** 				} else if (command == TMCL_STAP) {
 5235              		.loc 1 372 30 view .LVU1614
 5236 16ee E060     		str	r0, [r4, #12]
 5237              		.loc 1 1594 1 view .LVU1615
 5238 16f0 38BD     		pop	{r3, r4, r5, pc}
 5239              	.LVL334:
 5240              	.L519:
 360:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 5241              		.loc 1 360 6 is_stmt 1 view .LVU1616
 5242 16f2 0222     		movs	r2, #2
 5243              		.loc 1 1594 1 is_stmt 0 view .LVU1617
 5244 16f4 BDE83840 		pop	{r3, r4, r5, lr}
 5245              	.LCFI177:
 5246              		.cfi_remember_state
 5247              		.cfi_restore 14
 5248              		.cfi_restore 5
 5249              		.cfi_restore 4
 5250              		.cfi_restore 3
 5251              		.cfi_def_cfa_offset 0
 360:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 5252              		.loc 1 360 6 view .LVU1618
 5253 16f8 A420     		movs	r0, #164
 5254              	.LVL335:
 360:TMCL.c        **** 							(u8 *)&motorConfig.adc_I0_offset, sizeof(motorConfig.adc_I0_offset));
 5255              		.loc 1 360 6 view .LVU1619
 5256 16fa 2149     		ldr	r1, .L534+8
 5257 16fc FFF7FEBF 		b	eeprom_writeConfigBlock
 5258              	.LVL336:
 5259              	.L516:
 5260              	.LCFI178:
 5261              		.cfi_restore_state
 440:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 5262              		.loc 1 440 6 is_stmt 1 view .LVU1620
 5263 1700 0122     		movs	r2, #1
 5264              		.loc 1 1594 1 is_stmt 0 view .LVU1621
 5265 1702 BDE83840 		pop	{r3, r4, r5, lr}
 5266              	.LCFI179:
 5267              		.cfi_remember_state
 5268              		.cfi_restore 14
 5269              		.cfi_restore 5
 5270              		.cfi_restore 4
 5271              		.cfi_restore 3
 5272              		.cfi_def_cfa_offset 0
 440:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 5273              		.loc 1 440 6 view .LVU1622
 5274 1706 AA20     		movs	r0, #170
 5275              	.LVL337:
 440:TMCL.c        **** 						(u8 *)&motorConfig.commutationMode, sizeof(motorConfig.commutationMode));
 5276              		.loc 1 440 6 view .LVU1623
 5277 1708 1E49     		ldr	r1, .L534+12
 5278 170a FFF7FEBF 		b	eeprom_writeConfigBlock
 5279              	.LVL338:
 5280              	.L470:
 5281              	.LCFI180:
 5282              		.cfi_restore_state
 401:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 5283              		.loc 1 401 6 is_stmt 1 view .LVU1624
 5284 170e 0222     		movs	r2, #2
 5285              		.loc 1 1594 1 is_stmt 0 view .LVU1625
 5286 1710 BDE83840 		pop	{r3, r4, r5, lr}
 5287              	.LCFI181:
 5288              		.cfi_remember_state
 5289              		.cfi_restore 14
 5290              		.cfi_restore 5
 5291              		.cfi_restore 4
 5292              		.cfi_restore 3
 5293              		.cfi_def_cfa_offset 0
 401:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 5294              		.loc 1 401 6 view .LVU1626
 5295 1714 A820     		movs	r0, #168
 5296              	.LVL339:
 401:TMCL.c        **** 							(u8 *)&motorConfig.dualShuntFactor, sizeof(motorConfig.dualShuntFactor));
 5297              		.loc 1 401 6 view .LVU1627
 5298 1716 1C49     		ldr	r1, .L534+16
 5299 1718 FFF7FEBF 		b	eeprom_writeConfigBlock
 5300              	.LVL340:
 5301              	.L501:
 5302              	.LCFI182:
 5303              		.cfi_restore_state
 374:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 5304              		.loc 1 374 6 is_stmt 1 view .LVU1628
 5305 171c 0222     		movs	r2, #2
 5306              		.loc 1 1594 1 is_stmt 0 view .LVU1629
 5307 171e BDE83840 		pop	{r3, r4, r5, lr}
 5308              	.LCFI183:
 5309              		.cfi_remember_state
 5310              		.cfi_restore 14
 5311              		.cfi_restore 5
 5312              		.cfi_restore 4
 5313              		.cfi_restore 3
 5314              		.cfi_def_cfa_offset 0
 374:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 5315              		.loc 1 374 6 view .LVU1630
 5316 1722 A620     		movs	r0, #166
 5317              	.LVL341:
 374:TMCL.c        **** 							(u8 *)&motorConfig.adc_I1_offset, sizeof(motorConfig.adc_I1_offset));
 5318              		.loc 1 374 6 view .LVU1631
 5319 1724 1949     		ldr	r1, .L534+20
 5320 1726 FFF7FEBF 		b	eeprom_writeConfigBlock
 5321              	.LVL342:
 5322              	.L379:
 5323              	.LCFI184:
 5324              		.cfi_restore_state
1159:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
 5325              		.loc 1 1159 6 is_stmt 1 view .LVU1632
 5326 172a 0122     		movs	r2, #1
 5327              		.loc 1 1594 1 is_stmt 0 view .LVU1633
 5328 172c BDE83840 		pop	{r3, r4, r5, lr}
 5329              	.LCFI185:
 5330              		.cfi_remember_state
 5331              		.cfi_restore 14
 5332              		.cfi_restore 5
 5333              		.cfi_restore 4
 5334              		.cfi_restore 3
 5335              		.cfi_def_cfa_offset 0
1159:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
 5336              		.loc 1 1159 6 view .LVU1634
 5337 1730 7C20     		movs	r0, #124
 5338              	.LVL343:
1159:TMCL.c        **** 						(u8 *)&motorConfig.polePairs, sizeof(motorConfig.polePairs));
 5339              		.loc 1 1159 6 view .LVU1635
 5340 1732 1749     		ldr	r1, .L534+24
 5341 1734 FFF7FEBF 		b	eeprom_writeConfigBlock
 5342              	.LVL344:
 5343              	.L520:
 5344              	.LCFI186:
 5345              		.cfi_restore_state
 540:TMCL.c        **** 					else
 5346              		.loc 1 540 7 is_stmt 1 view .LVU1636
 5347              		.loc 1 1594 1 is_stmt 0 view .LVU1637
 5348 1738 BDE83840 		pop	{r3, r4, r5, lr}
 5349              	.LCFI187:
 5350              		.cfi_remember_state
 5351              		.cfi_restore 14
 5352              		.cfi_restore 5
 5353              		.cfi_restore 4
 5354              		.cfi_restore 3
 5355              		.cfi_def_cfa_offset 0
 540:TMCL.c        **** 					else
 5356              		.loc 1 540 7 view .LVU1638
 5357 173c FFF7FEBF 		b	bldc_setTargetMotorCurrent
 5358              	.LVL345:
 5359              	.L495:
 5360              	.LCFI188:
 5361              		.cfi_restore_state
 527:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 5362              		.loc 1 527 6 is_stmt 1 view .LVU1639
 5363 1740 0222     		movs	r2, #2
 5364              		.loc 1 1594 1 is_stmt 0 view .LVU1640
 5365 1742 BDE83840 		pop	{r3, r4, r5, lr}
 5366              	.LCFI189:
 5367              		.cfi_remember_state
 5368              		.cfi_restore 14
 5369              		.cfi_restore 5
 5370              		.cfi_restore 4
 5371              		.cfi_restore 3
 5372              		.cfi_def_cfa_offset 0
 527:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 5373              		.loc 1 527 6 view .LVU1641
 5374 1746 CE20     		movs	r0, #206
 5375              	.LVL346:
 527:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_I_param, sizeof(motorConfig.pidVelocity_I_param));
 5376              		.loc 1 527 6 view .LVU1642
 5377 1748 1249     		ldr	r1, .L534+28
 5378 174a FFF7FEBF 		b	eeprom_writeConfigBlock
 5379              	.LVL347:
 5380              	.L352:
 5381              	.LCFI190:
 5382              		.cfi_restore_state
1261:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
 5383              		.loc 1 1261 6 is_stmt 1 view .LVU1643
 5384 174e 0122     		movs	r2, #1
 5385              		.loc 1 1594 1 is_stmt 0 view .LVU1644
 5386 1750 BDE83840 		pop	{r3, r4, r5, lr}
 5387              	.LCFI191:
 5388              		.cfi_remember_state
 5389              		.cfi_restore 14
 5390              		.cfi_restore 5
 5391              		.cfi_restore 4
 5392              		.cfi_restore 3
 5393              		.cfi_def_cfa_offset 0
1261:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
 5394              		.loc 1 1261 6 view .LVU1645
 5395 1754 8620     		movs	r0, #134
 5396              	.LVL348:
1261:TMCL.c        **** 						(u8 *)&motorConfig.hallDirection, sizeof(motorConfig.hallDirection));
 5397              		.loc 1 1261 6 view .LVU1646
 5398 1756 1049     		ldr	r1, .L534+32
 5399 1758 FFF7FEBF 		b	eeprom_writeConfigBlock
 5400              	.LVL349:
 5401              	.L498:
 5402              	.LCFI192:
 5403              		.cfi_restore_state
 510:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 5404              		.loc 1 510 6 is_stmt 1 view .LVU1647
 5405 175c 0222     		movs	r2, #2
 5406              		.loc 1 1594 1 is_stmt 0 view .LVU1648
 5407 175e BDE83840 		pop	{r3, r4, r5, lr}
 5408              	.LCFI193:
 5409              		.cfi_remember_state
 5410              		.cfi_restore 14
 5411              		.cfi_restore 5
 5412              		.cfi_restore 4
 5413              		.cfi_restore 3
 5414              		.cfi_def_cfa_offset 0
 510:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 5415              		.loc 1 510 6 view .LVU1649
 5416 1762 CC20     		movs	r0, #204
 5417              	.LVL350:
 510:TMCL.c        **** 						(u8 *)&motorConfig.pidVelocity_P_param, sizeof(motorConfig.pidVelocity_P_param));
 5418              		.loc 1 510 6 view .LVU1650
 5419 1764 0D49     		ldr	r1, .L534+36
 5420 1766 FFF7FEBF 		b	eeprom_writeConfigBlock
 5421              	.LVL351:
 5422              	.L355:
 5423              	.LCFI194:
 5424              		.cfi_restore_state
1246:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
 5425              		.loc 1 1246 6 is_stmt 1 view .LVU1651
 5426 176a 0122     		movs	r2, #1
 5427              		.loc 1 1594 1 is_stmt 0 view .LVU1652
 5428 176c BDE83840 		pop	{r3, r4, r5, lr}
 5429              	.LCFI195:
 5430              		.cfi_remember_state
 5431              		.cfi_restore 14
 5432              		.cfi_restore 5
 5433              		.cfi_restore 4
 5434              		.cfi_restore 3
 5435              		.cfi_def_cfa_offset 0
1246:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
 5436              		.loc 1 1246 6 view .LVU1653
 5437 1770 8520     		movs	r0, #133
 5438              	.LVL352:
1246:TMCL.c        **** 						(u8 *)&motorConfig.hallInterpolation, sizeof(motorConfig.hallInterpolation));
 5439              		.loc 1 1246 6 view .LVU1654
 5440 1772 0B49     		ldr	r1, .L534+40
 5441 1774 FFF7FEBF 		b	eeprom_writeConfigBlock
 5442              	.LVL353:
 5443              	.L535:
 5444              		.align	2
 5445              	.L534:
 5446 1778 00000000 		.word	motorConfig
 5447 177c 0000FFFF 		.word	-65536
 5448 1780 64000000 		.word	motorConfig+100
 5449 1784 6A000000 		.word	motorConfig+106
 5450 1788 68000000 		.word	motorConfig+104
 5451 178c 66000000 		.word	motorConfig+102
 5452 1790 3C000000 		.word	motorConfig+60
 5453 1794 8E000000 		.word	motorConfig+142
 5454 1798 46000000 		.word	motorConfig+70
 5455 179c 8C000000 		.word	motorConfig+140
 5456 17a0 45000000 		.word	motorConfig+69
 5457              	.LVL354:
 5458              	.L358:
 5459              	.LCFI196:
 5460              		.cfi_restore_state
1231:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
 5461              		.loc 1 1231 6 is_stmt 1 view .LVU1655
 5462 17a4 0122     		movs	r2, #1
 5463              		.loc 1 1594 1 is_stmt 0 view .LVU1656
 5464 17a6 BDE83840 		pop	{r3, r4, r5, lr}
 5465              	.LCFI197:
 5466              		.cfi_remember_state
 5467              		.cfi_restore 14
 5468              		.cfi_restore 5
 5469              		.cfi_restore 4
 5470              		.cfi_restore 3
 5471              		.cfi_def_cfa_offset 0
1231:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
 5472              		.loc 1 1231 6 view .LVU1657
 5473 17aa 8420     		movs	r0, #132
 5474              	.LVL355:
1231:TMCL.c        **** 						(u8 *)&motorConfig.hallPolarity, sizeof(motorConfig.hallPolarity));
 5475              		.loc 1 1231 6 view .LVU1658
 5476 17ac B049     		ldr	r1, .L536
 5477 17ae FFF7FEBF 		b	eeprom_writeConfigBlock
 5478              	.LVL356:
 5479              	.L406:
 5480              	.LCFI198:
 5481              		.cfi_restore_state
 611:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 5482              		.loc 1 611 6 is_stmt 1 view .LVU1659
 5483 17b2 0122     		movs	r2, #1
 5484              		.loc 1 1594 1 is_stmt 0 view .LVU1660
 5485 17b4 BDE83840 		pop	{r3, r4, r5, lr}
 5486              	.LCFI199:
 5487              		.cfi_remember_state
 5488              		.cfi_restore 14
 5489              		.cfi_restore 5
 5490              		.cfi_restore 4
 5491              		.cfi_restore 3
 5492              		.cfi_def_cfa_offset 0
 611:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 5493              		.loc 1 611 6 view .LVU1661
 5494 17b8 BB20     		movs	r0, #187
 5495              	.LVL357:
 611:TMCL.c        **** 						(u8 *)&motorConfig.useVelocityRamp, sizeof(motorConfig.useVelocityRamp));
 5496              		.loc 1 611 6 view .LVU1662
 5497 17ba AE49     		ldr	r1, .L536+4
 5498 17bc FFF7FEBF 		b	eeprom_writeConfigBlock
 5499              	.LVL358:
 5500              	.L391:
 5501              	.LCFI200:
 5502              		.cfi_restore_state
 708:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 5503              		.loc 1 708 6 is_stmt 1 view .LVU1663
 5504 17c0 0222     		movs	r2, #2
 5505              		.loc 1 1594 1 is_stmt 0 view .LVU1664
 5506 17c2 BDE83840 		pop	{r3, r4, r5, lr}
 5507              	.LCFI201:
 5508              		.cfi_remember_state
 5509              		.cfi_restore 14
 5510              		.cfi_restore 5
 5511              		.cfi_restore 4
 5512              		.cfi_restore 3
 5513              		.cfi_def_cfa_offset 0
 708:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 5514              		.loc 1 708 6 view .LVU1665
 5515 17c6 4A20     		movs	r0, #74
 5516              	.LVL359:
 708:TMCL.c        **** 						(u8 *)&motorConfig.assistCutOutDistance, sizeof(motorConfig.assistCutOutDistance));
 5517              		.loc 1 708 6 view .LVU1666
 5518 17c8 AB49     		ldr	r1, .L536+8
 5519 17ca FFF7FEBF 		b	eeprom_writeConfigBlock
 5520              	.LVL360:
 5521              	.L421:
 5522              	.LCFI202:
 5523              		.cfi_restore_state
 493:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 5524              		.loc 1 493 6 is_stmt 1 view .LVU1667
 5525 17ce 0222     		movs	r2, #2
 5526              		.loc 1 1594 1 is_stmt 0 view .LVU1668
 5527 17d0 BDE83840 		pop	{r3, r4, r5, lr}
 5528              	.LCFI203:
 5529              		.cfi_remember_state
 5530              		.cfi_restore 14
 5531              		.cfi_restore 5
 5532              		.cfi_restore 4
 5533              		.cfi_restore 3
 5534              		.cfi_def_cfa_offset 0
 493:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 5535              		.loc 1 493 6 view .LVU1669
 5536 17d4 CA20     		movs	r0, #202
 5537              	.LVL361:
 493:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_I_param, sizeof(motorConfig.pidTorque_I_param));
 5538              		.loc 1 493 6 view .LVU1670
 5539 17d6 A949     		ldr	r1, .L536+12
 5540 17d8 FFF7FEBF 		b	eeprom_writeConfigBlock
 5541              	.LVL362:
 5542              	.L346:
 5543              	.LCFI204:
 5544              		.cfi_restore_state
1373:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
 5545              		.loc 1 1373 6 is_stmt 1 view .LVU1671
 5546 17dc 0222     		movs	r2, #2
 5547              		.loc 1 1594 1 is_stmt 0 view .LVU1672
 5548 17de BDE83840 		pop	{r3, r4, r5, lr}
 5549              	.LCFI205:
 5550              		.cfi_remember_state
 5551              		.cfi_restore 14
 5552              		.cfi_restore 5
 5553              		.cfi_restore 4
 5554              		.cfi_restore 3
 5555              		.cfi_def_cfa_offset 0
1373:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
 5556              		.loc 1 1373 6 view .LVU1673
 5557 17e2 9020     		movs	r0, #144
 5558              	.LVL363:
1373:TMCL.c        **** 						(u8 *)&motorConfig.maxBatteryVoltage, sizeof(motorConfig.maxBatteryVoltage));
 5559              		.loc 1 1373 6 view .LVU1674
 5560 17e4 A649     		ldr	r1, .L536+16
 5561 17e6 FFF7FEBF 		b	eeprom_writeConfigBlock
 5562              	.LVL364:
 5563              	.L409:
 5564              	.LCFI206:
 5565              		.cfi_restore_state
 597:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 5566              		.loc 1 597 6 is_stmt 1 view .LVU1675
 5567 17ea 0422     		movs	r2, #4
 5568              		.loc 1 1594 1 is_stmt 0 view .LVU1676
 5569 17ec BDE83840 		pop	{r3, r4, r5, lr}
 5570              	.LCFI207:
 5571              		.cfi_remember_state
 5572              		.cfi_restore 14
 5573              		.cfi_restore 5
 5574              		.cfi_restore 4
 5575              		.cfi_restore 3
 5576              		.cfi_def_cfa_offset 0
 597:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 5577              		.loc 1 597 6 view .LVU1677
 5578 17f0 9C20     		movs	r0, #156
 5579              	.LVL365:
 597:TMCL.c        **** 						(u8 *)&motorConfig.acceleration, sizeof(motorConfig.acceleration));
 5580              		.loc 1 597 6 view .LVU1678
 5581 17f2 A449     		ldr	r1, .L536+20
 5582 17f4 FFF7FEBF 		b	eeprom_writeConfigBlock
 5583              	.LVL366:
 5584              	.L340:
 5585              	.LCFI208:
 5586              		.cfi_restore_state
1405:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
 5587              		.loc 1 1405 6 is_stmt 1 view .LVU1679
 5588 17f8 0222     		movs	r2, #2
 5589              		.loc 1 1594 1 is_stmt 0 view .LVU1680
 5590 17fa BDE83840 		pop	{r3, r4, r5, lr}
 5591              	.LCFI209:
 5592              		.cfi_remember_state
 5593              		.cfi_restore 14
 5594              		.cfi_restore 5
 5595              		.cfi_restore 4
 5596              		.cfi_restore 3
 5597              		.cfi_def_cfa_offset 0
1405:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
 5598              		.loc 1 1405 6 view .LVU1681
 5599 17fe 9420     		movs	r0, #148
 5600              	.LVL367:
1405:TMCL.c        **** 						(u8 *)&motorConfig.batterySavingTimer, sizeof(motorConfig.batterySavingTimer));
 5601              		.loc 1 1405 6 view .LVU1682
 5602 1800 A149     		ldr	r1, .L536+24
 5603 1802 FFF7FEBF 		b	eeprom_writeConfigBlock
 5604              	.LVL368:
 5605              	.L343:
 5606              	.LCFI210:
 5607              		.cfi_restore_state
1389:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
 5608              		.loc 1 1389 6 is_stmt 1 view .LVU1683
 5609 1806 0222     		movs	r2, #2
 5610              		.loc 1 1594 1 is_stmt 0 view .LVU1684
 5611 1808 BDE83840 		pop	{r3, r4, r5, lr}
 5612              	.LCFI211:
 5613              		.cfi_remember_state
 5614              		.cfi_restore 14
 5615              		.cfi_restore 5
 5616              		.cfi_restore 4
 5617              		.cfi_restore 3
 5618              		.cfi_def_cfa_offset 0
1389:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
 5619              		.loc 1 1389 6 view .LVU1685
 5620 180c 9220     		movs	r0, #146
 5621              	.LVL369:
1389:TMCL.c        **** 						(u8 *)&motorConfig.cutOffVoltage, sizeof(motorConfig.cutOffVoltage));
 5622              		.loc 1 1389 6 view .LVU1686
 5623 180e 9F49     		ldr	r1, .L536+28
 5624 1810 FFF7FEBF 		b	eeprom_writeConfigBlock
 5625              	.LVL370:
 5626              	.L463:
 5627              	.LCFI212:
 5628              		.cfi_restore_state
 583:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 5629              		.loc 1 583 6 is_stmt 1 view .LVU1687
 5630 1814 0422     		movs	r2, #4
 5631              		.loc 1 1594 1 is_stmt 0 view .LVU1688
 5632 1816 BDE83840 		pop	{r3, r4, r5, lr}
 5633              	.LCFI213:
 5634              		.cfi_remember_state
 5635              		.cfi_restore 14
 5636              		.cfi_restore 5
 5637              		.cfi_restore 4
 5638              		.cfi_restore 3
 5639              		.cfi_def_cfa_offset 0
 583:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 5640              		.loc 1 583 6 view .LVU1689
 5641 181a 9820     		movs	r0, #152
 5642              	.LVL371:
 583:TMCL.c        **** 							(u8 *)&motorConfig.maxPositioningSpeed, sizeof(motorConfig.maxPositioningSpeed));
 5643              		.loc 1 583 6 view .LVU1690
 5644 181c 9C49     		ldr	r1, .L536+32
 5645 181e FFF7FEBF 		b	eeprom_writeConfigBlock
 5646              	.LVL372:
 5647              	.L361:
 5648              	.LCFI214:
 5649              		.cfi_restore_state
1216:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
 5650              		.loc 1 1216 6 is_stmt 1 view .LVU1691
 5651 1822 0222     		movs	r2, #2
 5652              		.loc 1 1594 1 is_stmt 0 view .LVU1692
 5653 1824 BDE83840 		pop	{r3, r4, r5, lr}
 5654              	.LCFI215:
 5655              		.cfi_remember_state
 5656              		.cfi_restore 14
 5657              		.cfi_restore 5
 5658              		.cfi_restore 4
 5659              		.cfi_restore 3
 5660              		.cfi_def_cfa_offset 0
1216:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
 5661              		.loc 1 1216 6 view .LVU1693
 5662 1828 8220     		movs	r0, #130
 5663              	.LVL373:
1216:TMCL.c        **** 						(u8 *)&motorConfig.hallOffset, sizeof(motorConfig.hallOffset));
 5664              		.loc 1 1216 6 view .LVU1694
 5665 182a 9A49     		ldr	r1, .L536+36
 5666 182c FFF7FEBF 		b	eeprom_writeConfigBlock
 5667              	.LVL374:
 5668              	.L433:
 5669              	.LCFI216:
 5670              		.cfi_restore_state
1108:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
 5671              		.loc 1 1108 6 is_stmt 1 view .LVU1695
 5672 1830 0222     		movs	r2, #2
 5673              		.loc 1 1594 1 is_stmt 0 view .LVU1696
 5674 1832 BDE83840 		pop	{r3, r4, r5, lr}
 5675              	.LCFI217:
 5676              		.cfi_remember_state
 5677              		.cfi_restore 14
 5678              		.cfi_restore 5
 5679              		.cfi_restore 4
 5680              		.cfi_restore 3
 5681              		.cfi_def_cfa_offset 0
1108:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
 5682              		.loc 1 1108 6 view .LVU1697
 5683 1836 7620     		movs	r0, #118
 5684              	.LVL375:
1108:TMCL.c        **** 						(u8 *)&motorConfig.maximumSpeed, sizeof(motorConfig.maximumSpeed));
 5685              		.loc 1 1108 6 view .LVU1698
 5686 1838 9749     		ldr	r1, .L536+40
 5687 183a FFF7FEBF 		b	eeprom_writeConfigBlock
 5688              	.LVL376:
 5689              	.L388:
 5690              	.LCFI218:
 5691              		.cfi_restore_state
1144:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
 5692              		.loc 1 1144 6 is_stmt 1 view .LVU1699
 5693 183e 0422     		movs	r2, #4
 5694              		.loc 1 1594 1 is_stmt 0 view .LVU1700
 5695 1840 BDE83840 		pop	{r3, r4, r5, lr}
 5696              	.LCFI219:
 5697              		.cfi_remember_state
 5698              		.cfi_restore 14
 5699              		.cfi_restore 5
 5700              		.cfi_restore 4
 5701              		.cfi_restore 3
 5702              		.cfi_def_cfa_offset 0
1144:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
 5703              		.loc 1 1144 6 view .LVU1701
 5704 1844 7820     		movs	r0, #120
 5705              	.LVL377:
1144:TMCL.c        **** 						(u8 *)&motorConfig.maximumCurrent, sizeof(motorConfig.maximumCurrent));
 5706              		.loc 1 1144 6 view .LVU1702
 5707 1846 9549     		ldr	r1, .L536+44
 5708 1848 FFF7FEBF 		b	eeprom_writeConfigBlock
 5709              	.LVL378:
 5710              	.L513:
 5711              	.LCFI220:
 5712              		.cfi_restore_state
 475:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 5713              		.loc 1 475 6 is_stmt 1 view .LVU1703
 5714 184c 0222     		movs	r2, #2
 5715              		.loc 1 1594 1 is_stmt 0 view .LVU1704
 5716 184e BDE83840 		pop	{r3, r4, r5, lr}
 5717              	.LCFI221:
 5718              		.cfi_remember_state
 5719              		.cfi_restore 14
 5720              		.cfi_restore 5
 5721              		.cfi_restore 4
 5722              		.cfi_restore 3
 5723              		.cfi_def_cfa_offset 0
 475:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 5724              		.loc 1 475 6 view .LVU1705
 5725 1852 C820     		movs	r0, #200
 5726              	.LVL379:
 475:TMCL.c        **** 						(u8 *)&motorConfig.pidTorque_P_param, sizeof(motorConfig.pidTorque_P_param));
 5727              		.loc 1 475 6 view .LVU1706
 5728 1854 9249     		ldr	r1, .L536+48
 5729 1856 FFF7FEBF 		b	eeprom_writeConfigBlock
 5730              	.LVL380:
 5731              	.L424:
 5732              	.LCFI222:
 5733              		.cfi_restore_state
1046:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
 5734              		.loc 1 1046 6 is_stmt 1 view .LVU1707
 5735 185a 0122     		movs	r2, #1
 5736              		.loc 1 1594 1 is_stmt 0 view .LVU1708
 5737 185c BDE83840 		pop	{r3, r4, r5, lr}
 5738              	.LCFI223:
 5739              		.cfi_remember_state
 5740              		.cfi_restore 14
 5741              		.cfi_restore 5
 5742              		.cfi_restore 4
 5743              		.cfi_restore 3
 5744              		.cfi_def_cfa_offset 0
1046:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
 5745              		.loc 1 1046 6 view .LVU1709
 5746 1860 7120     		movs	r0, #113
 5747              	.LVL381:
1046:TMCL.c        **** 						(u8 *)&motorConfig.torque_5, sizeof(motorConfig.torque_5));
 5748              		.loc 1 1046 6 view .LVU1710
 5749 1862 9049     		ldr	r1, .L536+52
 5750 1864 FFF7FEBF 		b	eeprom_writeConfigBlock
 5751              	.LVL382:
 5752              	.L427:
 5753              	.LCFI224:
 5754              		.cfi_restore_state
1031:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
 5755              		.loc 1 1031 6 is_stmt 1 view .LVU1711
 5756 1868 0122     		movs	r2, #1
 5757              		.loc 1 1594 1 is_stmt 0 view .LVU1712
 5758 186a BDE83840 		pop	{r3, r4, r5, lr}
 5759              	.LCFI225:
 5760              		.cfi_remember_state
 5761              		.cfi_restore 14
 5762              		.cfi_restore 5
 5763              		.cfi_restore 4
 5764              		.cfi_restore 3
 5765              		.cfi_def_cfa_offset 0
1031:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
 5766              		.loc 1 1031 6 view .LVU1713
 5767 186e 7020     		movs	r0, #112
 5768              	.LVL383:
1031:TMCL.c        **** 						(u8 *)&motorConfig.torque_4, sizeof(motorConfig.torque_4));
 5769              		.loc 1 1031 6 view .LVU1714
 5770 1870 8D49     		ldr	r1, .L536+56
 5771 1872 FFF7FEBF 		b	eeprom_writeConfigBlock
 5772              	.LVL384:
 5773              	.L370:
 5774              	.LCFI226:
 5775              		.cfi_restore_state
1275:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
 5776              		.loc 1 1275 6 is_stmt 1 view .LVU1715
 5777 1876 0222     		movs	r2, #2
 5778              		.loc 1 1594 1 is_stmt 0 view .LVU1716
 5779 1878 BDE83840 		pop	{r3, r4, r5, lr}
 5780              	.LCFI227:
 5781              		.cfi_remember_state
 5782              		.cfi_restore 14
 5783              		.cfi_restore 5
 5784              		.cfi_restore 4
 5785              		.cfi_restore 3
 5786              		.cfi_def_cfa_offset 0
1275:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
 5787              		.loc 1 1275 6 view .LVU1717
 5788 187c 8820     		movs	r0, #136
 5789              	.LVL385:
1275:TMCL.c        **** 						(u8 *)&motorConfig.currentRegulatorBandwidth, sizeof(motorConfig.currentRegulatorBandwidth));
 5790              		.loc 1 1275 6 view .LVU1718
 5791 187e 8B49     		ldr	r1, .L536+60
 5792 1880 FFF7FEBF 		b	eeprom_writeConfigBlock
 5793              	.LVL386:
 5794              	.L467:
 5795              	.LCFI228:
 5796              		.cfi_restore_state
 866:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 5797              		.loc 1 866 6 is_stmt 1 view .LVU1719
 5798 1884 0222     		movs	r2, #2
 5799              		.loc 1 1594 1 is_stmt 0 view .LVU1720
 5800 1886 BDE83840 		pop	{r3, r4, r5, lr}
 5801              	.LCFI229:
 5802              		.cfi_remember_state
 5803              		.cfi_restore 14
 5804              		.cfi_restore 5
 5805              		.cfi_restore 4
 5806              		.cfi_restore 3
 5807              		.cfi_def_cfa_offset 0
 866:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 5808              		.loc 1 866 6 view .LVU1721
 5809 188a 5E20     		movs	r0, #94
 5810              	.LVL387:
 866:TMCL.c        **** 						(u8 *)&motorConfig.speed_2, sizeof(motorConfig.speed_2));
 5811              		.loc 1 866 6 view .LVU1722
 5812 188c 8849     		ldr	r1, .L536+64
 5813 188e FFF7FEBF 		b	eeprom_writeConfigBlock
 5814              	.LVL388:
 5815              	.L400:
 5816              	.LCFI230:
 5817              		.cfi_restore_state
 662:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 5818              		.loc 1 662 6 is_stmt 1 view .LVU1723
 5819 1892 0222     		movs	r2, #2
 5820              		.loc 1 1594 1 is_stmt 0 view .LVU1724
 5821 1894 BDE83840 		pop	{r3, r4, r5, lr}
 5822              	.LCFI231:
 5823              		.cfi_remember_state
 5824              		.cfi_restore 14
 5825              		.cfi_restore 5
 5826              		.cfi_restore 4
 5827              		.cfi_restore 3
 5828              		.cfi_def_cfa_offset 0
 662:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 5829              		.loc 1 662 6 view .LVU1725
 5830 1898 4420     		movs	r0, #68
 5831              	.LVL389:
 662:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorGain, sizeof(motorConfig.torqueSensorGain));
 5832              		.loc 1 662 6 view .LVU1726
 5833 189a 8649     		ldr	r1, .L536+68
 5834 189c FFF7FEBF 		b	eeprom_writeConfigBlock
 5835              	.LVL390:
 5836              	.L482:
 5837              	.LCFI232:
 5838              		.cfi_restore_state
 723:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 5839              		.loc 1 723 6 is_stmt 1 view .LVU1727
 5840 18a0 0422     		movs	r2, #4
 5841              		.loc 1 1594 1 is_stmt 0 view .LVU1728
 5842 18a2 BDE83840 		pop	{r3, r4, r5, lr}
 5843              	.LCFI233:
 5844              		.cfi_remember_state
 5845              		.cfi_restore 14
 5846              		.cfi_restore 5
 5847              		.cfi_restore 4
 5848              		.cfi_restore 3
 5849              		.cfi_def_cfa_offset 0
 723:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 5850              		.loc 1 723 6 view .LVU1729
 5851 18a6 4C20     		movs	r0, #76
 5852              	.LVL391:
 723:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorque, sizeof(motorConfig.initialRightTorque));
 5853              		.loc 1 723 6 view .LVU1730
 5854 18a8 8349     		ldr	r1, .L536+72
 5855 18aa FFF7FEBF 		b	eeprom_writeConfigBlock
 5856              	.LVL392:
 5857              	.L507:
 5858              	.LCFI234:
 5859              		.cfi_restore_state
 820:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 5860              		.loc 1 820 6 is_stmt 1 view .LVU1731
 5861 18ae 0222     		movs	r2, #2
 5862              		.loc 1 1594 1 is_stmt 0 view .LVU1732
 5863 18b0 BDE83840 		pop	{r3, r4, r5, lr}
 5864              	.LCFI235:
 5865              		.cfi_remember_state
 5866              		.cfi_restore 14
 5867              		.cfi_restore 5
 5868              		.cfi_restore 4
 5869              		.cfi_restore 3
 5870              		.cfi_def_cfa_offset 0
 820:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 5871              		.loc 1 820 6 view .LVU1733
 5872 18b4 5820     		movs	r0, #88
 5873              	.LVL393:
 820:TMCL.c        **** 						(u8 *)&motorConfig.negativeMotoringRampTime, sizeof(motorConfig.negativeMotoringRampTime));
 5874              		.loc 1 820 6 view .LVU1734
 5875 18b6 8149     		ldr	r1, .L536+76
 5876 18b8 FFF7FEBF 		b	eeprom_writeConfigBlock
 5877              	.LVL394:
 5878              	.L488:
 5879              	.LCFI236:
 5880              		.cfi_restore_state
 911:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 5881              		.loc 1 911 6 is_stmt 1 view .LVU1735
 5882 18bc 0222     		movs	r2, #2
 5883              		.loc 1 1594 1 is_stmt 0 view .LVU1736
 5884 18be BDE83840 		pop	{r3, r4, r5, lr}
 5885              	.LCFI237:
 5886              		.cfi_remember_state
 5887              		.cfi_restore 14
 5888              		.cfi_restore 5
 5889              		.cfi_restore 4
 5890              		.cfi_restore 3
 5891              		.cfi_def_cfa_offset 0
 911:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 5892              		.loc 1 911 6 view .LVU1737
 5893 18c2 6420     		movs	r0, #100
 5894              	.LVL395:
 911:TMCL.c        **** 						(u8 *)&motorConfig.speed_5, sizeof(motorConfig.speed_5));
 5895              		.loc 1 911 6 view .LVU1738
 5896 18c4 7E49     		ldr	r1, .L536+80
 5897 18c6 FFF7FEBF 		b	eeprom_writeConfigBlock
 5898              	.LVL396:
 5899              	.L373:
 5900              	.LCFI238:
 5901              		.cfi_restore_state
1201:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
 5902              		.loc 1 1201 6 is_stmt 1 view .LVU1739
 5903 18ca 0122     		movs	r2, #1
 5904              		.loc 1 1594 1 is_stmt 0 view .LVU1740
 5905 18cc BDE83840 		pop	{r3, r4, r5, lr}
 5906              	.LCFI239:
 5907              		.cfi_remember_state
 5908              		.cfi_restore 14
 5909              		.cfi_restore 5
 5910              		.cfi_restore 4
 5911              		.cfi_restore 3
 5912              		.cfi_def_cfa_offset 0
1201:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
 5913              		.loc 1 1201 6 view .LVU1741
 5914 18d0 8020     		movs	r0, #128
 5915              	.LVL397:
1201:TMCL.c        **** 						(u8 *)&motorConfig.wheelPulsesPerRotation, sizeof(motorConfig.wheelPulsesPerRotation));
 5916              		.loc 1 1201 6 view .LVU1742
 5917 18d2 7C49     		ldr	r1, .L536+84
 5918 18d4 FFF7FEBF 		b	eeprom_writeConfigBlock
 5919              	.LVL398:
 5920              	.L376:
 5921              	.LCFI240:
 5922              		.cfi_restore_state
1173:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
 5923              		.loc 1 1173 6 is_stmt 1 view .LVU1743
 5924 18d8 0122     		movs	r2, #1
 5925              		.loc 1 1594 1 is_stmt 0 view .LVU1744
 5926 18da BDE83840 		pop	{r3, r4, r5, lr}
 5927              	.LCFI241:
 5928              		.cfi_remember_state
 5929              		.cfi_restore 14
 5930              		.cfi_restore 5
 5931              		.cfi_restore 4
 5932              		.cfi_restore 3
 5933              		.cfi_def_cfa_offset 0
1173:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
 5934              		.loc 1 1173 6 view .LVU1745
 5935 18de 7D20     		movs	r0, #125
 5936              	.LVL399:
1173:TMCL.c        **** 						(u8 *)&motorConfig.gearRatio, sizeof(motorConfig.gearRatio));
 5937              		.loc 1 1173 6 view .LVU1746
 5938 18e0 7949     		ldr	r1, .L536+88
 5939 18e2 FFF7FEBF 		b	eeprom_writeConfigBlock
 5940              	.LVL400:
 5941              	.L349:
 5942              	.LCFI242:
 5943              		.cfi_restore_state
1357:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
 5944              		.loc 1 1357 6 is_stmt 1 view .LVU1747
 5945 18e6 0222     		movs	r2, #2
 5946              		.loc 1 1594 1 is_stmt 0 view .LVU1748
 5947 18e8 BDE83840 		pop	{r3, r4, r5, lr}
 5948              	.LCFI243:
 5949              		.cfi_remember_state
 5950              		.cfi_restore 14
 5951              		.cfi_restore 5
 5952              		.cfi_restore 4
 5953              		.cfi_restore 3
 5954              		.cfi_def_cfa_offset 0
1357:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
 5955              		.loc 1 1357 6 view .LVU1749
 5956 18ec 8E20     		movs	r0, #142
 5957              	.LVL401:
1357:TMCL.c        **** 						(u8 *)&motorConfig.minBatteryVoltage, sizeof(motorConfig.minBatteryVoltage));
 5958              		.loc 1 1357 6 view .LVU1750
 5959 18ee 7749     		ldr	r1, .L536+92
 5960 18f0 FFF7FEBF 		b	eeprom_writeConfigBlock
 5961              	.LVL402:
 5962              	.L473:
 5963              	.LCFI244:
 5964              		.cfi_restore_state
 768:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 5965              		.loc 1 768 6 is_stmt 1 view .LVU1751
 5966 18f4 0122     		movs	r2, #1
 5967              		.loc 1 1594 1 is_stmt 0 view .LVU1752
 5968 18f6 BDE83840 		pop	{r3, r4, r5, lr}
 5969              	.LCFI245:
 5970              		.cfi_remember_state
 5971              		.cfi_restore 14
 5972              		.cfi_restore 5
 5973              		.cfi_restore 4
 5974              		.cfi_restore 3
 5975              		.cfi_def_cfa_offset 0
 768:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 5976              		.loc 1 768 6 view .LVU1753
 5977 18fa 5520     		movs	r0, #85
 5978              	.LVL403:
 768:TMCL.c        **** 						(u8 *)&motorConfig.averageSportMode, sizeof(motorConfig.averageSportMode));
 5979              		.loc 1 768 6 view .LVU1754
 5980 18fc 7449     		ldr	r1, .L536+96
 5981 18fe FFF7FEBF 		b	eeprom_writeConfigBlock
 5982              	.LVL404:
 5983              	.L457:
 5984              	.LCFI246:
 5985              		.cfi_restore_state
1091:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
 5986              		.loc 1 1091 6 is_stmt 1 view .LVU1755
 5987 1902 0122     		movs	r2, #1
 5988              		.loc 1 1594 1 is_stmt 0 view .LVU1756
 5989 1904 BDE83840 		pop	{r3, r4, r5, lr}
 5990              	.LCFI247:
 5991              		.cfi_remember_state
 5992              		.cfi_restore 14
 5993              		.cfi_restore 5
 5994              		.cfi_restore 4
 5995              		.cfi_restore 3
 5996              		.cfi_def_cfa_offset 0
1091:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
 5997              		.loc 1 1091 6 view .LVU1757
 5998 1908 7420     		movs	r0, #116
 5999              	.LVL405:
1091:TMCL.c        **** 						(u8 *)&motorConfig.torque_8, sizeof(motorConfig.torque_8));
 6000              		.loc 1 1091 6 view .LVU1758
 6001 190a 7249     		ldr	r1, .L536+100
 6002 190c FFF7FEBF 		b	eeprom_writeConfigBlock
 6003              	.LVL406:
 6004              	.L491:
 6005              	.LCFI248:
 6006              		.cfi_restore_state
 420:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 6007              		.loc 1 420 6 is_stmt 1 view .LVU1759
 6008 1910 0422     		movs	r2, #4
 6009              		.loc 1 1594 1 is_stmt 0 view .LVU1760
 6010 1912 BDE83840 		pop	{r3, r4, r5, lr}
 6011              	.LCFI249:
 6012              		.cfi_remember_state
 6013              		.cfi_restore 14
 6014              		.cfi_restore 5
 6015              		.cfi_restore 4
 6016              		.cfi_restore 3
 6017              		.cfi_def_cfa_offset 0
 420:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 6018              		.loc 1 420 6 view .LVU1761
 6019 1916 A020     		movs	r0, #160
 6020              	.LVL407:
 420:TMCL.c        **** 						(u8 *)&motorConfig.openLoopCurrent, sizeof(motorConfig.openLoopCurrent));
 6021              		.loc 1 420 6 view .LVU1762
 6022 1918 6F49     		ldr	r1, .L536+104
 6023 191a FFF7FEBF 		b	eeprom_writeConfigBlock
 6024              	.LVL408:
 6025              	.L382:
 6026              	.LCFI250:
 6027              		.cfi_restore_state
1187:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
 6028              		.loc 1 1187 6 is_stmt 1 view .LVU1763
 6029 191e 0222     		movs	r2, #2
 6030              		.loc 1 1594 1 is_stmt 0 view .LVU1764
 6031 1920 BDE83840 		pop	{r3, r4, r5, lr}
 6032              	.LCFI251:
 6033              		.cfi_remember_state
 6034              		.cfi_restore 14
 6035              		.cfi_restore 5
 6036              		.cfi_restore 4
 6037              		.cfi_restore 3
 6038              		.cfi_def_cfa_offset 0
1187:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
 6039              		.loc 1 1187 6 view .LVU1765
 6040 1924 7E20     		movs	r0, #126
 6041              	.LVL409:
1187:TMCL.c        **** 						(u8 *)&motorConfig.wheelDiameter, sizeof(motorConfig.wheelDiameter));
 6042              		.loc 1 1187 6 view .LVU1766
 6043 1926 6D49     		ldr	r1, .L536+108
 6044 1928 FFF7FEBF 		b	eeprom_writeConfigBlock
 6045              	.LVL410:
 6046              	.L436:
 6047              	.LCFI252:
 6048              		.cfi_restore_state
1076:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
 6049              		.loc 1 1076 6 is_stmt 1 view .LVU1767
 6050 192c 0122     		movs	r2, #1
 6051              		.loc 1 1594 1 is_stmt 0 view .LVU1768
 6052 192e BDE83840 		pop	{r3, r4, r5, lr}
 6053              	.LCFI253:
 6054              		.cfi_remember_state
 6055              		.cfi_restore 14
 6056              		.cfi_restore 5
 6057              		.cfi_restore 4
 6058              		.cfi_restore 3
 6059              		.cfi_def_cfa_offset 0
1076:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
 6060              		.loc 1 1076 6 view .LVU1769
 6061 1932 7320     		movs	r0, #115
 6062              	.LVL411:
1076:TMCL.c        **** 						(u8 *)&motorConfig.torque_7, sizeof(motorConfig.torque_7));
 6063              		.loc 1 1076 6 view .LVU1770
 6064 1934 6A49     		ldr	r1, .L536+112
 6065 1936 FFF7FEBF 		b	eeprom_writeConfigBlock
 6066              	.LVL412:
 6067              	.L439:
 6068              	.LCFI254:
 6069              		.cfi_restore_state
1061:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
 6070              		.loc 1 1061 6 is_stmt 1 view .LVU1771
 6071 193a 0122     		movs	r2, #1
 6072              		.loc 1 1594 1 is_stmt 0 view .LVU1772
 6073 193c BDE83840 		pop	{r3, r4, r5, lr}
 6074              	.LCFI255:
 6075              		.cfi_remember_state
 6076              		.cfi_restore 14
 6077              		.cfi_restore 5
 6078              		.cfi_restore 4
 6079              		.cfi_restore 3
 6080              		.cfi_def_cfa_offset 0
1061:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
 6081              		.loc 1 1061 6 view .LVU1773
 6082 1940 7220     		movs	r0, #114
 6083              	.LVL413:
1061:TMCL.c        **** 						(u8 *)&motorConfig.torque_6, sizeof(motorConfig.torque_6));
 6084              		.loc 1 1061 6 view .LVU1774
 6085 1942 6849     		ldr	r1, .L536+116
 6086 1944 FFF7FEBF 		b	eeprom_writeConfigBlock
 6087              	.LVL414:
 6088              	.L451:
 6089              	.LCFI256:
 6090              		.cfi_restore_state
1001:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
 6091              		.loc 1 1001 6 is_stmt 1 view .LVU1775
 6092 1948 0122     		movs	r2, #1
 6093              		.loc 1 1594 1 is_stmt 0 view .LVU1776
 6094 194a BDE83840 		pop	{r3, r4, r5, lr}
 6095              	.LCFI257:
 6096              		.cfi_remember_state
 6097              		.cfi_restore 14
 6098              		.cfi_restore 5
 6099              		.cfi_restore 4
 6100              		.cfi_restore 3
 6101              		.cfi_def_cfa_offset 0
1001:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
 6102              		.loc 1 1001 6 view .LVU1777
 6103 194e 6E20     		movs	r0, #110
 6104              	.LVL415:
1001:TMCL.c        **** 						(u8 *)&motorConfig.torque_2, sizeof(motorConfig.torque_2));
 6105              		.loc 1 1001 6 view .LVU1778
 6106 1950 6549     		ldr	r1, .L536+120
 6107 1952 FFF7FEBF 		b	eeprom_writeConfigBlock
 6108              	.LVL416:
 6109              	.L476:
 6110              	.LCFI258:
 6111              		.cfi_restore_state
 753:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 6112              		.loc 1 753 6 is_stmt 1 view .LVU1779
 6113 1956 0122     		movs	r2, #1
 6114              		.loc 1 1594 1 is_stmt 0 view .LVU1780
 6115 1958 BDE83840 		pop	{r3, r4, r5, lr}
 6116              	.LCFI259:
 6117              		.cfi_remember_state
 6118              		.cfi_restore 14
 6119              		.cfi_restore 5
 6120              		.cfi_restore 4
 6121              		.cfi_restore 3
 6122              		.cfi_def_cfa_offset 0
 753:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 6123              		.loc 1 753 6 view .LVU1781
 6124 195c 5420     		movs	r0, #84
 6125              	.LVL417:
 753:TMCL.c        **** 						(u8 *)&motorConfig.leftRightRatio, sizeof(motorConfig.leftRightRatio));
 6126              		.loc 1 753 6 view .LVU1782
 6127 195e 6349     		ldr	r1, .L536+124
 6128 1960 FFF7FEBF 		b	eeprom_writeConfigBlock
 6129              	.LVL418:
 6130              	.L479:
 6131              	.LCFI260:
 6132              		.cfi_restore_state
 738:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 6133              		.loc 1 738 6 is_stmt 1 view .LVU1783
 6134 1964 0422     		movs	r2, #4
 6135              		.loc 1 1594 1 is_stmt 0 view .LVU1784
 6136 1966 BDE83840 		pop	{r3, r4, r5, lr}
 6137              	.LCFI261:
 6138              		.cfi_remember_state
 6139              		.cfi_restore 14
 6140              		.cfi_restore 5
 6141              		.cfi_restore 4
 6142              		.cfi_restore 3
 6143              		.cfi_def_cfa_offset 0
 738:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 6144              		.loc 1 738 6 view .LVU1785
 6145 196a 5020     		movs	r0, #80
 6146              	.LVL419:
 738:TMCL.c        **** 						(u8 *)&motorConfig.initialRightTorqueSpeed, sizeof(motorConfig.initialRightTorqueSpeed));
 6147              		.loc 1 738 6 view .LVU1786
 6148 196c 6049     		ldr	r1, .L536+128
 6149 196e FFF7FEBF 		b	eeprom_writeConfigBlock
 6150              	.LVL420:
 6151              	.L385:
 6152              	.LCFI262:
 6153              		.cfi_restore_state
1305:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
 6154              		.loc 1 1305 6 is_stmt 1 view .LVU1787
 6155 1972 0122     		movs	r2, #1
 6156              		.loc 1 1594 1 is_stmt 0 view .LVU1788
 6157 1974 BDE83840 		pop	{r3, r4, r5, lr}
 6158              	.LCFI263:
 6159              		.cfi_remember_state
 6160              		.cfi_restore 14
 6161              		.cfi_restore 5
 6162              		.cfi_restore 4
 6163              		.cfi_restore 3
 6164              		.cfi_def_cfa_offset 0
1305:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
 6165              		.loc 1 1305 6 view .LVU1789
 6166 1978 8C20     		movs	r0, #140
 6167              	.LVL421:
1305:TMCL.c        **** 						(u8 *)&motorConfig.swapMotorAAndCPhase, sizeof(motorConfig.swapMotorAAndCPhase));
 6168              		.loc 1 1305 6 view .LVU1790
 6169 197a 5E49     		ldr	r1, .L536+132
 6170 197c FFF7FEBF 		b	eeprom_writeConfigBlock
 6171              	.LVL422:
 6172              	.L448:
 6173              	.LCFI264:
 6174              		.cfi_restore_state
 941:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 6175              		.loc 1 941 6 is_stmt 1 view .LVU1791
 6176 1980 0222     		movs	r2, #2
 6177              		.loc 1 1594 1 is_stmt 0 view .LVU1792
 6178 1982 BDE83840 		pop	{r3, r4, r5, lr}
 6179              	.LCFI265:
 6180              		.cfi_remember_state
 6181              		.cfi_restore 14
 6182              		.cfi_restore 5
 6183              		.cfi_restore 4
 6184              		.cfi_restore 3
 6185              		.cfi_def_cfa_offset 0
 941:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 6186              		.loc 1 941 6 view .LVU1793
 6187 1986 6820     		movs	r0, #104
 6188              	.LVL423:
 941:TMCL.c        **** 						(u8 *)&motorConfig.speed_7, sizeof(motorConfig.speed_7));
 6189              		.loc 1 941 6 view .LVU1794
 6190 1988 5B49     		ldr	r1, .L536+136
 6191 198a FFF7FEBF 		b	eeprom_writeConfigBlock
 6192              	.LVL424:
 6193              	.L412:
 6194              	.LCFI266:
 6195              		.cfi_restore_state
 926:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 6196              		.loc 1 926 6 is_stmt 1 view .LVU1795
 6197 198e 0222     		movs	r2, #2
 6198              		.loc 1 1594 1 is_stmt 0 view .LVU1796
 6199 1990 BDE83840 		pop	{r3, r4, r5, lr}
 6200              	.LCFI267:
 6201              		.cfi_remember_state
 6202              		.cfi_restore 14
 6203              		.cfi_restore 5
 6204              		.cfi_restore 4
 6205              		.cfi_restore 3
 6206              		.cfi_def_cfa_offset 0
 926:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 6207              		.loc 1 926 6 view .LVU1797
 6208 1994 6620     		movs	r0, #102
 6209              	.LVL425:
 926:TMCL.c        **** 						(u8 *)&motorConfig.speed_6, sizeof(motorConfig.speed_6));
 6210              		.loc 1 926 6 view .LVU1798
 6211 1996 5949     		ldr	r1, .L536+140
 6212 1998 FFF7FEBF 		b	eeprom_writeConfigBlock
 6213              	.LVL426:
 6214              	.L415:
 6215              	.LCFI268:
 6216              		.cfi_restore_state
 896:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 6217              		.loc 1 896 6 is_stmt 1 view .LVU1799
 6218 199c 0222     		movs	r2, #2
 6219              		.loc 1 1594 1 is_stmt 0 view .LVU1800
 6220 199e BDE83840 		pop	{r3, r4, r5, lr}
 6221              	.LCFI269:
 6222              		.cfi_remember_state
 6223              		.cfi_restore 14
 6224              		.cfi_restore 5
 6225              		.cfi_restore 4
 6226              		.cfi_restore 3
 6227              		.cfi_def_cfa_offset 0
 896:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 6228              		.loc 1 896 6 view .LVU1801
 6229 19a2 6220     		movs	r0, #98
 6230              	.LVL427:
 896:TMCL.c        **** 						(u8 *)&motorConfig.speed_4, sizeof(motorConfig.speed_4));
 6231              		.loc 1 896 6 view .LVU1802
 6232 19a4 5649     		ldr	r1, .L536+144
 6233 19a6 FFF7FEBF 		b	eeprom_writeConfigBlock
 6234              	.LVL428:
 6235              	.L418:
 6236              	.LCFI270:
 6237              		.cfi_restore_state
 881:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 6238              		.loc 1 881 6 is_stmt 1 view .LVU1803
 6239 19aa 0222     		movs	r2, #2
 6240              		.loc 1 1594 1 is_stmt 0 view .LVU1804
 6241 19ac BDE83840 		pop	{r3, r4, r5, lr}
 6242              	.LCFI271:
 6243              		.cfi_remember_state
 6244              		.cfi_restore 14
 6245              		.cfi_restore 5
 6246              		.cfi_restore 4
 6247              		.cfi_restore 3
 6248              		.cfi_def_cfa_offset 0
 881:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 6249              		.loc 1 881 6 view .LVU1805
 6250 19b0 6020     		movs	r0, #96
 6251              	.LVL429:
 881:TMCL.c        **** 						(u8 *)&motorConfig.speed_3, sizeof(motorConfig.speed_3));
 6252              		.loc 1 881 6 view .LVU1806
 6253 19b2 5449     		ldr	r1, .L536+148
 6254 19b4 FFF7FEBF 		b	eeprom_writeConfigBlock
 6255              	.LVL430:
 6256              	.L510:
 6257              	.LCFI272:
 6258              		.cfi_restore_state
 851:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 6259              		.loc 1 851 6 is_stmt 1 view .LVU1807
 6260 19b8 0222     		movs	r2, #2
 6261              		.loc 1 1594 1 is_stmt 0 view .LVU1808
 6262 19ba BDE83840 		pop	{r3, r4, r5, lr}
 6263              	.LCFI273:
 6264              		.cfi_remember_state
 6265              		.cfi_restore 14
 6266              		.cfi_restore 5
 6267              		.cfi_restore 4
 6268              		.cfi_restore 3
 6269              		.cfi_def_cfa_offset 0
 851:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 6270              		.loc 1 851 6 view .LVU1809
 6271 19be 5C20     		movs	r0, #92
 6272              	.LVL431:
 851:TMCL.c        **** 						(u8 *)&motorConfig.speed_1, sizeof(motorConfig.speed_1));
 6273              		.loc 1 851 6 view .LVU1810
 6274 19c0 5149     		ldr	r1, .L536+152
 6275 19c2 FFF7FEBF 		b	eeprom_writeConfigBlock
 6276              	.LVL432:
 6277              	.L485:
 6278              	.LCFI274:
 6279              		.cfi_restore_state
 632:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 6280              		.loc 1 632 6 is_stmt 1 view .LVU1811
 6281 19c6 0222     		movs	r2, #2
 6282              		.loc 1 1594 1 is_stmt 0 view .LVU1812
 6283 19c8 BDE83840 		pop	{r3, r4, r5, lr}
 6284              	.LCFI275:
 6285              		.cfi_remember_state
 6286              		.cfi_restore 14
 6287              		.cfi_restore 5
 6288              		.cfi_restore 4
 6289              		.cfi_restore 3
 6290              		.cfi_def_cfa_offset 0
 632:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 6291              		.loc 1 632 6 view .LVU1813
 6292 19cc 4020     		movs	r0, #64
 6293              	.LVL433:
 632:TMCL.c        **** 						(u8 *)&motorConfig.pedalPulsesPerRotation, sizeof(motorConfig.pedalPulsesPerRotation));
 6294              		.loc 1 632 6 view .LVU1814
 6295 19ce 4F49     		ldr	r1, .L536+156
 6296 19d0 FFF7FEBF 		b	eeprom_writeConfigBlock
 6297              	.LVL434:
 6298              	.L460:
 6299              	.LCFI276:
 6300              		.cfi_restore_state
 805:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 6301              		.loc 1 805 6 is_stmt 1 view .LVU1815
 6302 19d4 0222     		movs	r2, #2
 6303              		.loc 1 1594 1 is_stmt 0 view .LVU1816
 6304 19d6 BDE83840 		pop	{r3, r4, r5, lr}
 6305              	.LCFI277:
 6306              		.cfi_remember_state
 6307              		.cfi_restore 14
 6308              		.cfi_restore 5
 6309              		.cfi_restore 4
 6310              		.cfi_restore 3
 6311              		.cfi_def_cfa_offset 0
 805:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 6312              		.loc 1 805 6 view .LVU1817
 6313 19da 5620     		movs	r0, #86
 6314              	.LVL435:
 805:TMCL.c        **** 						(u8 *)&motorConfig.positiveMotoringRampTime, sizeof(motorConfig.positiveMotoringRampTime));
 6315              		.loc 1 805 6 view .LVU1818
 6316 19dc 4C49     		ldr	r1, .L536+160
 6317 19de FFF7FEBF 		b	eeprom_writeConfigBlock
 6318              	.LVL436:
 6319              	.L394:
 6320              	.LCFI278:
 6321              		.cfi_restore_state
 692:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 6322              		.loc 1 692 6 is_stmt 1 view .LVU1819
 6323 19e2 0222     		movs	r2, #2
 6324              		.loc 1 1594 1 is_stmt 0 view .LVU1820
 6325 19e4 BDE83840 		pop	{r3, r4, r5, lr}
 6326              	.LCFI279:
 6327              		.cfi_remember_state
 6328              		.cfi_restore 14
 6329              		.cfi_restore 5
 6330              		.cfi_restore 4
 6331              		.cfi_restore 3
 6332              		.cfi_def_cfa_offset 0
 692:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 6333              		.loc 1 692 6 view .LVU1821
 6334 19e8 4820     		movs	r0, #72
 6335              	.LVL437:
 692:TMCL.c        **** 						(u8 *)&motorConfig.torqueDeadband, sizeof(motorConfig.torqueDeadband));
 6336              		.loc 1 692 6 view .LVU1822
 6337 19ea 4A49     		ldr	r1, .L536+164
 6338 19ec FFF7FEBF 		b	eeprom_writeConfigBlock
 6339              	.LVL438:
 6340              	.L397:
 6341              	.LCFI280:
 6342              		.cfi_restore_state
 677:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 6343              		.loc 1 677 6 is_stmt 1 view .LVU1823
 6344 19f0 0222     		movs	r2, #2
 6345              		.loc 1 1594 1 is_stmt 0 view .LVU1824
 6346 19f2 BDE83840 		pop	{r3, r4, r5, lr}
 6347              	.LCFI281:
 6348              		.cfi_remember_state
 6349              		.cfi_restore 14
 6350              		.cfi_restore 5
 6351              		.cfi_restore 4
 6352              		.cfi_restore 3
 6353              		.cfi_def_cfa_offset 0
 677:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 6354              		.loc 1 677 6 view .LVU1825
 6355 19f6 4620     		movs	r0, #70
 6356              	.LVL439:
 677:TMCL.c        **** 						(u8 *)&motorConfig.torqueSensorOffset, sizeof(motorConfig.torqueSensorOffset));
 6357              		.loc 1 677 6 view .LVU1826
 6358 19f8 4749     		ldr	r1, .L536+168
 6359 19fa FFF7FEBF 		b	eeprom_writeConfigBlock
 6360              	.LVL440:
 6361              	.L442:
 6362              	.LCFI282:
 6363              		.cfi_restore_state
 986:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 6364              		.loc 1 986 6 is_stmt 1 view .LVU1827
 6365 19fe 0122     		movs	r2, #1
 6366              		.loc 1 1594 1 is_stmt 0 view .LVU1828
 6367 1a00 BDE83840 		pop	{r3, r4, r5, lr}
 6368              	.LCFI283:
 6369              		.cfi_remember_state
 6370              		.cfi_restore 14
 6371              		.cfi_restore 5
 6372              		.cfi_restore 4
 6373              		.cfi_restore 3
 6374              		.cfi_def_cfa_offset 0
 986:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 6375              		.loc 1 986 6 view .LVU1829
 6376 1a04 6D20     		movs	r0, #109
 6377              	.LVL441:
 986:TMCL.c        **** 						(u8 *)&motorConfig.torque_1, sizeof(motorConfig.torque_1));
 6378              		.loc 1 986 6 view .LVU1830
 6379 1a06 4549     		ldr	r1, .L536+172
 6380 1a08 FFF7FEBF 		b	eeprom_writeConfigBlock
 6381              	.LVL442:
 6382              	.L445:
 6383              	.LCFI284:
 6384              		.cfi_restore_state
 956:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 6385              		.loc 1 956 6 is_stmt 1 view .LVU1831
 6386 1a0c 0222     		movs	r2, #2
 6387              		.loc 1 1594 1 is_stmt 0 view .LVU1832
 6388 1a0e BDE83840 		pop	{r3, r4, r5, lr}
 6389              	.LCFI285:
 6390              		.cfi_remember_state
 6391              		.cfi_restore 14
 6392              		.cfi_restore 5
 6393              		.cfi_restore 4
 6394              		.cfi_restore 3
 6395              		.cfi_def_cfa_offset 0
 956:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 6396              		.loc 1 956 6 view .LVU1833
 6397 1a12 6A20     		movs	r0, #106
 6398              	.LVL443:
 956:TMCL.c        **** 						(u8 *)&motorConfig.speed_8, sizeof(motorConfig.speed_8));
 6399              		.loc 1 956 6 view .LVU1834
 6400 1a14 4249     		ldr	r1, .L536+176
 6401 1a16 FFF7FEBF 		b	eeprom_writeConfigBlock
 6402              	.LVL444:
 6403              	.L430:
 6404              	.LCFI286:
 6405              		.cfi_restore_state
1016:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
 6406              		.loc 1 1016 6 is_stmt 1 view .LVU1835
 6407 1a1a 0122     		movs	r2, #1
 6408              		.loc 1 1594 1 is_stmt 0 view .LVU1836
 6409 1a1c BDE83840 		pop	{r3, r4, r5, lr}
 6410              	.LCFI287:
 6411              		.cfi_remember_state
 6412              		.cfi_restore 14
 6413              		.cfi_restore 5
 6414              		.cfi_restore 4
 6415              		.cfi_restore 3
 6416              		.cfi_def_cfa_offset 0
1016:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
 6417              		.loc 1 1016 6 view .LVU1837
 6418 1a20 6F20     		movs	r0, #111
 6419              	.LVL445:
1016:TMCL.c        **** 						(u8 *)&motorConfig.torque_3, sizeof(motorConfig.torque_3));
 6420              		.loc 1 1016 6 view .LVU1838
 6421 1a22 4049     		ldr	r1, .L536+180
 6422 1a24 FFF7FEBF 		b	eeprom_writeConfigBlock
 6423              	.LVL446:
 6424              	.L454:
 6425              	.LCFI288:
 6426              		.cfi_restore_state
 971:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 6427              		.loc 1 971 6 is_stmt 1 view .LVU1839
 6428 1a28 0122     		movs	r2, #1
 6429              		.loc 1 1594 1 is_stmt 0 view .LVU1840
 6430 1a2a BDE83840 		pop	{r3, r4, r5, lr}
 6431              	.LCFI289:
 6432              		.cfi_remember_state
 6433              		.cfi_restore 14
 6434              		.cfi_restore 5
 6435              		.cfi_restore 4
 6436              		.cfi_restore 3
 6437              		.cfi_def_cfa_offset 0
 971:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 6438              		.loc 1 971 6 view .LVU1841
 6439 1a2e 6C20     		movs	r0, #108
 6440              	.LVL447:
 971:TMCL.c        **** 						(u8 *)&motorConfig.torque_0, sizeof(motorConfig.torque_0));
 6441              		.loc 1 971 6 view .LVU1842
 6442 1a30 3D49     		ldr	r1, .L536+184
 6443 1a32 FFF7FEBF 		b	eeprom_writeConfigBlock
 6444              	.LVL448:
 6445              	.L403:
 6446              	.LCFI290:
 6447              		.cfi_restore_state
 647:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 6448              		.loc 1 647 6 is_stmt 1 view .LVU1843
 6449 1a36 0222     		movs	r2, #2
 6450              		.loc 1 1594 1 is_stmt 0 view .LVU1844
 6451 1a38 BDE83840 		pop	{r3, r4, r5, lr}
 6452              	.LCFI291:
 6453              		.cfi_remember_state
 6454              		.cfi_restore 14
 6455              		.cfi_restore 5
 6456              		.cfi_restore 4
 6457              		.cfi_restore 3
 6458              		.cfi_def_cfa_offset 0
 647:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 6459              		.loc 1 647 6 view .LVU1845
 6460 1a3c 4220     		movs	r0, #66
 6461              	.LVL449:
 647:TMCL.c        **** 						(u8 *)&motorConfig.pedalSenseDelay, sizeof(motorConfig.pedalSenseDelay));
 6462              		.loc 1 647 6 view .LVU1846
 6463 1a3e 3B49     		ldr	r1, .L536+188
 6464 1a40 FFF7FEBF 		b	eeprom_writeConfigBlock
 6465              	.LVL450:
 6466              	.L504:
 6467              	.LCFI292:
 6468              		.cfi_restore_state
 836:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 6469              		.loc 1 836 6 is_stmt 1 view .LVU1847
 6470 1a44 0222     		movs	r2, #2
 6471              		.loc 1 1594 1 is_stmt 0 view .LVU1848
 6472 1a46 BDE83840 		pop	{r3, r4, r5, lr}
 6473              	.LCFI293:
 6474              		.cfi_remember_state
 6475              		.cfi_restore 14
 6476              		.cfi_restore 5
 6477              		.cfi_restore 4
 6478              		.cfi_restore 3
 6479              		.cfi_def_cfa_offset 0
 836:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 6480              		.loc 1 836 6 view .LVU1849
 6481 1a4a 5A20     		movs	r0, #90
 6482              	.LVL451:
 836:TMCL.c        **** 						(u8 *)&motorConfig.speed_0, sizeof(motorConfig.speed_0));
 6483              		.loc 1 836 6 view .LVU1850
 6484 1a4c 3849     		ldr	r1, .L536+192
 6485 1a4e FFF7FEBF 		b	eeprom_writeConfigBlock
 6486              	.LVL452:
 6487              	.L364:
 6488              	.LCFI294:
 6489              		.cfi_restore_state
1320:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
 6490              		.loc 1 1320 6 is_stmt 1 view .LVU1851
 6491 1a52 0122     		movs	r2, #1
 6492              		.loc 1 1594 1 is_stmt 0 view .LVU1852
 6493 1a54 BDE83840 		pop	{r3, r4, r5, lr}
 6494              	.LCFI295:
 6495              		.cfi_remember_state
 6496              		.cfi_restore 14
 6497              		.cfi_restore 5
 6498              		.cfi_restore 4
 6499              		.cfi_restore 3
 6500              		.cfi_def_cfa_offset 0
1320:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
 6501              		.loc 1 1320 6 view .LVU1853
 6502 1a58 8D20     		movs	r0, #141
 6503              	.LVL453:
1320:TMCL.c        **** 						(u8 *)&motorConfig.motorTestModes, sizeof(motorConfig.motorTestModes));
 6504              		.loc 1 1320 6 view .LVU1854
 6505 1a5a 3649     		ldr	r1, .L536+196
 6506 1a5c FFF7FEBF 		b	eeprom_writeConfigBlock
 6507              	.LVL454:
 6508              	.L367:
 6509              	.LCFI296:
 6510              		.cfi_restore_state
1290:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
 6511              		.loc 1 1290 6 is_stmt 1 view .LVU1855
 6512 1a60 0222     		movs	r2, #2
 6513              		.loc 1 1594 1 is_stmt 0 view .LVU1856
 6514 1a62 BDE83840 		pop	{r3, r4, r5, lr}
 6515              	.LCFI297:
 6516              		.cfi_restore 14
 6517              		.cfi_restore 5
 6518              		.cfi_restore 4
 6519              		.cfi_restore 3
 6520              		.cfi_def_cfa_offset 0
1290:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
 6521              		.loc 1 1290 6 view .LVU1857
 6522 1a66 8A20     		movs	r0, #138
 6523              	.LVL455:
1290:TMCL.c        **** 						(u8 *)&motorConfig.minimumMotorCurrent, sizeof(motorConfig.minimumMotorCurrent));
 6524              		.loc 1 1290 6 view .LVU1858
 6525 1a68 3349     		ldr	r1, .L536+200
 6526 1a6a FFF7FEBF 		b	eeprom_writeConfigBlock
 6527              	.LVL456:
 6528              	.L537:
 6529 1a6e 00BF     		.align	2
 6530              	.L536:
 6531 1a70 44000000 		.word	motorConfig+68
 6532 1a74 7B000000 		.word	motorConfig+123
 6533 1a78 0A000000 		.word	motorConfig+10
 6534 1a7c 8A000000 		.word	motorConfig+138
 6535 1a80 50000000 		.word	motorConfig+80
 6536 1a84 5C000000 		.word	motorConfig+92
 6537 1a88 54000000 		.word	motorConfig+84
 6538 1a8c 52000000 		.word	motorConfig+82
 6539 1a90 58000000 		.word	motorConfig+88
 6540 1a94 42000000 		.word	motorConfig+66
 6541 1a98 36000000 		.word	motorConfig+54
 6542 1a9c 38000000 		.word	motorConfig+56
 6543 1aa0 88000000 		.word	motorConfig+136
 6544 1aa4 31000000 		.word	motorConfig+49
 6545 1aa8 30000000 		.word	motorConfig+48
 6546 1aac 48000000 		.word	motorConfig+72
 6547 1ab0 1E000000 		.word	motorConfig+30
 6548 1ab4 04000000 		.word	motorConfig+4
 6549 1ab8 0C000000 		.word	motorConfig+12
 6550 1abc 18000000 		.word	motorConfig+24
 6551 1ac0 24000000 		.word	motorConfig+36
 6552 1ac4 40000000 		.word	motorConfig+64
 6553 1ac8 3D000000 		.word	motorConfig+61
 6554 1acc 4E000000 		.word	motorConfig+78
 6555 1ad0 15000000 		.word	motorConfig+21
 6556 1ad4 34000000 		.word	motorConfig+52
 6557 1ad8 60000000 		.word	motorConfig+96
 6558 1adc 3E000000 		.word	motorConfig+62
 6559 1ae0 33000000 		.word	motorConfig+51
 6560 1ae4 32000000 		.word	motorConfig+50
 6561 1ae8 2E000000 		.word	motorConfig+46
 6562 1aec 14000000 		.word	motorConfig+20
 6563 1af0 10000000 		.word	motorConfig+16
 6564 1af4 4C000000 		.word	motorConfig+76
 6565 1af8 28000000 		.word	motorConfig+40
 6566 1afc 26000000 		.word	motorConfig+38
 6567 1b00 22000000 		.word	motorConfig+34
 6568 1b04 20000000 		.word	motorConfig+32
 6569 1b08 1C000000 		.word	motorConfig+28
 6570 1b0c 00000000 		.word	motorConfig
 6571 1b10 16000000 		.word	motorConfig+22
 6572 1b14 08000000 		.word	motorConfig+8
 6573 1b18 06000000 		.word	motorConfig+6
 6574 1b1c 2D000000 		.word	motorConfig+45
 6575 1b20 2A000000 		.word	motorConfig+42
 6576 1b24 2F000000 		.word	motorConfig+47
 6577 1b28 2C000000 		.word	motorConfig+44
 6578 1b2c 02000000 		.word	motorConfig+2
 6579 1b30 1A000000 		.word	motorConfig+26
 6580 1b34 4D000000 		.word	motorConfig+77
 6581 1b38 4A000000 		.word	motorConfig+74
 6582              		.cfi_endproc
 6583              	.LFE16:
 6585              		.align	1
 6586              		.p2align 2,,3
 6587              		.syntax unified
 6588              		.thumb
 6589              		.thumb_func
 6591              	tmcl_handleGlobalParameter.part.0:
 6592              	.LVL457:
 6593              	.LFB17:
1595:TMCL.c        **** 
1596:TMCL.c        **** void tmcl_handleGlobalParameter(uint8_t command)
 6594              		.loc 1 1596 6 is_stmt 1 view -0
 6595              		.cfi_startproc
 6596              		@ args = 0, pretend = 0, frame = 0
 6597              		@ frame_needed = 0, uses_anonymous_args = 0
1597:TMCL.c        **** {
1598:TMCL.c        **** 	if (ActualCommand.Motor == 0)	// module config values
1599:TMCL.c        **** 	{
1600:TMCL.c        **** 		// global_parameters bank 0
1601:TMCL.c        **** 		switch(ActualCommand.Type)
 6598              		.loc 1 1601 3 view .LVU1860
1596:TMCL.c        **** {
 6599              		.loc 1 1596 6 is_stmt 0 view .LVU1861
 6600 1b3c 38B5     		push	{r3, r4, r5, lr}
 6601              	.LCFI298:
 6602              		.cfi_def_cfa_offset 16
 6603              		.cfi_offset 3, -16
 6604              		.cfi_offset 4, -12
 6605              		.cfi_offset 5, -8
 6606              		.cfi_offset 14, -4
 6607              		.loc 1 1601 23 view .LVU1862
 6608 1b3e 514C     		ldr	r4, .L567
 6609              		.loc 1 1601 3 view .LVU1863
 6610 1b40 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 6611 1b42 403B     		subs	r3, r3, #64
 6612 1b44 132B     		cmp	r3, #19
 6613 1b46 0BD8     		bhi	.L539
 6614 1b48 DFE803F0 		tbb	[pc, r3]
 6615              	.L541:
 6616 1b4c 0D       		.byte	(.L548-.L541)/2
 6617 1b4d 19       		.byte	(.L547-.L541)/2
 6618 1b4e 25       		.byte	(.L546-.L541)/2
 6619 1b4f 0A       		.byte	(.L539-.L541)/2
 6620 1b50 0A       		.byte	(.L539-.L541)/2
 6621 1b51 31       		.byte	(.L545-.L541)/2
 6622 1b52 3D       		.byte	(.L544-.L541)/2
 6623 1b53 4B       		.byte	(.L543-.L541)/2
 6624 1b54 0A       		.byte	(.L539-.L541)/2
 6625 1b55 0A       		.byte	(.L539-.L541)/2
 6626 1b56 0A       		.byte	(.L539-.L541)/2
 6627 1b57 0A       		.byte	(.L539-.L541)/2
 6628 1b58 5F       		.byte	(.L542-.L541)/2
 6629 1b59 0A       		.byte	(.L539-.L541)/2
 6630 1b5a 0A       		.byte	(.L539-.L541)/2
 6631 1b5b 0A       		.byte	(.L539-.L541)/2
 6632 1b5c 0A       		.byte	(.L539-.L541)/2
 6633 1b5d 0A       		.byte	(.L539-.L541)/2
 6634 1b5e 0A       		.byte	(.L539-.L541)/2
 6635 1b5f 6B       		.byte	(.L540-.L541)/2
 6636              		.p2align 1
 6637              	.L539:
1602:TMCL.c        **** 		{
1603:TMCL.c        **** 			case 64:
1604:TMCL.c        **** 				if (command == TMCL_GGP) {
1605:TMCL.c        **** 					ActualReply.Value.Int32 = eeprom_readConfigByte(TMCM_ADDR_EEPROM_MAGIC);
1606:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1607:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_EEPROM_MAGIC, ActualCommand.Value.Byte[0]);
1608:TMCL.c        **** 				}
1609:TMCL.c        **** 				break;
1610:TMCL.c        **** 			case 65: // serial baud rate
1611:TMCL.c        **** 				if (command == TMCL_GGP) {
1612:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.baudrate;
1613:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1614:TMCL.c        **** 					moduleConfig.baudrate = ActualCommand.Value.Byte[0];
1615:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.baudrate - (u32)&moduleConfi
1616:TMCL.c        **** 				}
1617:TMCL.c        **** 				break;
1618:TMCL.c        **** 			case 66: // serial address
1619:TMCL.c        **** 				if (command == TMCL_GGP) {
1620:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.serialModuleAddress;
1621:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1622:TMCL.c        **** 					moduleConfig.serialModuleAddress = ActualCommand.Value.Byte[0];
1623:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialModuleAddress - (u32)&
1624:TMCL.c        **** 				}
1625:TMCL.c        **** 				break;
1626:TMCL.c        **** 			case 69: // CAN bit rate
1627:TMCL.c        **** 				if (command == TMCL_GGP) {
1628:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANBitrate;
1629:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1630:TMCL.c        **** 					moduleConfig.CANBitrate = ActualCommand.Value.Byte[0];
1631:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANBitrate - (u32)&moduleCon
1632:TMCL.c        **** 				}
1633:TMCL.c        **** 				break;
1634:TMCL.c        **** 			case 70:
1635:TMCL.c        **** 				if (command == TMCL_GGP) {
1636:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANSendID;
1637:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1638:TMCL.c        **** 					moduleConfig.CANSendID = ActualCommand.Value.Int32;
1639:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSendID - (u32)&moduleCon
1640:TMCL.c        **** 							(u8 *) &moduleConfig.CANSendID, sizeof(moduleConfig.CANSendID));
1641:TMCL.c        **** 				}
1642:TMCL.c        **** 				break;
1643:TMCL.c        **** 			case 71:
1644:TMCL.c        **** 				if (command == TMCL_GGP) {
1645:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANReceiveID;
1646:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1647:TMCL.c        **** 					moduleConfig.CANReceiveID = ActualCommand.Value.Int32;
1648:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANReceiveID - (u32)&module
1649:TMCL.c        **** 							(u8 *) &moduleConfig.CANReceiveID, sizeof(moduleConfig.CANReceiveID));
1650:TMCL.c        **** 					can_init(moduleConfig.CANBitrate, moduleConfig.CANReceiveID, moduleConfig.CANSecondaryID);
1651:TMCL.c        **** 				}
1652:TMCL.c        **** 				break;
1653:TMCL.c        **** 			case 76: // serial host address
1654:TMCL.c        **** 				if (command == TMCL_GGP) {
1655:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.serialHostAddress;
1656:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1657:TMCL.c        **** 					moduleConfig.serialHostAddress = ActualCommand.Value.Byte[0];
1658:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialHostAddress - (u32)&mo
1659:TMCL.c        **** 				}
1660:TMCL.c        **** 				break;
1661:TMCL.c        **** 			case 83:
1662:TMCL.c        **** 				if (command == TMCL_GGP) {
1663:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANSecondaryID;
1664:TMCL.c        **** 				} else if (command == TMCL_SGP) {
1665:TMCL.c        **** 					moduleConfig.CANSecondaryID = ActualCommand.Value.Int32;
1666:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSecondaryID - (u32)&modu
1667:TMCL.c        **** 							(u8 *)&moduleConfig.CANSecondaryID, sizeof(moduleConfig.CANSecondaryID));
1668:TMCL.c        **** 				}
1669:TMCL.c        **** 				break;
1670:TMCL.c        **** 			default:
1671:TMCL.c        **** 				ActualReply.Status = REPLY_WRONG_TYPE;
 6638              		.loc 1 1671 5 is_stmt 1 view .LVU1864
 6639              		.loc 1 1671 24 is_stmt 0 view .LVU1865
 6640 1b60 0323     		movs	r3, #3
 6641 1b62 2372     		strb	r3, [r4, #8]
1672:TMCL.c        **** 				break;
 6642              		.loc 1 1672 5 is_stmt 1 view .LVU1866
 6643              	.L538:
1673:TMCL.c        **** 		}
1674:TMCL.c        **** 	}
1675:TMCL.c        **** }
 6644              		.loc 1 1675 1 is_stmt 0 view .LVU1867
 6645 1b64 38BD     		pop	{r3, r4, r5, pc}
 6646              	.L548:
1604:TMCL.c        **** 					ActualReply.Value.Int32 = eeprom_readConfigByte(TMCM_ADDR_EEPROM_MAGIC);
 6647              		.loc 1 1604 5 is_stmt 1 view .LVU1868
1604:TMCL.c        **** 					ActualReply.Value.Int32 = eeprom_readConfigByte(TMCM_ADDR_EEPROM_MAGIC);
 6648              		.loc 1 1604 8 is_stmt 0 view .LVU1869
 6649 1b66 0A28     		cmp	r0, #10
 6650 1b68 00F08580 		beq	.L559
1606:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_EEPROM_MAGIC, ActualCommand.Value.Byte[0]);
 6651              		.loc 1 1606 12 is_stmt 1 view .LVU1870
1606:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_EEPROM_MAGIC, ActualCommand.Value.Byte[0]);
 6652              		.loc 1 1606 15 is_stmt 0 view .LVU1871
 6653 1b6c 0928     		cmp	r0, #9
 6654 1b6e F9D1     		bne	.L538
1607:TMCL.c        **** 				}
 6655              		.loc 1 1607 6 is_stmt 1 view .LVU1872
 6656 1b70 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 6657 1b72 40F2FF70 		movw	r0, #2047
 6658              	.LVL458:
 6659              		.loc 1 1675 1 is_stmt 0 view .LVU1873
 6660 1b76 BDE83840 		pop	{r3, r4, r5, lr}
 6661              	.LCFI299:
 6662              		.cfi_remember_state
 6663              		.cfi_restore 14
 6664              		.cfi_restore 5
 6665              		.cfi_restore 4
 6666              		.cfi_restore 3
 6667              		.cfi_def_cfa_offset 0
1607:TMCL.c        **** 				}
 6668              		.loc 1 1607 6 view .LVU1874
 6669 1b7a FFF7FEBF 		b	eeprom_writeConfigByte
 6670              	.LVL459:
 6671              	.L547:
 6672              	.LCFI300:
 6673              		.cfi_restore_state
1611:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.baudrate;
 6674              		.loc 1 1611 5 is_stmt 1 view .LVU1875
1611:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.baudrate;
 6675              		.loc 1 1611 8 is_stmt 0 view .LVU1876
 6676 1b7e 0A28     		cmp	r0, #10
 6677 1b80 61D0     		beq	.L560
1613:TMCL.c        **** 					moduleConfig.baudrate = ActualCommand.Value.Byte[0];
 6678              		.loc 1 1613 12 is_stmt 1 view .LVU1877
1613:TMCL.c        **** 					moduleConfig.baudrate = ActualCommand.Value.Byte[0];
 6679              		.loc 1 1613 15 is_stmt 0 view .LVU1878
 6680 1b82 0928     		cmp	r0, #9
 6681 1b84 EED1     		bne	.L538
1614:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.baudrate - (u32)&moduleConfi
 6682              		.loc 1 1614 6 is_stmt 1 view .LVU1879
1614:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.baudrate - (u32)&moduleConfi
 6683              		.loc 1 1614 54 is_stmt 0 view .LVU1880
 6684 1b86 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
1614:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.baudrate - (u32)&moduleConfi
 6685              		.loc 1 1614 28 view .LVU1881
 6686 1b88 3F4B     		ldr	r3, .L567+4
1615:TMCL.c        **** 				}
 6687              		.loc 1 1615 6 view .LVU1882
 6688 1b8a 0020     		movs	r0, #0
 6689              	.LVL460:
1614:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.baudrate - (u32)&moduleConfi
 6690              		.loc 1 1614 28 view .LVU1883
 6691 1b8c 1970     		strb	r1, [r3]
1615:TMCL.c        **** 				}
 6692              		.loc 1 1615 6 is_stmt 1 view .LVU1884
 6693              		.loc 1 1675 1 is_stmt 0 view .LVU1885
 6694 1b8e BDE83840 		pop	{r3, r4, r5, lr}
 6695              	.LCFI301:
 6696              		.cfi_remember_state
 6697              		.cfi_restore 14
 6698              		.cfi_restore 5
 6699              		.cfi_restore 4
 6700              		.cfi_restore 3
 6701              		.cfi_def_cfa_offset 0
1615:TMCL.c        **** 				}
 6702              		.loc 1 1615 6 view .LVU1886
 6703 1b92 FFF7FEBF 		b	eeprom_writeConfigByte
 6704              	.LVL461:
 6705              	.L546:
 6706              	.LCFI302:
 6707              		.cfi_restore_state
1619:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.serialModuleAddress;
 6708              		.loc 1 1619 5 is_stmt 1 view .LVU1887
1619:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.serialModuleAddress;
 6709              		.loc 1 1619 8 is_stmt 0 view .LVU1888
 6710 1b96 0A28     		cmp	r0, #10
 6711 1b98 51D0     		beq	.L561
1621:TMCL.c        **** 					moduleConfig.serialModuleAddress = ActualCommand.Value.Byte[0];
 6712              		.loc 1 1621 12 is_stmt 1 view .LVU1889
1621:TMCL.c        **** 					moduleConfig.serialModuleAddress = ActualCommand.Value.Byte[0];
 6713              		.loc 1 1621 15 is_stmt 0 view .LVU1890
 6714 1b9a 0928     		cmp	r0, #9
 6715 1b9c E2D1     		bne	.L538
1622:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialModuleAddress - (u32)&
 6716              		.loc 1 1622 6 is_stmt 1 view .LVU1891
1622:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialModuleAddress - (u32)&
 6717              		.loc 1 1622 65 is_stmt 0 view .LVU1892
 6718 1b9e 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
1622:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialModuleAddress - (u32)&
 6719              		.loc 1 1622 39 view .LVU1893
 6720 1ba0 394B     		ldr	r3, .L567+4
1623:TMCL.c        **** 				}
 6721              		.loc 1 1623 6 view .LVU1894
 6722 1ba2 0120     		movs	r0, #1
 6723              	.LVL462:
1622:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialModuleAddress - (u32)&
 6724              		.loc 1 1622 39 view .LVU1895
 6725 1ba4 5970     		strb	r1, [r3, #1]
1623:TMCL.c        **** 				}
 6726              		.loc 1 1623 6 is_stmt 1 view .LVU1896
 6727              		.loc 1 1675 1 is_stmt 0 view .LVU1897
 6728 1ba6 BDE83840 		pop	{r3, r4, r5, lr}
 6729              	.LCFI303:
 6730              		.cfi_remember_state
 6731              		.cfi_restore 14
 6732              		.cfi_restore 5
 6733              		.cfi_restore 4
 6734              		.cfi_restore 3
 6735              		.cfi_def_cfa_offset 0
1623:TMCL.c        **** 				}
 6736              		.loc 1 1623 6 view .LVU1898
 6737 1baa FFF7FEBF 		b	eeprom_writeConfigByte
 6738              	.LVL463:
 6739              	.L545:
 6740              	.LCFI304:
 6741              		.cfi_restore_state
1627:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANBitrate;
 6742              		.loc 1 1627 5 is_stmt 1 view .LVU1899
1627:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANBitrate;
 6743              		.loc 1 1627 8 is_stmt 0 view .LVU1900
 6744 1bae 0A28     		cmp	r0, #10
 6745 1bb0 51D0     		beq	.L562
1629:TMCL.c        **** 					moduleConfig.CANBitrate = ActualCommand.Value.Byte[0];
 6746              		.loc 1 1629 12 is_stmt 1 view .LVU1901
1629:TMCL.c        **** 					moduleConfig.CANBitrate = ActualCommand.Value.Byte[0];
 6747              		.loc 1 1629 15 is_stmt 0 view .LVU1902
 6748 1bb2 0928     		cmp	r0, #9
 6749 1bb4 D6D1     		bne	.L538
1630:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANBitrate - (u32)&moduleCon
 6750              		.loc 1 1630 6 is_stmt 1 view .LVU1903
1630:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANBitrate - (u32)&moduleCon
 6751              		.loc 1 1630 56 is_stmt 0 view .LVU1904
 6752 1bb6 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
1630:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANBitrate - (u32)&moduleCon
 6753              		.loc 1 1630 30 view .LVU1905
 6754 1bb8 334B     		ldr	r3, .L567+4
1631:TMCL.c        **** 				}
 6755              		.loc 1 1631 6 view .LVU1906
 6756 1bba 0320     		movs	r0, #3
 6757              	.LVL464:
1630:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANBitrate - (u32)&moduleCon
 6758              		.loc 1 1630 30 view .LVU1907
 6759 1bbc D970     		strb	r1, [r3, #3]
1631:TMCL.c        **** 				}
 6760              		.loc 1 1631 6 is_stmt 1 view .LVU1908
 6761              		.loc 1 1675 1 is_stmt 0 view .LVU1909
 6762 1bbe BDE83840 		pop	{r3, r4, r5, lr}
 6763              	.LCFI305:
 6764              		.cfi_remember_state
 6765              		.cfi_restore 14
 6766              		.cfi_restore 5
 6767              		.cfi_restore 4
 6768              		.cfi_restore 3
 6769              		.cfi_def_cfa_offset 0
1631:TMCL.c        **** 				}
 6770              		.loc 1 1631 6 view .LVU1910
 6771 1bc2 FFF7FEBF 		b	eeprom_writeConfigByte
 6772              	.LVL465:
 6773              	.L544:
 6774              	.LCFI306:
 6775              		.cfi_restore_state
1635:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANSendID;
 6776              		.loc 1 1635 5 is_stmt 1 view .LVU1911
1635:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANSendID;
 6777              		.loc 1 1635 8 is_stmt 0 view .LVU1912
 6778 1bc6 0A28     		cmp	r0, #10
 6779 1bc8 41D0     		beq	.L563
1637:TMCL.c        **** 					moduleConfig.CANSendID = ActualCommand.Value.Int32;
 6780              		.loc 1 1637 12 is_stmt 1 view .LVU1913
1637:TMCL.c        **** 					moduleConfig.CANSendID = ActualCommand.Value.Int32;
 6781              		.loc 1 1637 15 is_stmt 0 view .LVU1914
 6782 1bca 0928     		cmp	r0, #9
 6783 1bcc CAD1     		bne	.L538
1638:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSendID - (u32)&moduleCon
 6784              		.loc 1 1638 6 is_stmt 1 view .LVU1915
1638:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSendID - (u32)&moduleCon
 6785              		.loc 1 1638 29 is_stmt 0 view .LVU1916
 6786 1bce 6368     		ldr	r3, [r4, #4]
 6787 1bd0 2D49     		ldr	r1, .L567+4
1639:TMCL.c        **** 							(u8 *) &moduleConfig.CANSendID, sizeof(moduleConfig.CANSendID));
 6788              		.loc 1 1639 6 view .LVU1917
 6789 1bd2 0422     		movs	r2, #4
1638:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSendID - (u32)&moduleCon
 6790              		.loc 1 1638 29 view .LVU1918
 6791 1bd4 41F8083F 		str	r3, [r1, #8]!
1639:TMCL.c        **** 							(u8 *) &moduleConfig.CANSendID, sizeof(moduleConfig.CANSendID));
 6792              		.loc 1 1639 6 is_stmt 1 view .LVU1919
 6793 1bd8 0820     		movs	r0, #8
 6794              	.LVL466:
 6795              		.loc 1 1675 1 is_stmt 0 view .LVU1920
 6796 1bda BDE83840 		pop	{r3, r4, r5, lr}
 6797              	.LCFI307:
 6798              		.cfi_remember_state
 6799              		.cfi_restore 14
 6800              		.cfi_restore 5
 6801              		.cfi_restore 4
 6802              		.cfi_restore 3
 6803              		.cfi_def_cfa_offset 0
1639:TMCL.c        **** 							(u8 *) &moduleConfig.CANSendID, sizeof(moduleConfig.CANSendID));
 6804              		.loc 1 1639 6 view .LVU1921
 6805 1bde FFF7FEBF 		b	eeprom_writeConfigBlock
 6806              	.LVL467:
 6807              	.L543:
 6808              	.LCFI308:
 6809              		.cfi_restore_state
1644:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANReceiveID;
 6810              		.loc 1 1644 5 is_stmt 1 view .LVU1922
1644:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANReceiveID;
 6811              		.loc 1 1644 8 is_stmt 0 view .LVU1923
 6812 1be2 0A28     		cmp	r0, #10
 6813 1be4 3FD0     		beq	.L564
1646:TMCL.c        **** 					moduleConfig.CANReceiveID = ActualCommand.Value.Int32;
 6814              		.loc 1 1646 12 is_stmt 1 view .LVU1924
1646:TMCL.c        **** 					moduleConfig.CANReceiveID = ActualCommand.Value.Int32;
 6815              		.loc 1 1646 15 is_stmt 0 view .LVU1925
 6816 1be6 0928     		cmp	r0, #9
 6817 1be8 BCD1     		bne	.L538
1647:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANReceiveID - (u32)&module
 6818              		.loc 1 1647 6 is_stmt 1 view .LVU1926
1647:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANReceiveID - (u32)&module
 6819              		.loc 1 1647 32 is_stmt 0 view .LVU1927
 6820 1bea 274D     		ldr	r5, .L567+4
1648:TMCL.c        **** 							(u8 *) &moduleConfig.CANReceiveID, sizeof(moduleConfig.CANReceiveID));
 6821              		.loc 1 1648 6 view .LVU1928
 6822 1bec 0422     		movs	r2, #4
1647:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANReceiveID - (u32)&module
 6823              		.loc 1 1647 32 view .LVU1929
 6824 1bee 2946     		mov	r1, r5
 6825 1bf0 6368     		ldr	r3, [r4, #4]
1648:TMCL.c        **** 							(u8 *) &moduleConfig.CANReceiveID, sizeof(moduleConfig.CANReceiveID));
 6826              		.loc 1 1648 6 view .LVU1930
 6827 1bf2 1046     		mov	r0, r2
 6828              	.LVL468:
1647:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANReceiveID - (u32)&module
 6829              		.loc 1 1647 32 view .LVU1931
 6830 1bf4 41F8043F 		str	r3, [r1, #4]!
1648:TMCL.c        **** 							(u8 *) &moduleConfig.CANReceiveID, sizeof(moduleConfig.CANReceiveID));
 6831              		.loc 1 1648 6 is_stmt 1 view .LVU1932
 6832 1bf8 FFF7FEFF 		bl	eeprom_writeConfigBlock
 6833              	.LVL469:
1650:TMCL.c        **** 				}
 6834              		.loc 1 1650 6 view .LVU1933
 6835 1bfc EA68     		ldr	r2, [r5, #12]
 6836 1bfe 6968     		ldr	r1, [r5, #4]
 6837 1c00 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 6838              		.loc 1 1675 1 is_stmt 0 view .LVU1934
 6839 1c02 BDE83840 		pop	{r3, r4, r5, lr}
 6840              	.LCFI309:
 6841              		.cfi_remember_state
 6842              		.cfi_restore 14
 6843              		.cfi_restore 5
 6844              		.cfi_restore 4
 6845              		.cfi_restore 3
 6846              		.cfi_def_cfa_offset 0
1650:TMCL.c        **** 				}
 6847              		.loc 1 1650 6 view .LVU1935
 6848 1c06 FFF7FEBF 		b	can_init
 6849              	.LVL470:
 6850              	.L542:
 6851              	.LCFI310:
 6852              		.cfi_restore_state
1654:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.serialHostAddress;
 6853              		.loc 1 1654 5 is_stmt 1 view .LVU1936
1654:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.serialHostAddress;
 6854              		.loc 1 1654 8 is_stmt 0 view .LVU1937
 6855 1c0a 0A28     		cmp	r0, #10
 6856 1c0c 27D0     		beq	.L565
1656:TMCL.c        **** 					moduleConfig.serialHostAddress = ActualCommand.Value.Byte[0];
 6857              		.loc 1 1656 12 is_stmt 1 view .LVU1938
1656:TMCL.c        **** 					moduleConfig.serialHostAddress = ActualCommand.Value.Byte[0];
 6858              		.loc 1 1656 15 is_stmt 0 view .LVU1939
 6859 1c0e 0928     		cmp	r0, #9
 6860 1c10 A8D1     		bne	.L538
1657:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialHostAddress - (u32)&mo
 6861              		.loc 1 1657 6 is_stmt 1 view .LVU1940
1657:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialHostAddress - (u32)&mo
 6862              		.loc 1 1657 63 is_stmt 0 view .LVU1941
 6863 1c12 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
1657:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialHostAddress - (u32)&mo
 6864              		.loc 1 1657 37 view .LVU1942
 6865 1c14 1C4B     		ldr	r3, .L567+4
1658:TMCL.c        **** 				}
 6866              		.loc 1 1658 6 view .LVU1943
 6867 1c16 0220     		movs	r0, #2
 6868              	.LVL471:
1657:TMCL.c        **** 					eeprom_writeConfigByte(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.serialHostAddress - (u32)&mo
 6869              		.loc 1 1657 37 view .LVU1944
 6870 1c18 9970     		strb	r1, [r3, #2]
1658:TMCL.c        **** 				}
 6871              		.loc 1 1658 6 is_stmt 1 view .LVU1945
 6872              		.loc 1 1675 1 is_stmt 0 view .LVU1946
 6873 1c1a BDE83840 		pop	{r3, r4, r5, lr}
 6874              	.LCFI311:
 6875              		.cfi_remember_state
 6876              		.cfi_restore 14
 6877              		.cfi_restore 5
 6878              		.cfi_restore 4
 6879              		.cfi_restore 3
 6880              		.cfi_def_cfa_offset 0
1658:TMCL.c        **** 				}
 6881              		.loc 1 1658 6 view .LVU1947
 6882 1c1e FFF7FEBF 		b	eeprom_writeConfigByte
 6883              	.LVL472:
 6884              	.L540:
 6885              	.LCFI312:
 6886              		.cfi_restore_state
1662:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANSecondaryID;
 6887              		.loc 1 1662 5 is_stmt 1 view .LVU1948
1662:TMCL.c        **** 					ActualReply.Value.Int32 = moduleConfig.CANSecondaryID;
 6888              		.loc 1 1662 8 is_stmt 0 view .LVU1949
 6889 1c22 0A28     		cmp	r0, #10
 6890 1c24 23D0     		beq	.L566
1664:TMCL.c        **** 					moduleConfig.CANSecondaryID = ActualCommand.Value.Int32;
 6891              		.loc 1 1664 12 is_stmt 1 view .LVU1950
1664:TMCL.c        **** 					moduleConfig.CANSecondaryID = ActualCommand.Value.Int32;
 6892              		.loc 1 1664 15 is_stmt 0 view .LVU1951
 6893 1c26 0928     		cmp	r0, #9
 6894 1c28 9CD1     		bne	.L538
1665:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSecondaryID - (u32)&modu
 6895              		.loc 1 1665 6 is_stmt 1 view .LVU1952
1665:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSecondaryID - (u32)&modu
 6896              		.loc 1 1665 34 is_stmt 0 view .LVU1953
 6897 1c2a 6368     		ldr	r3, [r4, #4]
 6898 1c2c 1649     		ldr	r1, .L567+4
1666:TMCL.c        **** 							(u8 *)&moduleConfig.CANSecondaryID, sizeof(moduleConfig.CANSecondaryID));
 6899              		.loc 1 1666 6 view .LVU1954
 6900 1c2e 0422     		movs	r2, #4
1665:TMCL.c        **** 					eeprom_writeConfigBlock(TMCM_ADDR_MODULE_CONFIG+(u32)&moduleConfig.CANSecondaryID - (u32)&modu
 6901              		.loc 1 1665 34 view .LVU1955
 6902 1c30 41F80C3F 		str	r3, [r1, #12]!
1666:TMCL.c        **** 							(u8 *)&moduleConfig.CANSecondaryID, sizeof(moduleConfig.CANSecondaryID));
 6903              		.loc 1 1666 6 is_stmt 1 view .LVU1956
 6904 1c34 0C20     		movs	r0, #12
 6905              	.LVL473:
 6906              		.loc 1 1675 1 is_stmt 0 view .LVU1957
 6907 1c36 BDE83840 		pop	{r3, r4, r5, lr}
 6908              	.LCFI313:
 6909              		.cfi_remember_state
 6910              		.cfi_restore 14
 6911              		.cfi_restore 5
 6912              		.cfi_restore 4
 6913              		.cfi_restore 3
 6914              		.cfi_def_cfa_offset 0
1666:TMCL.c        **** 							(u8 *)&moduleConfig.CANSecondaryID, sizeof(moduleConfig.CANSecondaryID));
 6915              		.loc 1 1666 6 view .LVU1958
 6916 1c3a FFF7FEBF 		b	eeprom_writeConfigBlock
 6917              	.LVL474:
 6918              	.L561:
 6919              	.LCFI314:
 6920              		.cfi_restore_state
1620:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6921              		.loc 1 1620 6 is_stmt 1 view .LVU1959
1620:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6922              		.loc 1 1620 44 is_stmt 0 view .LVU1960
 6923 1c3e 124B     		ldr	r3, .L567+4
 6924 1c40 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6925 1c42 E360     		str	r3, [r4, #12]
 6926              		.loc 1 1675 1 view .LVU1961
 6927 1c44 38BD     		pop	{r3, r4, r5, pc}
 6928              	.L560:
1612:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6929              		.loc 1 1612 6 is_stmt 1 view .LVU1962
1612:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6930              		.loc 1 1612 44 is_stmt 0 view .LVU1963
 6931 1c46 104B     		ldr	r3, .L567+4
 6932 1c48 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6933 1c4a E360     		str	r3, [r4, #12]
 6934              		.loc 1 1675 1 view .LVU1964
 6935 1c4c 38BD     		pop	{r3, r4, r5, pc}
 6936              	.L563:
1636:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6937              		.loc 1 1636 6 is_stmt 1 view .LVU1965
1636:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6938              		.loc 1 1636 44 is_stmt 0 view .LVU1966
 6939 1c4e 0E4B     		ldr	r3, .L567+4
1636:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6940              		.loc 1 1636 30 view .LVU1967
 6941 1c50 9B68     		ldr	r3, [r3, #8]
 6942 1c52 E360     		str	r3, [r4, #12]
 6943              		.loc 1 1675 1 view .LVU1968
 6944 1c54 38BD     		pop	{r3, r4, r5, pc}
 6945              	.L562:
1628:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6946              		.loc 1 1628 6 is_stmt 1 view .LVU1969
1628:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6947              		.loc 1 1628 44 is_stmt 0 view .LVU1970
 6948 1c56 0C4B     		ldr	r3, .L567+4
 6949 1c58 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 6950 1c5a E360     		str	r3, [r4, #12]
 6951              		.loc 1 1675 1 view .LVU1971
 6952 1c5c 38BD     		pop	{r3, r4, r5, pc}
 6953              	.L565:
1655:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6954              		.loc 1 1655 6 is_stmt 1 view .LVU1972
1655:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6955              		.loc 1 1655 44 is_stmt 0 view .LVU1973
 6956 1c5e 0A4B     		ldr	r3, .L567+4
 6957 1c60 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 6958 1c62 E360     		str	r3, [r4, #12]
 6959              		.loc 1 1675 1 view .LVU1974
 6960 1c64 38BD     		pop	{r3, r4, r5, pc}
 6961              	.L564:
1645:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6962              		.loc 1 1645 6 is_stmt 1 view .LVU1975
1645:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6963              		.loc 1 1645 44 is_stmt 0 view .LVU1976
 6964 1c66 084B     		ldr	r3, .L567+4
1645:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6965              		.loc 1 1645 30 view .LVU1977
 6966 1c68 5B68     		ldr	r3, [r3, #4]
 6967 1c6a E360     		str	r3, [r4, #12]
 6968              		.loc 1 1675 1 view .LVU1978
 6969 1c6c 38BD     		pop	{r3, r4, r5, pc}
 6970              	.L566:
1663:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6971              		.loc 1 1663 6 is_stmt 1 view .LVU1979
1663:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6972              		.loc 1 1663 44 is_stmt 0 view .LVU1980
 6973 1c6e 064B     		ldr	r3, .L567+4
1663:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6974              		.loc 1 1663 30 view .LVU1981
 6975 1c70 DB68     		ldr	r3, [r3, #12]
 6976 1c72 E360     		str	r3, [r4, #12]
 6977              		.loc 1 1675 1 view .LVU1982
 6978 1c74 38BD     		pop	{r3, r4, r5, pc}
 6979              	.L559:
1605:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6980              		.loc 1 1605 6 is_stmt 1 view .LVU1983
1605:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6981              		.loc 1 1605 32 is_stmt 0 view .LVU1984
 6982 1c76 40F2FF70 		movw	r0, #2047
 6983              	.LVL475:
1605:TMCL.c        **** 				} else if (command == TMCL_SGP) {
 6984              		.loc 1 1605 32 view .LVU1985
 6985 1c7a FFF7FEFF 		bl	eeprom_readConfigByte
 6986              	.LVL476:
 6987 1c7e E060     		str	r0, [r4, #12]
 6988              		.loc 1 1675 1 view .LVU1986
 6989 1c80 38BD     		pop	{r3, r4, r5, pc}
 6990              	.L568:
 6991 1c82 00BF     		.align	2
 6992              	.L567:
 6993 1c84 00000000 		.word	.LANCHOR0
 6994 1c88 00000000 		.word	moduleConfig
 6995              		.cfi_endproc
 6996              	.LFE17:
 6998              		.align	1
 6999              		.p2align 2,,3
 7000              		.global	tmc4671_readwriteByte
 7001              		.syntax unified
 7002              		.thumb
 7003              		.thumb_func
 7005              	tmc4671_readwriteByte:
 7006              	.LVL477:
 7007              	.LFB0:
  50:TMCL.c        **** 	return (motor == DEFAULT_MC) ? weasel_spi_readWriteByte(data, lastTransfer) : 0;
 7008              		.loc 1 50 1 is_stmt 1 view -0
 7009              		.cfi_startproc
 7010              		@ args = 0, pretend = 0, frame = 0
 7011              		@ frame_needed = 0, uses_anonymous_args = 0
 7012              		@ link register save eliminated.
  51:TMCL.c        **** }
 7013              		.loc 1 51 2 view .LVU1988
  50:TMCL.c        **** 	return (motor == DEFAULT_MC) ? weasel_spi_readWriteByte(data, lastTransfer) : 0;
 7014              		.loc 1 50 1 is_stmt 0 view .LVU1989
 7015 1c8c 0B46     		mov	r3, r1
  51:TMCL.c        **** }
 7016              		.loc 1 51 78 view .LVU1990
 7017 1c8e 08B1     		cbz	r0, .L571
  52:TMCL.c        **** 
 7018              		.loc 1 52 1 discriminator 4 view .LVU1991
 7019 1c90 0020     		movs	r0, #0
 7020              	.LVL478:
  52:TMCL.c        **** 
 7021              		.loc 1 52 1 discriminator 4 view .LVU1992
 7022 1c92 7047     		bx	lr
 7023              	.LVL479:
 7024              	.L571:
  51:TMCL.c        **** }
 7025              		.loc 1 51 33 discriminator 1 view .LVU1993
 7026 1c94 1146     		mov	r1, r2
 7027              	.LVL480:
  51:TMCL.c        **** }
 7028              		.loc 1 51 33 discriminator 1 view .LVU1994
 7029 1c96 1846     		mov	r0, r3
 7030              	.LVL481:
  51:TMCL.c        **** }
 7031              		.loc 1 51 33 discriminator 1 view .LVU1995
 7032 1c98 FFF7FEBF 		b	weasel_spi_readWriteByte
 7033              	.LVL482:
  51:TMCL.c        **** }
 7034              		.loc 1 51 33 discriminator 1 view .LVU1996
 7035              		.cfi_endproc
 7036              	.LFE0:
 7038              		.align	1
 7039              		.p2align 2,,3
 7040              		.global	tmc6200_readwriteByte
 7041              		.syntax unified
 7042              		.thumb
 7043              		.thumb_func
 7045              	tmc6200_readwriteByte:
 7046              	.LVL483:
 7047              	.LFB1:
  55:TMCL.c        **** 	return (motor == DEFAULT_DRV) ? dragon_spi_readWriteByte(data, lastTransfer) : 0;
 7048              		.loc 1 55 1 is_stmt 1 view -0
 7049              		.cfi_startproc
 7050              		@ args = 0, pretend = 0, frame = 0
 7051              		@ frame_needed = 0, uses_anonymous_args = 0
 7052              		@ link register save eliminated.
  56:TMCL.c        **** }
 7053              		.loc 1 56 2 view .LVU1998
  56:TMCL.c        **** }
 7054              		.loc 1 56 79 is_stmt 0 view .LVU1999
 7055 1c9c 0128     		cmp	r0, #1
  55:TMCL.c        **** 	return (motor == DEFAULT_DRV) ? dragon_spi_readWriteByte(data, lastTransfer) : 0;
 7056              		.loc 1 55 1 view .LVU2000
 7057 1c9e 0B46     		mov	r3, r1
  56:TMCL.c        **** }
 7058              		.loc 1 56 79 view .LVU2001
 7059 1ca0 01D0     		beq	.L574
  57:TMCL.c        **** // <= SPI wrapper
 7060              		.loc 1 57 1 discriminator 4 view .LVU2002
 7061 1ca2 0020     		movs	r0, #0
 7062              	.LVL484:
  57:TMCL.c        **** // <= SPI wrapper
 7063              		.loc 1 57 1 discriminator 4 view .LVU2003
 7064 1ca4 7047     		bx	lr
 7065              	.LVL485:
 7066              	.L574:
  56:TMCL.c        **** }
 7067              		.loc 1 56 34 discriminator 1 view .LVU2004
 7068 1ca6 1146     		mov	r1, r2
 7069              	.LVL486:
  56:TMCL.c        **** }
 7070              		.loc 1 56 34 discriminator 1 view .LVU2005
 7071 1ca8 1846     		mov	r0, r3
 7072              	.LVL487:
  56:TMCL.c        **** }
 7073              		.loc 1 56 34 discriminator 1 view .LVU2006
 7074 1caa FFF7FEBF 		b	dragon_spi_readWriteByte
 7075              	.LVL488:
  56:TMCL.c        **** }
 7076              		.loc 1 56 34 discriminator 1 view .LVU2007
 7077              		.cfi_endproc
 7078              	.LFE1:
 7080              		.align	1
 7081 1cae 00BF     		.p2align 2,,3
 7082              		.global	tmcl_rotateLeft
 7083              		.syntax unified
 7084              		.thumb
 7085              		.thumb_func
 7087              	tmcl_rotateLeft:
 7088              	.LFB2:
  62:TMCL.c        **** 	bldc_setTargetVelocity(-ActualCommand.Value.Int32);
 7089              		.loc 1 62 1 is_stmt 1 view -0
 7090              		.cfi_startproc
 7091              		@ args = 0, pretend = 0, frame = 0
 7092              		@ frame_needed = 0, uses_anonymous_args = 0
 7093              		@ link register save eliminated.
  63:TMCL.c        **** }
 7094              		.loc 1 63 2 view .LVU2009
  63:TMCL.c        **** }
 7095              		.loc 1 63 45 is_stmt 0 view .LVU2010
 7096 1cb0 024B     		ldr	r3, .L576
  63:TMCL.c        **** }
 7097              		.loc 1 63 25 view .LVU2011
 7098 1cb2 5868     		ldr	r0, [r3, #4]
  63:TMCL.c        **** }
 7099              		.loc 1 63 2 view .LVU2012
 7100 1cb4 4042     		rsbs	r0, r0, #0
 7101 1cb6 FFF7FEBF 		b	bldc_setTargetVelocity
 7102              	.LVL489:
 7103              	.L577:
 7104 1cba 00BF     		.align	2
 7105              	.L576:
 7106 1cbc 00000000 		.word	.LANCHOR0
 7107              		.cfi_endproc
 7108              	.LFE2:
 7110              		.align	1
 7111              		.p2align 2,,3
 7112              		.global	tmcl_rotateRight
 7113              		.syntax unified
 7114              		.thumb
 7115              		.thumb_func
 7117              	tmcl_rotateRight:
 7118              	.LFB3:
  68:TMCL.c        **** 	bldc_setTargetVelocity(ActualCommand.Value.Int32);
 7119              		.loc 1 68 1 is_stmt 1 view -0
 7120              		.cfi_startproc
 7121              		@ args = 0, pretend = 0, frame = 0
 7122              		@ frame_needed = 0, uses_anonymous_args = 0
 7123              		@ link register save eliminated.
  69:TMCL.c        **** }
 7124              		.loc 1 69 2 view .LVU2014
  69:TMCL.c        **** }
 7125              		.loc 1 69 44 is_stmt 0 view .LVU2015
 7126 1cc0 014B     		ldr	r3, .L579
  69:TMCL.c        **** }
 7127              		.loc 1 69 2 view .LVU2016
 7128 1cc2 5868     		ldr	r0, [r3, #4]
 7129 1cc4 FFF7FEBF 		b	bldc_setTargetVelocity
 7130              	.LVL490:
 7131              	.L580:
 7132              		.align	2
 7133              	.L579:
 7134 1cc8 00000000 		.word	.LANCHOR0
 7135              		.cfi_endproc
 7136              	.LFE3:
 7138              		.align	1
 7139              		.p2align 2,,3
 7140              		.global	tmcl_motorStop
 7141              		.syntax unified
 7142              		.thumb
 7143              		.thumb_func
 7145              	tmcl_motorStop:
 7146              	.LFB4:
  74:TMCL.c        **** 	bldc_stopMotor();
 7147              		.loc 1 74 1 is_stmt 1 view -0
 7148              		.cfi_startproc
 7149              		@ args = 0, pretend = 0, frame = 0
 7150              		@ frame_needed = 0, uses_anonymous_args = 0
 7151              		@ link register save eliminated.
  75:TMCL.c        **** }
 7152              		.loc 1 75 2 view .LVU2018
 7153 1ccc FFF7FEBF 		b	bldc_stopMotor
 7154              	.LVL491:
 7155              		.cfi_endproc
 7156              	.LFE4:
 7158              		.align	1
 7159              		.p2align 2,,3
 7160              		.global	tmcl_init
 7161              		.syntax unified
 7162              		.thumb
 7163              		.thumb_func
 7165              	tmcl_init:
 7166              	.LFB6:
 151:TMCL.c        **** 
 7167              		.loc 1 151 18 view -0
 7168              		.cfi_startproc
 7169              		@ args = 0, pretend = 0, frame = 0
 7170              		@ frame_needed = 0, uses_anonymous_args = 0
 7171              		@ link register save eliminated.
 151:TMCL.c        **** 
 7172              		.loc 1 151 19 view .LVU2020
 7173 1cd0 7047     		bx	lr
 7174              		.cfi_endproc
 7175              	.LFE6:
 7177              		.align	1
 7178 1cd2 00BF     		.p2align 2,,3
 7179              		.global	tmcl_handleAxisParameter
 7180              		.syntax unified
 7181              		.thumb
 7182              		.thumb_func
 7184              	tmcl_handleAxisParameter:
 7185              	.LVL492:
 7186              	.LFB8:
 332:TMCL.c        **** 	if(ActualCommand.Motor == 0)
 7187              		.loc 1 332 1 view -0
 7188              		.cfi_startproc
 7189              		@ args = 0, pretend = 0, frame = 0
 7190              		@ frame_needed = 0, uses_anonymous_args = 0
 7191              		@ link register save eliminated.
 333:TMCL.c        **** 	{
 7192              		.loc 1 333 2 view .LVU2022
 333:TMCL.c        **** 	{
 7193              		.loc 1 333 18 is_stmt 0 view .LVU2023
 7194 1cd4 034B     		ldr	r3, .L585
 333:TMCL.c        **** 	{
 7195              		.loc 1 333 4 view .LVU2024
 7196 1cd6 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 7197 1cd8 0AB9     		cbnz	r2, .L584
 7198 1cda FEF791B9 		b	tmcl_handleAxisParameter.part.0
 7199              	.LVL493:
 7200              	.L584:
1592:TMCL.c        **** 	}
 7201              		.loc 1 1592 3 is_stmt 1 view .LVU2025
1592:TMCL.c        **** 	}
 7202              		.loc 1 1592 22 is_stmt 0 view .LVU2026
 7203 1cde 0422     		movs	r2, #4
 7204 1ce0 1A72     		strb	r2, [r3, #8]
1594:TMCL.c        **** 
 7205              		.loc 1 1594 1 view .LVU2027
 7206 1ce2 7047     		bx	lr
 7207              	.L586:
 7208              		.align	2
 7209              	.L585:
 7210 1ce4 00000000 		.word	.LANCHOR0
 7211              		.cfi_endproc
 7212              	.LFE8:
 7214              		.align	1
 7215              		.p2align 2,,3
 7216              		.global	tmcl_handleGlobalParameter
 7217              		.syntax unified
 7218              		.thumb
 7219              		.thumb_func
 7221              	tmcl_handleGlobalParameter:
 7222              	.LVL494:
 7223              	.LFB9:
1597:TMCL.c        **** 	if (ActualCommand.Motor == 0)	// module config values
 7224              		.loc 1 1597 1 is_stmt 1 view -0
 7225              		.cfi_startproc
 7226              		@ args = 0, pretend = 0, frame = 0
 7227              		@ frame_needed = 0, uses_anonymous_args = 0
 7228              		@ link register save eliminated.
1598:TMCL.c        **** 	{
 7229              		.loc 1 1598 2 view .LVU2029
1598:TMCL.c        **** 	{
 7230              		.loc 1 1598 19 is_stmt 0 view .LVU2030
 7231 1ce8 024B     		ldr	r3, .L589
1598:TMCL.c        **** 	{
 7232              		.loc 1 1598 5 view .LVU2031
 7233 1cea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 7234 1cec 03B9     		cbnz	r3, .L587
 7235 1cee 25E7     		b	tmcl_handleGlobalParameter.part.0
 7236              	.LVL495:
 7237              	.L587:
 7238              		.loc 1 1675 1 view .LVU2032
 7239 1cf0 7047     		bx	lr
 7240              	.L590:
 7241 1cf2 00BF     		.align	2
 7242              	.L589:
 7243 1cf4 00000000 		.word	.LANCHOR0
 7244              		.cfi_endproc
 7245              	.LFE9:
 7247              		.align	1
 7248              		.p2align 2,,3
 7249              		.global	tmcl_setOutput
 7250              		.syntax unified
 7251              		.thumb
 7252              		.thumb_func
 7254              	tmcl_setOutput:
 7255              	.LFB10:
1676:TMCL.c        **** 
1677:TMCL.c        **** /* TMCL command SIO */
1678:TMCL.c        **** void tmcl_setOutput()
1679:TMCL.c        **** {
 7256              		.loc 1 1679 1 is_stmt 1 view -0
 7257              		.cfi_startproc
 7258              		@ args = 0, pretend = 0, frame = 0
 7259              		@ frame_needed = 0, uses_anonymous_args = 0
 7260              		@ link register save eliminated.
1680:TMCL.c        **** 	switch(ActualCommand.Motor)
 7261              		.loc 1 1680 2 view .LVU2034
 7262              		.loc 1 1680 22 is_stmt 0 view .LVU2035
 7263 1cf8 064B     		ldr	r3, .L595
 7264              		.loc 1 1680 2 view .LVU2036
 7265 1cfa 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 7266 1cfc 022A     		cmp	r2, #2
 7267 1cfe 02D0     		beq	.L594
1681:TMCL.c        **** 	{
1682:TMCL.c        ****     	case 2: // digital_outputs
1683:TMCL.c        ****     		if(ActualCommand.Value.Int32 == 0)
1684:TMCL.c        ****     			tmcm_clearModuleSpecificIOPin(ActualCommand.Type);
1685:TMCL.c        ****     		else
1686:TMCL.c        ****     			tmcm_setModuleSpecificIOPin(ActualCommand.Type);
1687:TMCL.c        ****     		break;
1688:TMCL.c        ****     	default:
1689:TMCL.c        ****     		ActualReply.Status = REPLY_INVALID_VALUE;
 7268              		.loc 1 1689 7 is_stmt 1 view .LVU2037
 7269              		.loc 1 1689 26 is_stmt 0 view .LVU2038
 7270 1d00 0422     		movs	r2, #4
 7271 1d02 1A72     		strb	r2, [r3, #8]
1690:TMCL.c        ****     		break;
 7272              		.loc 1 1690 7 is_stmt 1 view .LVU2039
1691:TMCL.c        **** 	}
1692:TMCL.c        **** }
 7273              		.loc 1 1692 1 is_stmt 0 view .LVU2040
 7274 1d04 7047     		bx	lr
 7275              	.L594:
1683:TMCL.c        ****     			tmcm_clearModuleSpecificIOPin(ActualCommand.Type);
 7276              		.loc 1 1683 7 is_stmt 1 view .LVU2041
1683:TMCL.c        ****     			tmcm_clearModuleSpecificIOPin(ActualCommand.Type);
 7277              		.loc 1 1683 9 is_stmt 0 view .LVU2042
 7278 1d06 5A68     		ldr	r2, [r3, #4]
 7279              	.LBB14:
 7280              	.LBB15:
1684:TMCL.c        ****     		else
 7281              		.loc 1 1684 8 view .LVU2043
 7282 1d08 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 7283              	.LBE15:
 7284              	.LBE14:
1683:TMCL.c        ****     			tmcm_clearModuleSpecificIOPin(ActualCommand.Type);
 7285              		.loc 1 1683 9 view .LVU2044
 7286 1d0a 0AB9     		cbnz	r2, .L593
 7287              	.LBB17:
 7288              	.LBI14:
1678:TMCL.c        **** {
 7289              		.loc 1 1678 6 is_stmt 1 view .LVU2045
 7290              	.LBB16:
1684:TMCL.c        ****     		else
 7291              		.loc 1 1684 8 view .LVU2046
 7292 1d0c FFF7FEBF 		b	tmcm_clearModuleSpecificIOPin
 7293              	.LVL496:
 7294              	.L593:
 7295              	.LBE16:
 7296              	.LBE17:
1686:TMCL.c        ****     		break;
 7297              		.loc 1 1686 8 view .LVU2047
 7298 1d10 FFF7FEBF 		b	tmcm_setModuleSpecificIOPin
 7299              	.LVL497:
 7300              	.L596:
 7301              		.align	2
 7302              	.L595:
 7303 1d14 00000000 		.word	.LANCHOR0
 7304              		.cfi_endproc
 7305              	.LFE10:
 7307              		.align	1
 7308              		.p2align 2,,3
 7309              		.global	tmcl_getInput
 7310              		.syntax unified
 7311              		.thumb
 7312              		.thumb_func
 7314              	tmcl_getInput:
 7315              	.LFB11:
1693:TMCL.c        **** 
1694:TMCL.c        **** /* TMCL command GIO */
1695:TMCL.c        **** void tmcl_getInput()
1696:TMCL.c        **** {
 7316              		.loc 1 1696 1 view -0
 7317              		.cfi_startproc
 7318              		@ args = 0, pretend = 0, frame = 0
 7319              		@ frame_needed = 0, uses_anonymous_args = 0
1697:TMCL.c        **** 	switch(ActualCommand.Motor)
 7320              		.loc 1 1697 2 view .LVU2049
1696:TMCL.c        **** 	switch(ActualCommand.Motor)
 7321              		.loc 1 1696 1 is_stmt 0 view .LVU2050
 7322 1d18 10B5     		push	{r4, lr}
 7323              	.LCFI315:
 7324              		.cfi_def_cfa_offset 8
 7325              		.cfi_offset 4, -8
 7326              		.cfi_offset 14, -4
 7327              		.loc 1 1697 22 view .LVU2051
 7328 1d1a 0C4C     		ldr	r4, .L604
 7329 1d1c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 7330              		.loc 1 1697 2 view .LVU2052
 7331 1d1e 012B     		cmp	r3, #1
 7332 1d20 05D0     		beq	.L598
 7333 1d22 022B     		cmp	r3, #2
 7334 1d24 0DD0     		beq	.L599
 7335 1d26 3BB1     		cbz	r3, .L603
1698:TMCL.c        **** 	{
1699:TMCL.c        **** 		case 0: // digital_inputs
1700:TMCL.c        **** 			ActualReply.Value.Int32 = tmcm_getModuleSpecificIOPin(ActualCommand.Type);
1701:TMCL.c        ****     		break;
1702:TMCL.c        ****     	case 1: // analog_inputs
1703:TMCL.c        ****     		ActualReply.Value.Int32 = tmcm_getModuleSpecificADCValue(ActualCommand.Type);
1704:TMCL.c        ****     		break;
1705:TMCL.c        ****     	case 2: // digital outputs
1706:TMCL.c        ****     		ActualReply.Value.Int32 = tmcm_getModuleSpecificIOPinStatus(ActualCommand.Type);
1707:TMCL.c        ****     		break;
1708:TMCL.c        ****     	default:
1709:TMCL.c        ****     		ActualReply.Status = REPLY_INVALID_VALUE;
 7336              		.loc 1 1709 7 is_stmt 1 view .LVU2053
 7337              		.loc 1 1709 26 is_stmt 0 view .LVU2054
 7338 1d28 0423     		movs	r3, #4
 7339 1d2a 2372     		strb	r3, [r4, #8]
1710:TMCL.c        ****     		break;
 7340              		.loc 1 1710 7 is_stmt 1 view .LVU2055
1711:TMCL.c        **** 	}
1712:TMCL.c        **** }
 7341              		.loc 1 1712 1 is_stmt 0 view .LVU2056
 7342 1d2c 10BD     		pop	{r4, pc}
 7343              	.L598:
1703:TMCL.c        ****     		break;
 7344              		.loc 1 1703 7 is_stmt 1 view .LVU2057
1703:TMCL.c        ****     		break;
 7345              		.loc 1 1703 33 is_stmt 0 view .LVU2058
 7346 1d2e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 7347 1d30 FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 7348              	.LVL498:
1703:TMCL.c        ****     		break;
 7349              		.loc 1 1703 31 view .LVU2059
 7350 1d34 E060     		str	r0, [r4, #12]
1704:TMCL.c        ****     	case 2: // digital outputs
 7351              		.loc 1 1704 7 is_stmt 1 view .LVU2060
 7352              		.loc 1 1712 1 is_stmt 0 view .LVU2061
 7353 1d36 10BD     		pop	{r4, pc}
 7354              	.L603:
 7355              	.LBB20:
 7356              	.LBI20:
1695:TMCL.c        **** {
 7357              		.loc 1 1695 6 is_stmt 1 view .LVU2062
 7358              	.LBB21:
1700:TMCL.c        ****     		break;
 7359              		.loc 1 1700 4 view .LVU2063
1700:TMCL.c        ****     		break;
 7360              		.loc 1 1700 30 is_stmt 0 view .LVU2064
 7361 1d38 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 7362 1d3a FFF7FEFF 		bl	tmcm_getModuleSpecificIOPin
 7363              	.LVL499:
 7364 1d3e E060     		str	r0, [r4, #12]
1701:TMCL.c        ****     	case 1: // analog_inputs
 7365              		.loc 1 1701 7 is_stmt 1 view .LVU2065
 7366              	.LBE21:
 7367              	.LBE20:
 7368              		.loc 1 1712 1 is_stmt 0 view .LVU2066
 7369 1d40 10BD     		pop	{r4, pc}
 7370              	.L599:
1706:TMCL.c        ****     		break;
 7371              		.loc 1 1706 7 is_stmt 1 view .LVU2067
1706:TMCL.c        ****     		break;
 7372              		.loc 1 1706 33 is_stmt 0 view .LVU2068
 7373 1d42 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 7374 1d44 FFF7FEFF 		bl	tmcm_getModuleSpecificIOPinStatus
 7375              	.LVL500:
 7376 1d48 E060     		str	r0, [r4, #12]
1707:TMCL.c        ****     	default:
 7377              		.loc 1 1707 7 is_stmt 1 view .LVU2069
 7378              		.loc 1 1712 1 is_stmt 0 view .LVU2070
 7379 1d4a 10BD     		pop	{r4, pc}
 7380              	.L605:
 7381              		.align	2
 7382              	.L604:
 7383 1d4c 00000000 		.word	.LANCHOR0
 7384              		.cfi_endproc
 7385              	.LFE11:
 7387              		.align	1
 7388              		.p2align 2,,3
 7389              		.global	tmcl_getVersion
 7390              		.syntax unified
 7391              		.thumb
 7392              		.thumb_func
 7394              	tmcl_getVersion:
 7395              	.LFB12:
1713:TMCL.c        **** 
1714:TMCL.c        **** /* TMCL command 136 (Get Version) */
1715:TMCL.c        **** void tmcl_getVersion()
1716:TMCL.c        **** {
 7396              		.loc 1 1716 1 is_stmt 1 view -0
 7397              		.cfi_startproc
 7398              		@ args = 0, pretend = 0, frame = 0
 7399              		@ frame_needed = 0, uses_anonymous_args = 0
 7400              		@ link register save eliminated.
1717:TMCL.c        **** 	uint32_t i;
 7401              		.loc 1 1717 2 view .LVU2072
1718:TMCL.c        **** 
1719:TMCL.c        **** 	switch(ActualCommand.Type)
 7402              		.loc 1 1719 2 view .LVU2073
 7403              		.loc 1 1719 22 is_stmt 0 view .LVU2074
 7404 1d50 0F49     		ldr	r1, .L614
 7405 1d52 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 7406              		.loc 1 1719 2 view .LVU2075
 7407 1d54 23B1     		cbz	r3, .L607
 7408 1d56 012B     		cmp	r3, #1
 7409 1d58 16D0     		beq	.L608
1720:TMCL.c        **** 	{
1721:TMCL.c        **** 		case 0:
1722:TMCL.c        **** 			TMCLReplyFormat = RF_SPECIAL;
1723:TMCL.c        **** 			SpecialReply[0] = moduleConfig.serialHostAddress;
1724:TMCL.c        **** 			for(i=0; i<8; i++)
1725:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
1726:TMCL.c        **** 			break;
1727:TMCL.c        **** 		case 1:
1728:TMCL.c        **** 			ActualReply.Value.Byte[3] = SW_TYPE_HIGH;
1729:TMCL.c        **** 			ActualReply.Value.Byte[2] = SW_TYPE_LOW;
1730:TMCL.c        **** 			ActualReply.Value.Byte[1] = SW_VERSION_HIGH;
1731:TMCL.c        **** 			ActualReply.Value.Byte[0] = SW_VERSION_LOW;
1732:TMCL.c        **** 			break;
1733:TMCL.c        **** 	    default:
1734:TMCL.c        **** 	      ActualReply.Status = REPLY_WRONG_TYPE;
 7410              		.loc 1 1734 8 is_stmt 1 view .LVU2076
 7411              		.loc 1 1734 27 is_stmt 0 view .LVU2077
 7412 1d5a 0323     		movs	r3, #3
 7413 1d5c 0B72     		strb	r3, [r1, #8]
1735:TMCL.c        **** 	      break;
 7414              		.loc 1 1735 8 is_stmt 1 view .LVU2078
1736:TMCL.c        **** 	}
1737:TMCL.c        **** }
 7415              		.loc 1 1737 1 is_stmt 0 view .LVU2079
 7416 1d5e 7047     		bx	lr
 7417              	.L607:
 7418              	.LBB24:
 7419              	.LBI24:
1715:TMCL.c        **** {
 7420              		.loc 1 1715 6 is_stmt 1 view .LVU2080
 7421              	.LBB25:
1722:TMCL.c        **** 			SpecialReply[0] = moduleConfig.serialHostAddress;
 7422              		.loc 1 1722 4 view .LVU2081
1722:TMCL.c        **** 			SpecialReply[0] = moduleConfig.serialHostAddress;
 7423              		.loc 1 1722 20 is_stmt 0 view .LVU2082
 7424 1d60 4FF0010C 		mov	ip, #1
1725:TMCL.c        **** 			break;
 7425              		.loc 1 1725 36 view .LVU2083
 7426 1d64 0B4A     		ldr	r2, .L614+4
1723:TMCL.c        **** 			for(i=0; i<8; i++)
 7427              		.loc 1 1723 34 view .LVU2084
 7428 1d66 0C4B     		ldr	r3, .L614+8
1725:TMCL.c        **** 			break;
 7429              		.loc 1 1725 36 view .LVU2085
 7430 1d68 1068     		ldr	r0, [r2]
1723:TMCL.c        **** 			for(i=0; i<8; i++)
 7431              		.loc 1 1723 20 view .LVU2086
 7432 1d6a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 7433 1d6c 01F11502 		add	r2, r1, #21
 7434 1d70 0B75     		strb	r3, [r1, #20]
1722:TMCL.c        **** 			SpecialReply[0] = moduleConfig.serialHostAddress;
 7435              		.loc 1 1722 20 view .LVU2087
 7436 1d72 81F810C0 		strb	ip, [r1, #16]
1723:TMCL.c        **** 			for(i=0; i<8; i++)
 7437              		.loc 1 1723 4 is_stmt 1 view .LVU2088
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7438              		.loc 1 1724 4 view .LVU2089
 7439              	.LVL501:
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7440              		.loc 1 1724 13 view .LVU2090
 7441 1d76 431E     		subs	r3, r0, #1
 7442 1d78 0730     		adds	r0, r0, #7
 7443              	.LVL502:
 7444              	.L610:
1725:TMCL.c        **** 			break;
 7445              		.loc 1 1725 5 view .LVU2091
1725:TMCL.c        **** 			break;
 7446              		.loc 1 1725 36 is_stmt 0 view .LVU2092
 7447 1d7a 13F8011F 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2
 7448              	.LVL503:
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7449              		.loc 1 1724 4 view .LVU2093
 7450 1d7e 8342     		cmp	r3, r0
1725:TMCL.c        **** 			break;
 7451              		.loc 1 1725 22 view .LVU2094
 7452 1d80 02F8011B 		strb	r1, [r2], #1
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7453              		.loc 1 1724 18 is_stmt 1 view .LVU2095
 7454              	.LVL504:
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7455              		.loc 1 1724 13 view .LVU2096
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7456              		.loc 1 1724 4 is_stmt 0 view .LVU2097
 7457 1d84 F9D1     		bne	.L610
 7458 1d86 7047     		bx	lr
 7459              	.LVL505:
 7460              	.L608:
1724:TMCL.c        **** 				SpecialReply[i+1]=VersionString[i];
 7461              		.loc 1 1724 4 view .LVU2098
 7462              	.LBE25:
 7463              	.LBE24:
1728:TMCL.c        **** 			ActualReply.Value.Byte[2] = SW_TYPE_LOW;
 7464              		.loc 1 1728 4 is_stmt 1 view .LVU2099
1729:TMCL.c        **** 			ActualReply.Value.Byte[1] = SW_VERSION_HIGH;
 7465              		.loc 1 1729 4 view .LVU2100
1730:TMCL.c        **** 			ActualReply.Value.Byte[0] = SW_VERSION_LOW;
 7466              		.loc 1 1730 4 view .LVU2101
1731:TMCL.c        **** 			break;
 7467              		.loc 1 1731 4 view .LVU2102
1731:TMCL.c        **** 			break;
 7468              		.loc 1 1731 30 is_stmt 0 view .LVU2103
 7469 1d88 044B     		ldr	r3, .L614+12
 7470 1d8a CB60     		str	r3, [r1, #12]
1732:TMCL.c        **** 	    default:
 7471              		.loc 1 1732 4 is_stmt 1 view .LVU2104
 7472 1d8c 7047     		bx	lr
 7473              	.L615:
 7474 1d8e 00BF     		.align	2
 7475              	.L614:
 7476 1d90 00000000 		.word	.LANCHOR0
 7477 1d94 00000000 		.word	VersionString
 7478 1d98 00000000 		.word	moduleConfig
 7479 1d9c 00015206 		.word	106037504
 7480              		.cfi_endproc
 7481              	.LFE12:
 7483              		.align	1
 7484              		.p2align 2,,3
 7485              		.global	tmcl_boot
 7486              		.syntax unified
 7487              		.thumb
 7488              		.thumb_func
 7490              	tmcl_boot:
 7491              	.LFB13:
1738:TMCL.c        **** 
1739:TMCL.c        **** /* special command to switch to bootloader mode */
1740:TMCL.c        **** void tmcl_boot()
1741:TMCL.c        **** {
 7492              		.loc 1 1741 1 view -0
 7493              		.cfi_startproc
 7494              		@ args = 0, pretend = 0, frame = 0
 7495              		@ frame_needed = 0, uses_anonymous_args = 0
1742:TMCL.c        **** 	if(ActualCommand.Type==0x81 && ActualCommand.Motor==0x92 &&
 7496              		.loc 1 1742 2 view .LVU2106
 7497              		.loc 1 1742 30 is_stmt 0 view .LVU2107
 7498 1da0 124A     		ldr	r2, .L620
1741:TMCL.c        **** 	if(ActualCommand.Type==0x81 && ActualCommand.Motor==0x92 &&
 7499              		.loc 1 1741 1 view .LVU2108
 7500 1da2 08B5     		push	{r3, lr}
 7501              	.LCFI316:
 7502              		.cfi_def_cfa_offset 8
 7503              		.cfi_offset 3, -8
 7504              		.cfi_offset 14, -4
 7505              		.loc 1 1742 30 view .LVU2109
 7506 1da4 1368     		ldr	r3, [r2]
 7507              		.loc 1 1742 4 view .LVU2110
 7508 1da6 1249     		ldr	r1, .L620+4
 7509              		.loc 1 1742 30 view .LVU2111
 7510 1da8 23F07F43 		bic	r3, r3, #-16777216
 7511 1dac 23F0FF03 		bic	r3, r3, #255
 7512              		.loc 1 1742 4 view .LVU2112
 7513 1db0 8B42     		cmp	r3, r1
 7514 1db2 00D0     		beq	.L619
 7515              	.L616:
1743:TMCL.c        **** 			ActualCommand.Value.Byte[3]==0xa3 && ActualCommand.Value.Byte[2]==0xb4 &&
1744:TMCL.c        **** 			ActualCommand.Value.Byte[1]==0xc5 && ActualCommand.Value.Byte[0]==0xd6)
1745:TMCL.c        **** 	{
1746:TMCL.c        **** 		io_disableInterrupts();
1747:TMCL.c        **** 		NVIC_DeInit();
1748:TMCL.c        **** 		SysTick_ITConfig(DISABLE);
1749:TMCL.c        **** 		DMA_Cmd(DMA1_Channel1, DISABLE);
1750:TMCL.c        **** 		DMA_DeInit(DMA1_Channel1);
1751:TMCL.c        **** 		ADC_DeInit(ADC1);
1752:TMCL.c        **** 		io_resetCPU(false);
1753:TMCL.c        **** 	}
1754:TMCL.c        **** }
 7516              		.loc 1 1754 1 view .LVU2113
 7517 1db4 08BD     		pop	{r3, pc}
 7518              	.L619:
1744:TMCL.c        **** 	{
 7519              		.loc 1 1744 38 view .LVU2114
 7520 1db6 0F4B     		ldr	r3, .L620+8
 7521 1db8 5268     		ldr	r2, [r2, #4]
 7522 1dba 9A42     		cmp	r2, r3
 7523 1dbc FAD1     		bne	.L616
 7524              	.LBB28:
 7525              	.LBI28:
1740:TMCL.c        **** {
 7526              		.loc 1 1740 6 is_stmt 1 view .LVU2115
 7527              	.LBB29:
1746:TMCL.c        **** 		NVIC_DeInit();
 7528              		.loc 1 1746 3 view .LVU2116
 7529 1dbe FFF7FEFF 		bl	io_disableInterrupts
 7530              	.LVL506:
1747:TMCL.c        **** 		SysTick_ITConfig(DISABLE);
 7531              		.loc 1 1747 3 view .LVU2117
 7532 1dc2 FFF7FEFF 		bl	NVIC_DeInit
 7533              	.LVL507:
1748:TMCL.c        **** 		DMA_Cmd(DMA1_Channel1, DISABLE);
 7534              		.loc 1 1748 3 view .LVU2118
 7535 1dc6 0020     		movs	r0, #0
 7536 1dc8 FFF7FEFF 		bl	SysTick_ITConfig
 7537              	.LVL508:
1749:TMCL.c        **** 		DMA_DeInit(DMA1_Channel1);
 7538              		.loc 1 1749 3 view .LVU2119
 7539 1dcc 0021     		movs	r1, #0
 7540 1dce 0A48     		ldr	r0, .L620+12
 7541 1dd0 FFF7FEFF 		bl	DMA_Cmd
 7542              	.LVL509:
1750:TMCL.c        **** 		ADC_DeInit(ADC1);
 7543              		.loc 1 1750 3 view .LVU2120
 7544 1dd4 0848     		ldr	r0, .L620+12
 7545 1dd6 FFF7FEFF 		bl	DMA_DeInit
 7546              	.LVL510:
1751:TMCL.c        **** 		io_resetCPU(false);
 7547              		.loc 1 1751 3 view .LVU2121
 7548 1dda 0848     		ldr	r0, .L620+16
 7549 1ddc FFF7FEFF 		bl	ADC_DeInit
 7550              	.LVL511:
1752:TMCL.c        **** 	}
 7551              		.loc 1 1752 3 view .LVU2122
 7552              	.LBE29:
 7553              	.LBE28:
 7554              		.loc 1 1754 1 is_stmt 0 view .LVU2123
 7555 1de0 BDE80840 		pop	{r3, lr}
 7556              	.LCFI317:
 7557              		.cfi_restore 14
 7558              		.cfi_restore 3
 7559              		.cfi_def_cfa_offset 0
 7560              	.LBB31:
 7561              	.LBB30:
1752:TMCL.c        **** 	}
 7562              		.loc 1 1752 3 view .LVU2124
 7563 1de4 0020     		movs	r0, #0
 7564 1de6 FFF7FEBF 		b	io_resetCPU
 7565              	.LVL512:
 7566              	.L621:
 7567 1dea 00BF     		.align	2
 7568              	.L620:
 7569 1dec 00000000 		.word	.LANCHOR0
 7570 1df0 00819200 		.word	9601280
 7571 1df4 D6C5B4A3 		.word	-1548433962
 7572 1df8 08000240 		.word	1073872904
 7573 1dfc 00240140 		.word	1073816576
 7574              	.LBE30:
 7575              	.LBE31:
 7576              		.cfi_endproc
 7577              	.LFE13:
 7579              		.align	1
 7580              		.p2align 2,,3
 7581              		.global	tmcl_executeActualCommand
 7582              		.syntax unified
 7583              		.thumb
 7584              		.thumb_func
 7586              	tmcl_executeActualCommand:
 7587              	.LFB5:
  80:TMCL.c        **** 	// prepare reply command
 7588              		.loc 1 80 1 is_stmt 1 view -0
 7589              		.cfi_startproc
 7590              		@ args = 0, pretend = 0, frame = 0
 7591              		@ frame_needed = 0, uses_anonymous_args = 0
  82:TMCL.c        **** 	ActualReply.Status = REPLY_OK;
 7592              		.loc 1 82 2 view .LVU2126
  83:TMCL.c        **** 	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
 7593              		.loc 1 83 21 is_stmt 0 view .LVU2127
 7594 1e00 6422     		movs	r2, #100
  80:TMCL.c        **** 	// prepare reply command
 7595              		.loc 1 80 1 view .LVU2128
 7596 1e02 10B5     		push	{r4, lr}
 7597              	.LCFI318:
 7598              		.cfi_def_cfa_offset 8
 7599              		.cfi_offset 4, -8
 7600              		.cfi_offset 14, -4
  82:TMCL.c        **** 	ActualReply.Status = REPLY_OK;
 7601              		.loc 1 82 36 view .LVU2129
 7602 1e04 574C     		ldr	r4, .L659
 7603 1e06 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  84:TMCL.c        **** 
 7604              		.loc 1 84 47 view .LVU2130
 7605 1e08 6068     		ldr	r0, [r4, #4]
  87:TMCL.c        **** 	{
 7606              		.loc 1 87 2 view .LVU2131
 7607 1e0a 0F2B     		cmp	r3, #15
  82:TMCL.c        **** 	ActualReply.Status = REPLY_OK;
 7608              		.loc 1 82 21 view .LVU2132
 7609 1e0c 6372     		strb	r3, [r4, #9]
  83:TMCL.c        **** 	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
 7610              		.loc 1 83 2 is_stmt 1 view .LVU2133
  84:TMCL.c        **** 
 7611              		.loc 1 84 26 is_stmt 0 view .LVU2134
 7612 1e0e E060     		str	r0, [r4, #12]
  83:TMCL.c        **** 	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
 7613              		.loc 1 83 21 view .LVU2135
 7614 1e10 2272     		strb	r2, [r4, #8]
  84:TMCL.c        **** 
 7615              		.loc 1 84 2 is_stmt 1 view .LVU2136
  87:TMCL.c        **** 	{
 7616              		.loc 1 87 2 view .LVU2137
 7617 1e12 0FD8     		bhi	.L623
 7618 1e14 3BB3     		cbz	r3, .L625
 7619 1e16 03F1FF3C 		add	ip, r3, #-1
 7620 1e1a BCF10E0F 		cmp	ip, #14
 7621 1e1e 22D8     		bhi	.L625
 7622 1e20 DFE80CF0 		tbb	[pc, ip]
 7623              	.L632:
 7624 1e24 64       		.byte	(.L652-.L632)/2
 7625 1e25 63       		.byte	(.L637-.L632)/2
 7626 1e26 6C       		.byte	(.L636-.L632)/2
 7627 1e27 21       		.byte	(.L625-.L632)/2
 7628 1e28 24       		.byte	(.L635-.L632)/2
 7629 1e29 24       		.byte	(.L635-.L632)/2
 7630 1e2a 24       		.byte	(.L635-.L632)/2
 7631 1e2b 24       		.byte	(.L635-.L632)/2
 7632 1e2c 2C       		.byte	(.L634-.L632)/2
 7633 1e2d 2C       		.byte	(.L634-.L632)/2
 7634 1e2e 2C       		.byte	(.L634-.L632)/2
 7635 1e2f 2C       		.byte	(.L634-.L632)/2
 7636 1e30 21       		.byte	(.L625-.L632)/2
 7637 1e31 70       		.byte	(.L633-.L632)/2
 7638 1e32 68       		.byte	(.L631-.L632)/2
 7639 1e33 00       		.p2align 1
 7640              	.L623:
 7641 1e34 942B     		cmp	r3, #148
 7642 1e36 0DD8     		bhi	.L639
 7643 1e38 872B     		cmp	r3, #135
 7644 1e3a 14D9     		bls	.L625
 7645 1e3c 883B     		subs	r3, r3, #136
 7646 1e3e 0C2B     		cmp	r3, #12
 7647 1e40 11D8     		bhi	.L625
 7648 1e42 DFE803F0 		tbb	[pc, r3]
 7649              	.L627:
 7650 1e46 22       		.byte	(.L630-.L627)/2
 7651 1e47 26       		.byte	(.L629-.L627)/2
 7652 1e48 10       		.byte	(.L625-.L627)/2
 7653 1e49 10       		.byte	(.L625-.L627)/2
 7654 1e4a 10       		.byte	(.L625-.L627)/2
 7655 1e4b 10       		.byte	(.L625-.L627)/2
 7656 1e4c 10       		.byte	(.L625-.L627)/2
 7657 1e4d 10       		.byte	(.L625-.L627)/2
 7658 1e4e 10       		.byte	(.L625-.L627)/2
 7659 1e4f 10       		.byte	(.L625-.L627)/2
 7660 1e50 3A       		.byte	(.L628-.L627)/2
 7661 1e51 10       		.byte	(.L625-.L627)/2
 7662 1e52 47       		.byte	(.L626-.L627)/2
 7663 1e53 00       		.p2align 1
 7664              	.L639:
 7665 1e54 F22B     		cmp	r3, #242
 7666 1e56 5BD0     		beq	.L641
 7667 1e58 FF2B     		cmp	r3, #255
 7668 1e5a 04D1     		bne	.L625
 126:TMCL.c        ****     		break;
 7669              		.loc 1 126 7 view .LVU2138
 7670              	.LBB52:
 7671              	.LBI52:
1755:TMCL.c        **** 
1756:TMCL.c        **** /* TMCL command 255 (Reset) */
1757:TMCL.c        **** void tmcl_softwareReset()
 7672              		.loc 1 1757 6 view .LVU2139
 7673              	.LBB53:
1758:TMCL.c        **** {
1759:TMCL.c        **** 	if(ActualCommand.Value.Int32==1234)
 7674              		.loc 1 1759 2 view .LVU2140
 7675              		.loc 1 1759 4 is_stmt 0 view .LVU2141
 7676 1e5c 40F2D243 		movw	r3, #1234
 7677 1e60 9842     		cmp	r0, r3
 7678 1e62 59D0     		beq	.L653
 7679              	.L622:
 7680              	.LBE53:
 7681              	.LBE52:
 148:TMCL.c        **** 
 7682              		.loc 1 148 1 view .LVU2142
 7683 1e64 10BD     		pop	{r4, pc}
 7684              	.L625:
 145:TMCL.c        ****     		break;
 7685              		.loc 1 145 7 is_stmt 1 view .LVU2143
 145:TMCL.c        ****     		break;
 7686              		.loc 1 145 26 is_stmt 0 view .LVU2144
 7687 1e66 0223     		movs	r3, #2
 7688 1e68 2372     		strb	r3, [r4, #8]
 146:TMCL.c        **** 	}
 7689              		.loc 1 146 7 is_stmt 1 view .LVU2145
 148:TMCL.c        **** 
 7690              		.loc 1 148 1 is_stmt 0 view .LVU2146
 7691 1e6a 10BD     		pop	{r4, pc}
 7692              	.L635:
 102:TMCL.c        ****     		break;
 7693              		.loc 1 102 7 is_stmt 1 view .LVU2147
 7694              	.LVL513:
 7695              	.LBB55:
 7696              	.LBI55:
 331:TMCL.c        **** {
 7697              		.loc 1 331 6 view .LVU2148
 7698              	.LBB56:
 333:TMCL.c        **** 	{
 7699              		.loc 1 333 2 view .LVU2149
 333:TMCL.c        **** 	{
 7700              		.loc 1 333 4 is_stmt 0 view .LVU2150
 7701 1e6c A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 7702 1e6e 002A     		cmp	r2, #0
 7703 1e70 4BD1     		bne	.L645
 7704              	.LBE56:
 7705              	.LBE55:
 148:TMCL.c        **** 
 7706              		.loc 1 148 1 view .LVU2151
 7707 1e72 BDE81040 		pop	{r4, lr}
 7708              	.LCFI319:
 7709              		.cfi_remember_state
 7710              		.cfi_restore 14
 7711              		.cfi_restore 4
 7712              		.cfi_def_cfa_offset 0
 7713              	.LBB58:
 7714              	.LBB57:
 7715 1e76 1846     		mov	r0, r3
 7716 1e78 FEF7C2B8 		b	tmcl_handleAxisParameter.part.0
 7717              	.LVL514:
 7718              	.L634:
 7719              	.LCFI320:
 7720              		.cfi_restore_state
 148:TMCL.c        **** 
 7721              		.loc 1 148 1 view .LVU2152
 7722              	.LBE57:
 7723              	.LBE58:
 108:TMCL.c        ****     		break;
 7724              		.loc 1 108 7 is_stmt 1 view .LVU2153
 7725              	.LBB59:
 7726              	.LBI59:
1596:TMCL.c        **** {
 7727              		.loc 1 1596 6 view .LVU2154
 7728              	.LBB60:
1598:TMCL.c        **** 	{
 7729              		.loc 1 1598 2 view .LVU2155
1598:TMCL.c        **** 	{
 7730              		.loc 1 1598 5 is_stmt 0 view .LVU2156
 7731 1e7c A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 7732 1e7e 002A     		cmp	r2, #0
 7733 1e80 F0D1     		bne	.L622
 7734              	.LBE60:
 7735              	.LBE59:
 148:TMCL.c        **** 
 7736              		.loc 1 148 1 view .LVU2157
 7737 1e82 BDE81040 		pop	{r4, lr}
 7738              	.LCFI321:
 7739              		.cfi_remember_state
 7740              		.cfi_restore 14
 7741              		.cfi_restore 4
 7742              		.cfi_def_cfa_offset 0
 7743              	.LBB62:
 7744              	.LBB61:
 7745 1e86 1846     		mov	r0, r3
 7746 1e88 58E6     		b	tmcl_handleGlobalParameter.part.0
 7747              	.LVL515:
 7748              	.L630:
 7749              	.LCFI322:
 7750              		.cfi_restore_state
 148:TMCL.c        **** 
 7751              		.loc 1 148 1 view .LVU2158
 7752              	.LBE61:
 7753              	.LBE62:
 111:TMCL.c        ****     		break;
 7754              		.loc 1 111 7 is_stmt 1 view .LVU2159
 148:TMCL.c        **** 
 7755              		.loc 1 148 1 is_stmt 0 view .LVU2160
 7756 1e8a BDE81040 		pop	{r4, lr}
 7757              	.LCFI323:
 7758              		.cfi_remember_state
 7759              		.cfi_restore 14
 7760              		.cfi_restore 4
 7761              		.cfi_def_cfa_offset 0
 111:TMCL.c        ****     		break;
 7762              		.loc 1 111 7 view .LVU2161
 7763 1e8e FFF7FEBF 		b	tmcl_getVersion
 7764              	.LVL516:
 7765              	.L629:
 7766              	.LCFI324:
 7767              		.cfi_restore_state
 120:TMCL.c        ****     		break;
 7768              		.loc 1 120 7 is_stmt 1 view .LVU2162
 7769              	.LBB63:
 7770              	.LBI63:
1760:TMCL.c        **** 		ResetRequested = true;
1761:TMCL.c        **** }
1762:TMCL.c        **** 
1763:TMCL.c        **** /* reset to factory defaults */
1764:TMCL.c        **** void tmcl_factoryDefault()
 7771              		.loc 1 1764 6 view .LVU2163
 7772              	.LBB64:
1765:TMCL.c        **** {
1766:TMCL.c        **** 	if((ActualCommand.Type==0) && (ActualCommand.Motor==0) && (ActualCommand.Value.Int32==1234))
 7773              		.loc 1 1766 2 view .LVU2164
 7774              		.loc 1 1766 29 is_stmt 0 view .LVU2165
 7775 1e92 2168     		ldr	r1, [r4]
 7776 1e94 21F07F41 		bic	r1, r1, #-16777216
 7777 1e98 21F0FF01 		bic	r1, r1, #255
 7778              		.loc 1 1766 4 view .LVU2166
 7779 1e9c 0029     		cmp	r1, #0
 7780 1e9e E1D1     		bne	.L622
 7781              		.loc 1 1766 57 view .LVU2167
 7782 1ea0 40F2D243 		movw	r3, #1234
 7783 1ea4 9842     		cmp	r0, r3
 7784 1ea6 DDD1     		bne	.L622
 7785              	.LBB65:
 7786              	.LBI65:
1764:TMCL.c        **** {
 7787              		.loc 1 1764 6 is_stmt 1 view .LVU2168
 7788              	.LBB66:
1767:TMCL.c        **** 	{
1768:TMCL.c        **** 		eeprom_writeConfigByte(TMCM_ADDR_EEPROM_MAGIC, 0);
 7789              		.loc 1 1768 3 view .LVU2169
 7790 1ea8 40F2FF70 		movw	r0, #2047
 7791 1eac FFF7FEFF 		bl	eeprom_writeConfigByte
 7792              	.LVL517:
1769:TMCL.c        **** 		io_resetCPU(true);
 7793              		.loc 1 1769 3 view .LVU2170
 7794              	.LBE66:
 7795              	.LBE65:
 7796              	.LBE64:
 7797              	.LBE63:
 148:TMCL.c        **** 
 7798              		.loc 1 148 1 is_stmt 0 view .LVU2171
 7799 1eb0 BDE81040 		pop	{r4, lr}
 7800              	.LCFI325:
 7801              		.cfi_remember_state
 7802              		.cfi_restore 14
 7803              		.cfi_restore 4
 7804              		.cfi_def_cfa_offset 0
 7805              	.LBB70:
 7806              	.LBB69:
 7807              	.LBB68:
 7808              	.LBB67:
 7809              		.loc 1 1769 3 view .LVU2172
 7810 1eb4 0120     		movs	r0, #1
 7811 1eb6 FFF7FEBF 		b	io_resetCPU
 7812              	.LVL518:
 7813              	.L628:
 7814              	.LCFI326:
 7815              		.cfi_restore_state
 7816              	.LBE67:
 7817              	.LBE68:
 7818              	.LBE69:
 7819              	.LBE70:
 137:TMCL.c        **** 				tmc4671_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 7820              		.loc 1 137 4 is_stmt 1 view .LVU2173
 137:TMCL.c        **** 				tmc4671_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 7821              		.loc 1 137 21 is_stmt 0 view .LVU2174
 7822 1eba A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 137:TMCL.c        **** 				tmc4671_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 7823              		.loc 1 137 7 view .LVU2175
 7824 1ebc 002B     		cmp	r3, #0
 7825 1ebe 39D0     		beq	.L654
 139:TMCL.c        ****     			tmc6200_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 7826              		.loc 1 139 9 is_stmt 1 view .LVU2176
 139:TMCL.c        ****     			tmc6200_writeInt(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
 7827              		.loc 1 139 12 is_stmt 0 view .LVU2177
 7828 1ec0 012B     		cmp	r3, #1
 7829 1ec2 43D0     		beq	.L655
 141:TMCL.c        **** 				LIS2DH12_spi_writeInt(ActualCommand.Type, ActualCommand.Value.Int32);
 7830              		.loc 1 141 9 is_stmt 1 view .LVU2178
 141:TMCL.c        **** 				LIS2DH12_spi_writeInt(ActualCommand.Type, ActualCommand.Value.Int32);
 7831              		.loc 1 141 12 is_stmt 0 view .LVU2179
 7832 1ec4 022B     		cmp	r3, #2
 7833 1ec6 CDD1     		bne	.L622
 142:TMCL.c        **** 			break;
 7834              		.loc 1 142 5 is_stmt 1 view .LVU2180
 7835 1ec8 0146     		mov	r1, r0
 7836 1eca 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 148:TMCL.c        **** 
 7837              		.loc 1 148 1 is_stmt 0 view .LVU2181
 7838 1ecc BDE81040 		pop	{r4, lr}
 7839              	.LCFI327:
 7840              		.cfi_remember_state
 7841              		.cfi_restore 14
 7842              		.cfi_restore 4
 7843              		.cfi_def_cfa_offset 0
 142:TMCL.c        **** 			break;
 7844              		.loc 1 142 5 view .LVU2182
 7845 1ed0 FFF7FEBF 		b	LIS2DH12_spi_writeInt
 7846              	.LVL519:
 7847              	.L626:
 7848              	.LCFI328:
 7849              		.cfi_restore_state
 129:TMCL.c        ****         		ActualReply.Value.Int32 = tmc4671_readInt(ActualCommand.Motor, ActualCommand.Type);
 7850              		.loc 1 129 4 is_stmt 1 view .LVU2183
 129:TMCL.c        ****         		ActualReply.Value.Int32 = tmc4671_readInt(ActualCommand.Motor, ActualCommand.Type);
 7851              		.loc 1 129 21 is_stmt 0 view .LVU2184
 7852 1ed4 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 129:TMCL.c        ****         		ActualReply.Value.Int32 = tmc4671_readInt(ActualCommand.Motor, ActualCommand.Type);
 7853              		.loc 1 129 7 view .LVU2185
 7854 1ed6 40B3     		cbz	r0, .L656
 131:TMCL.c        **** 				ActualReply.Value.Int32 = tmc6200_readInt(DEFAULT_DRV, ActualCommand.Type);
 7855              		.loc 1 131 9 is_stmt 1 view .LVU2186
 131:TMCL.c        **** 				ActualReply.Value.Int32 = tmc6200_readInt(DEFAULT_DRV, ActualCommand.Type);
 7856              		.loc 1 131 12 is_stmt 0 view .LVU2187
 7857 1ed8 0128     		cmp	r0, #1
 7858 1eda 3ED0     		beq	.L657
 133:TMCL.c        **** 				ActualReply.Value.Int32 = LIS2DH12_spi_readInt(ActualCommand.Type);
 7859              		.loc 1 133 9 is_stmt 1 view .LVU2188
 133:TMCL.c        **** 				ActualReply.Value.Int32 = LIS2DH12_spi_readInt(ActualCommand.Type);
 7860              		.loc 1 133 12 is_stmt 0 view .LVU2189
 7861 1edc 0228     		cmp	r0, #2
 7862 1ede C1D1     		bne	.L622
 134:TMCL.c        **** 			break;
 7863              		.loc 1 134 5 is_stmt 1 view .LVU2190
 134:TMCL.c        **** 			break;
 7864              		.loc 1 134 31 is_stmt 0 view .LVU2191
 7865 1ee0 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 7866 1ee2 FFF7FEFF 		bl	LIS2DH12_spi_readInt
 7867              	.LVL520:
 134:TMCL.c        **** 			break;
 7868              		.loc 1 134 29 view .LVU2192
 7869 1ee6 E060     		str	r0, [r4, #12]
 148:TMCL.c        **** 
 7870              		.loc 1 148 1 view .LVU2193
 7871 1ee8 10BD     		pop	{r4, pc}
 7872              	.L637:
  93:TMCL.c        **** 			break;
 7873              		.loc 1 93 4 is_stmt 1 view .LVU2194
 7874              	.LBB71:
 7875              	.LBI71:
  61:TMCL.c        **** {
 7876              		.loc 1 61 6 view .LVU2195
 7877              	.LBB72:
  63:TMCL.c        **** }
 7878              		.loc 1 63 2 view .LVU2196
 7879 1eea 4042     		rsbs	r0, r0, #0
 7880              	.L652:
 7881              	.LBE72:
 7882              	.LBE71:
 148:TMCL.c        **** 
 7883              		.loc 1 148 1 is_stmt 0 view .LVU2197
 7884 1eec BDE81040 		pop	{r4, lr}
 7885              	.LCFI329:
 7886              		.cfi_remember_state
 7887              		.cfi_restore 14
 7888              		.cfi_restore 4
 7889              		.cfi_def_cfa_offset 0
 7890              	.LBB74:
 7891              	.LBB73:
  63:TMCL.c        **** }
 7892              		.loc 1 63 2 view .LVU2198
 7893 1ef0 FFF7FEBF 		b	bldc_setTargetVelocity
 7894              	.LVL521:
 7895              	.L631:
 7896              	.LCFI330:
 7897              		.cfi_restore_state
 7898              	.LBE73:
 7899              	.LBE74:
 117:TMCL.c        ****     		break;
 7900              		.loc 1 117 10 is_stmt 1 view .LVU2199
 148:TMCL.c        **** 
 7901              		.loc 1 148 1 is_stmt 0 view .LVU2200
 7902 1ef4 BDE81040 		pop	{r4, lr}
 7903              	.LCFI331:
 7904              		.cfi_remember_state
 7905              		.cfi_restore 14
 7906              		.cfi_restore 4
 7907              		.cfi_def_cfa_offset 0
 117:TMCL.c        ****     		break;
 7908              		.loc 1 117 10 view .LVU2201
 7909 1ef8 FFF7FEBF 		b	tmcl_getInput
 7910              	.LVL522:
 7911              	.L636:
 7912              	.LCFI332:
 7913              		.cfi_restore_state
  96:TMCL.c        **** 			break;
 7914              		.loc 1 96 4 is_stmt 1 view .LVU2202
 7915              	.LBB75:
 7916              	.LBI75:
  73:TMCL.c        **** {
 7917              		.loc 1 73 6 view .LVU2203
 7918              	.LBB76:
  75:TMCL.c        **** }
 7919              		.loc 1 75 2 view .LVU2204
 7920              	.LBE76:
 7921              	.LBE75:
 148:TMCL.c        **** 
 7922              		.loc 1 148 1 is_stmt 0 view .LVU2205
 7923 1efc BDE81040 		pop	{r4, lr}
 7924              	.LCFI333:
 7925              		.cfi_remember_state
 7926              		.cfi_restore 14
 7927              		.cfi_restore 4
 7928              		.cfi_def_cfa_offset 0
 7929              	.LBB78:
 7930              	.LBB77:
  75:TMCL.c        **** }
 7931              		.loc 1 75 2 view .LVU2206
 7932 1f00 FFF7FEBF 		b	bldc_stopMotor
 7933              	.LVL523:
 7934              	.L633:
 7935              	.LCFI334:
 7936              		.cfi_restore_state
 7937              	.LBE77:
 7938              	.LBE78:
 114:TMCL.c        ****     		break;
 7939              		.loc 1 114 7 is_stmt 1 view .LVU2207
 7940              	.LBB79:
 7941              	.LBI79:
1678:TMCL.c        **** {
 7942              		.loc 1 1678 6 view .LVU2208
 7943              	.LBB80:
1680:TMCL.c        **** 	{
 7944              		.loc 1 1680 2 view .LVU2209
 7945 1f04 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 7946 1f06 022B     		cmp	r3, #2
 7947 1f08 09D0     		beq	.L658
 7948              	.L645:
1689:TMCL.c        ****     		break;
 7949              		.loc 1 1689 7 view .LVU2210
1689:TMCL.c        ****     		break;
 7950              		.loc 1 1689 26 is_stmt 0 view .LVU2211
 7951 1f0a 0423     		movs	r3, #4
 7952 1f0c 2372     		strb	r3, [r4, #8]
1690:TMCL.c        **** 	}
 7953              		.loc 1 1690 7 is_stmt 1 view .LVU2212
 7954              	.LBE80:
 7955              	.LBE79:
 148:TMCL.c        **** 
 7956              		.loc 1 148 1 is_stmt 0 view .LVU2213
 7957 1f0e 10BD     		pop	{r4, pc}
 7958              	.L641:
 123:TMCL.c        ****     		break;
 7959              		.loc 1 123 7 is_stmt 1 view .LVU2214
 148:TMCL.c        **** 
 7960              		.loc 1 148 1 is_stmt 0 view .LVU2215
 7961 1f10 BDE81040 		pop	{r4, lr}
 7962              	.LCFI335:
 7963              		.cfi_remember_state
 7964              		.cfi_restore 14
 7965              		.cfi_restore 4
 7966              		.cfi_def_cfa_offset 0
 123:TMCL.c        ****     		break;
 7967              		.loc 1 123 7 view .LVU2216
 7968 1f14 FFF7FEBF 		b	tmcl_boot
 7969              	.LVL524:
 7970              	.L653:
 7971              	.LCFI336:
 7972              		.cfi_restore_state
 7973              	.LBB89:
 7974              	.LBB54:
1760:TMCL.c        **** }
 7975              		.loc 1 1760 3 is_stmt 1 view .LVU2217
1760:TMCL.c        **** }
 7976              		.loc 1 1760 18 is_stmt 0 view .LVU2218
 7977 1f18 0123     		movs	r3, #1
 7978 1f1a 6377     		strb	r3, [r4, #29]
 7979              	.LBE54:
 7980              	.LBE89:
 148:TMCL.c        **** 
 7981              		.loc 1 148 1 view .LVU2219
 7982 1f1c 10BD     		pop	{r4, pc}
 7983              	.L658:
 7984              	.LBB90:
 7985              	.LBB85:
1683:TMCL.c        ****     			tmcm_clearModuleSpecificIOPin(ActualCommand.Type);
 7986              		.loc 1 1683 7 is_stmt 1 view .LVU2220
1683:TMCL.c        ****     			tmcm_clearModuleSpecificIOPin(ActualCommand.Type);
 7987              		.loc 1 1683 9 is_stmt 0 view .LVU2221
 7988 1f1e 80B9     		cbnz	r0, .L646
 7989              	.LBB81:
 7990              	.LBI81:
1678:TMCL.c        **** {
 7991              		.loc 1 1678 6 is_stmt 1 view .LVU2222
 7992              	.LBB82:
1684:TMCL.c        ****     		else
 7993              		.loc 1 1684 8 view .LVU2223
 7994 1f20 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 7995              	.LBE82:
 7996              	.LBE81:
 7997              	.LBE85:
 7998              	.LBE90:
 148:TMCL.c        **** 
 7999              		.loc 1 148 1 is_stmt 0 view .LVU2224
 8000 1f22 BDE81040 		pop	{r4, lr}
 8001              	.LCFI337:
 8002              		.cfi_remember_state
 8003              		.cfi_restore 14
 8004              		.cfi_restore 4
 8005              		.cfi_def_cfa_offset 0
 8006              	.LBB91:
 8007              	.LBB86:
 8008              	.LBB84:
 8009              	.LBB83:
1684:TMCL.c        ****     		else
 8010              		.loc 1 1684 8 view .LVU2225
 8011 1f26 FFF7FEBF 		b	tmcm_clearModuleSpecificIOPin
 8012              	.LVL525:
 8013              	.L656:
 8014              	.LCFI338:
 8015              		.cfi_restore_state
 8016              	.LBE83:
 8017              	.LBE84:
 8018              	.LBE86:
 8019              	.LBE91:
 130:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 8020              		.loc 1 130 11 is_stmt 1 view .LVU2226
 130:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 8021              		.loc 1 130 37 is_stmt 0 view .LVU2227
 8022 1f2a 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 8023 1f2c FFF7FEFF 		bl	tmc4671_readInt
 8024              	.LVL526:
 130:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 8025              		.loc 1 130 35 view .LVU2228
 8026 1f30 E060     		str	r0, [r4, #12]
 148:TMCL.c        **** 
 8027              		.loc 1 148 1 view .LVU2229
 8028 1f32 10BD     		pop	{r4, pc}
 8029              	.L654:
 138:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 8030              		.loc 1 138 5 is_stmt 1 view .LVU2230
 8031 1f34 0246     		mov	r2, r0
 8032 1f36 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 8033 1f38 1846     		mov	r0, r3
 148:TMCL.c        **** 
 8034              		.loc 1 148 1 is_stmt 0 view .LVU2231
 8035 1f3a BDE81040 		pop	{r4, lr}
 8036              	.LCFI339:
 8037              		.cfi_remember_state
 8038              		.cfi_restore 14
 8039              		.cfi_restore 4
 8040              		.cfi_def_cfa_offset 0
 138:TMCL.c        **** 			else if (ActualCommand.Motor == 1)
 8041              		.loc 1 138 5 view .LVU2232
 8042 1f3e FFF7FEBF 		b	tmc4671_writeInt
 8043              	.LVL527:
 8044              	.L646:
 8045              	.LCFI340:
 8046              		.cfi_restore_state
 8047              	.LBB92:
 8048              	.LBB87:
1686:TMCL.c        ****     		break;
 8049              		.loc 1 1686 8 is_stmt 1 view .LVU2233
 8050 1f42 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 8051              	.LBE87:
 8052              	.LBE92:
 148:TMCL.c        **** 
 8053              		.loc 1 148 1 is_stmt 0 view .LVU2234
 8054 1f44 BDE81040 		pop	{r4, lr}
 8055              	.LCFI341:
 8056              		.cfi_remember_state
 8057              		.cfi_restore 14
 8058              		.cfi_restore 4
 8059              		.cfi_def_cfa_offset 0
 8060              	.LBB93:
 8061              	.LBB88:
1686:TMCL.c        ****     		break;
 8062              		.loc 1 1686 8 view .LVU2235
 8063 1f48 FFF7FEBF 		b	tmcm_setModuleSpecificIOPin
 8064              	.LVL528:
 8065              	.L655:
 8066              	.LCFI342:
 8067              		.cfi_restore_state
 8068              	.LBE88:
 8069              	.LBE93:
 140:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 8070              		.loc 1 140 8 is_stmt 1 view .LVU2236
 8071 1f4c 0246     		mov	r2, r0
 8072 1f4e 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 8073 1f50 1846     		mov	r0, r3
 148:TMCL.c        **** 
 8074              		.loc 1 148 1 is_stmt 0 view .LVU2237
 8075 1f52 BDE81040 		pop	{r4, lr}
 8076              	.LCFI343:
 8077              		.cfi_remember_state
 8078              		.cfi_restore 14
 8079              		.cfi_restore 4
 8080              		.cfi_def_cfa_offset 0
 140:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 8081              		.loc 1 140 8 view .LVU2238
 8082 1f56 FFF7FEBF 		b	tmc6200_writeInt
 8083              	.LVL529:
 8084              	.L657:
 8085              	.LCFI344:
 8086              		.cfi_restore_state
 132:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 8087              		.loc 1 132 5 is_stmt 1 view .LVU2239
 132:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 8088              		.loc 1 132 31 is_stmt 0 view .LVU2240
 8089 1f5a 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 8090 1f5c FFF7FEFF 		bl	tmc6200_readInt
 8091              	.LVL530:
 132:TMCL.c        **** 			else if (ActualCommand.Motor == 2)
 8092              		.loc 1 132 29 view .LVU2241
 8093 1f60 E060     		str	r0, [r4, #12]
 148:TMCL.c        **** 
 8094              		.loc 1 148 1 view .LVU2242
 8095 1f62 10BD     		pop	{r4, pc}
 8096              	.L660:
 8097              		.align	2
 8098              	.L659:
 8099 1f64 00000000 		.word	.LANCHOR0
 8100              		.cfi_endproc
 8101              	.LFE5:
 8103              		.align	1
 8104              		.p2align 2,,3
 8105              		.global	tmcl_processCommand
 8106              		.syntax unified
 8107              		.thumb
 8108              		.thumb_func
 8110              	tmcl_processCommand:
 8111              	.LFB7:
 154:TMCL.c        **** 	static uint8_t TMCLCommandState;
 8112              		.loc 1 154 1 is_stmt 1 view -0
 8113              		.cfi_startproc
 8114              		@ args = 0, pretend = 0, frame = 24
 8115              		@ frame_needed = 0, uses_anonymous_args = 0
 155:TMCL.c        ****     uint32_t i;
 8116              		.loc 1 155 2 view .LVU2244
 156:TMCL.c        **** 
 8117              		.loc 1 156 5 view .LVU2245
 159:TMCL.c        **** 	static uint8_t UARTCmd[9];
 8118              		.loc 1 159 2 view .LVU2246
 160:TMCL.c        **** 	static uint8_t UARTCount;
 8119              		.loc 1 160 2 view .LVU2247
 161:TMCL.c        **** #endif
 8120              		.loc 1 161 2 view .LVU2248
 165:TMCL.c        **** 	static uint8_t ExtendedCANFrame;
 8121              		.loc 1 165 2 view .LVU2249
 166:TMCL.c        **** #endif
 8122              		.loc 1 166 2 view .LVU2250
 173:TMCL.c        ****     {
 8123              		.loc 1 173 2 view .LVU2251
 154:TMCL.c        **** 	static uint8_t TMCLCommandState;
 8124              		.loc 1 154 1 is_stmt 0 view .LVU2252
 8125 1f68 F0B5     		push	{r4, r5, r6, r7, lr}
 8126              	.LCFI345:
 8127              		.cfi_def_cfa_offset 20
 8128              		.cfi_offset 4, -20
 8129              		.cfi_offset 5, -16
 8130              		.cfi_offset 6, -12
 8131              		.cfi_offset 7, -8
 8132              		.cfi_offset 14, -4
 173:TMCL.c        ****     {
 8133              		.loc 1 173 34 view .LVU2253
 8134 1f6a 864C     		ldr	r4, .L715
 154:TMCL.c        **** 	static uint8_t TMCLCommandState;
 8135              		.loc 1 154 1 view .LVU2254
 8136 1f6c 87B0     		sub	sp, sp, #28
 8137              	.LCFI346:
 8138              		.cfi_def_cfa_offset 48
 173:TMCL.c        ****     {
 8139              		.loc 1 173 34 view .LVU2255
 8140 1f6e A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 173:TMCL.c        ****     {
 8141              		.loc 1 173 4 view .LVU2256
 8142 1f70 5A1E     		subs	r2, r3, #1
 8143 1f72 012A     		cmp	r2, #1
 8144 1f74 4AD9     		bls	.L703
 8145 1f76 02AD     		add	r5, sp, #8
 8146              	.L662:
 209:TMCL.c        ****     {
 8147              		.loc 1 209 5 is_stmt 1 view .LVU2257
 209:TMCL.c        ****     {
 8148              		.loc 1 209 7 is_stmt 0 view .LVU2258
 8149 1f78 032B     		cmp	r3, #3
 8150 1f7a 37D0     		beq	.L706
 234:TMCL.c        ****     {
 8151              		.loc 1 234 10 is_stmt 1 view .LVU2259
 234:TMCL.c        ****     {
 8152              		.loc 1 234 12 is_stmt 0 view .LVU2260
 8153 1f7c 042B     		cmp	r3, #4
 8154 1f7e 00F0BA80 		beq	.L707
 8155              	.L668:
 258:TMCL.c        ****   	TMCLReplyFormat = RF_STANDARD;
 8156              		.loc 1 258 4 is_stmt 1 view .LVU2261
 258:TMCL.c        ****   	TMCLReplyFormat = RF_STANDARD;
 8157              		.loc 1 258 21 is_stmt 0 view .LVU2262
 8158 1f82 0023     		movs	r3, #0
 262:TMCL.c        ****   	{
 8159              		.loc 1 262 6 view .LVU2263
 8160 1f84 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 258:TMCL.c        ****   	TMCLReplyFormat = RF_STANDARD;
 8161              		.loc 1 258 21 view .LVU2264
 8162 1f86 A377     		strb	r3, [r4, #30]
 259:TMCL.c        **** 
 8163              		.loc 1 259 4 is_stmt 1 view .LVU2265
 259:TMCL.c        **** 
 8164              		.loc 1 259 20 is_stmt 0 view .LVU2266
 8165 1f88 2374     		strb	r3, [r4, #16]
 262:TMCL.c        ****   	{
 8166              		.loc 1 262 4 is_stmt 1 view .LVU2267
 262:TMCL.c        ****   	{
 8167              		.loc 1 262 6 is_stmt 0 view .LVU2268
 8168 1f8a 002A     		cmp	r2, #0
 8169 1f8c 40F09780 		bne	.L708
 8170              	.L674:
 273:TMCL.c        ****   	{
 8171              		.loc 1 273 4 is_stmt 1 view .LVU2269
 273:TMCL.c        ****   	{
 8172              		.loc 1 273 7 is_stmt 0 view .LVU2270
 8173 1f90 2846     		mov	r0, r5
 8174 1f92 FFF7FEFF 		bl	can_getMessage
 8175              	.LVL531:
 273:TMCL.c        ****   	{
 8176              		.loc 1 273 6 view .LVU2271
 8177 1f96 D8B1     		cbz	r0, .L675
 275:TMCL.c        ****   		ActualCommand.Type = CanFrame.Data[1];
 8178              		.loc 1 275 5 is_stmt 1 view .LVU2272
 276:TMCL.c        ****   		ActualCommand.Motor = CanFrame.Data[2];
 8179              		.loc 1 276 5 view .LVU2273
 277:TMCL.c        ****   		ActualCommand.Value.Byte[3] = CanFrame.Data[3];
 8180              		.loc 1 277 5 view .LVU2274
 279:TMCL.c        ****   		ActualCommand.Value.Byte[1] = CanFrame.Data[5];
 8181              		.loc 1 279 33 is_stmt 0 view .LVU2275
 8182 1f98 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 277:TMCL.c        ****   		ActualCommand.Value.Byte[3] = CanFrame.Data[3];
 8183              		.loc 1 277 40 view .LVU2276
 8184 1f9c 9DF81210 		ldrb	r1, [sp, #18]	@ zero_extendqisi2
 279:TMCL.c        ****   		ActualCommand.Value.Byte[1] = CanFrame.Data[5];
 8185              		.loc 1 279 33 view .LVU2277
 8186 1fa0 A371     		strb	r3, [r4, #6]
 284:TMCL.c        ****   			TMCLCommandState = TCS_CAN7;
 8187              		.loc 1 284 7 view .LVU2278
 8188 1fa2 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 275:TMCL.c        ****   		ActualCommand.Type = CanFrame.Data[1];
 8189              		.loc 1 275 26 view .LVU2279
 8190 1fa6 BDF81000 		ldrh	r0, [sp, #16]
 284:TMCL.c        ****   			TMCLCommandState = TCS_CAN7;
 8191              		.loc 1 284 7 view .LVU2280
 8192 1faa 072B     		cmp	r3, #7
 285:TMCL.c        ****   		else
 8193              		.loc 1 285 23 view .LVU2281
 8194 1fac 0CBF     		ite	eq
 8195 1fae 0123     		moveq	r3, #1
 287:TMCL.c        ****   	}
 8196              		.loc 1 287 23 view .LVU2282
 8197 1fb0 0223     		movne	r3, #2
 278:TMCL.c        ****   		ActualCommand.Value.Byte[2] = CanFrame.Data[4];
 8198              		.loc 1 278 33 view .LVU2283
 8199 1fb2 9DF81320 		ldrb	r2, [sp, #19]	@ zero_extendqisi2
 275:TMCL.c        ****   		ActualCommand.Type = CanFrame.Data[1];
 8200              		.loc 1 275 26 view .LVU2284
 8201 1fb6 2080     		strh	r0, [r4]	@ movhi
 277:TMCL.c        ****   		ActualCommand.Value.Byte[3] = CanFrame.Data[3];
 8202              		.loc 1 277 25 view .LVU2285
 8203 1fb8 A170     		strb	r1, [r4, #2]
 278:TMCL.c        ****   		ActualCommand.Value.Byte[2] = CanFrame.Data[4];
 8204              		.loc 1 278 5 is_stmt 1 view .LVU2286
 280:TMCL.c        ****   		ActualCommand.Value.Byte[0] = CanFrame.Data[6];
 8205              		.loc 1 280 33 is_stmt 0 view .LVU2287
 8206 1fba 9DF81500 		ldrb	r0, [sp, #21]	@ zero_extendqisi2
 281:TMCL.c        ****   		ExtendedCANFrame = CanFrame.Ext;
 8207              		.loc 1 281 33 view .LVU2288
 8208 1fbe 9DF81610 		ldrb	r1, [sp, #22]	@ zero_extendqisi2
 278:TMCL.c        ****   		ActualCommand.Value.Byte[2] = CanFrame.Data[4];
 8209              		.loc 1 278 33 view .LVU2289
 8210 1fc2 E271     		strb	r2, [r4, #7]
 279:TMCL.c        ****   		ActualCommand.Value.Byte[1] = CanFrame.Data[5];
 8211              		.loc 1 279 5 is_stmt 1 view .LVU2290
 280:TMCL.c        ****   		ActualCommand.Value.Byte[0] = CanFrame.Data[6];
 8212              		.loc 1 280 5 view .LVU2291
 282:TMCL.c        **** 
 8213              		.loc 1 282 22 is_stmt 0 view .LVU2292
 8214 1fc4 9DF80920 		ldrb	r2, [sp, #9]	@ zero_extendqisi2
 280:TMCL.c        ****   		ActualCommand.Value.Byte[0] = CanFrame.Data[6];
 8215              		.loc 1 280 33 view .LVU2293
 8216 1fc8 6071     		strb	r0, [r4, #5]
 281:TMCL.c        ****   		ExtendedCANFrame = CanFrame.Ext;
 8217              		.loc 1 281 5 is_stmt 1 view .LVU2294
 281:TMCL.c        ****   		ExtendedCANFrame = CanFrame.Ext;
 8218              		.loc 1 281 33 is_stmt 0 view .LVU2295
 8219 1fca 2171     		strb	r1, [r4, #4]
 282:TMCL.c        **** 
 8220              		.loc 1 282 5 is_stmt 1 view .LVU2296
 282:TMCL.c        **** 
 8221              		.loc 1 282 22 is_stmt 0 view .LVU2297
 8222 1fcc E277     		strb	r2, [r4, #31]
 284:TMCL.c        ****   			TMCLCommandState = TCS_CAN7;
 8223              		.loc 1 284 5 is_stmt 1 view .LVU2298
 285:TMCL.c        ****   		else
 8224              		.loc 1 285 6 view .LVU2299
 287:TMCL.c        ****   	}
 8225              		.loc 1 287 6 view .LVU2300
 287:TMCL.c        ****   	}
 8226              		.loc 1 287 23 is_stmt 0 view .LVU2301
 8227 1fce A377     		strb	r3, [r4, #30]
 8228              	.L675:
 293:TMCL.c        ****   	{
 8229              		.loc 1 293 4 is_stmt 1 view .LVU2302
 293:TMCL.c        ****   	{
 8230              		.loc 1 293 7 is_stmt 0 view .LVU2303
 8231 1fd0 0DF10700 		add	r0, sp, #7
 8232 1fd4 FFF7FEFF 		bl	uart_read
 8233              	.LVL532:
 293:TMCL.c        ****   	{
 8234              		.loc 1 293 6 view .LVU2304
 8235 1fd8 0028     		cmp	r0, #0
 8236 1fda 48D1     		bne	.L709
 8237              	.L679:
 327:TMCL.c        ****   		tmcl_executeActualCommand();
 8238              		.loc 1 327 4 is_stmt 1 view .LVU2305
 327:TMCL.c        ****   		tmcl_executeActualCommand();
 8239              		.loc 1 327 6 is_stmt 0 view .LVU2306
 8240 1fdc A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 8241 1fde 13F0FB0F 		tst	r3, #251
 8242 1fe2 01D0     		beq	.L661
 8243              	.L683:
 328:TMCL.c        **** }
 8244              		.loc 1 328 5 is_stmt 1 view .LVU2307
 8245 1fe4 FFF7FEFF 		bl	tmcl_executeActualCommand
 8246              	.LVL533:
 8247              	.L661:
 329:TMCL.c        **** 
 8248              		.loc 1 329 1 is_stmt 0 view .LVU2308
 8249 1fe8 07B0     		add	sp, sp, #28
 8250              	.LCFI347:
 8251              		.cfi_remember_state
 8252              		.cfi_def_cfa_offset 20
 8253              		@ sp needed
 8254 1fea F0BD     		pop	{r4, r5, r6, r7, pc}
 8255              	.L706:
 8256              	.LCFI348:
 8257              		.cfi_restore_state
 211:TMCL.c        ****     	{
 8258              		.loc 1 211 6 is_stmt 1 view .LVU2309
 211:TMCL.c        ****     	{
 8259              		.loc 1 211 24 is_stmt 0 view .LVU2310
 8260 1fec 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 211:TMCL.c        ****     	{
 8261              		.loc 1 211 8 view .LVU2311
 8262 1fee 002B     		cmp	r3, #0
 8263 1ff0 00F0A680 		beq	.L710
 228:TMCL.c        ****     	{
 8264              		.loc 1 228 11 is_stmt 1 view .LVU2312
 228:TMCL.c        ****     	{
 8265              		.loc 1 228 13 is_stmt 0 view .LVU2313
 8266 1ff4 012B     		cmp	r3, #1
 8267 1ff6 C4D1     		bne	.L668
 8268 1ff8 634E     		ldr	r6, .L715+4
 8269 1ffa 06F10907 		add	r7, r6, #9
 8270              	.L673:
 8271              	.LVL534:
 231:TMCL.c        ****     	}
 8272              		.loc 1 231 8 is_stmt 1 discriminator 3 view .LVU2314
 8273 1ffe 16F8010F 		ldrb	r0, [r6, #1]!	@ zero_extendqisi2
 8274              	.LVL535:
 231:TMCL.c        ****     	}
 8275              		.loc 1 231 8 is_stmt 0 discriminator 3 view .LVU2315
 8276 2002 FFF7FEFF 		bl	uart_write
 8277              	.LVL536:
 230:TMCL.c        ****     			uart_write(SpecialReply[i]);
 8278              		.loc 1 230 21 is_stmt 1 discriminator 3 view .LVU2316
 230:TMCL.c        ****     			uart_write(SpecialReply[i]);
 8279              		.loc 1 230 16 discriminator 3 view .LVU2317
 230:TMCL.c        ****     			uart_write(SpecialReply[i]);
 8280              		.loc 1 230 7 is_stmt 0 discriminator 3 view .LVU2318
 8281 2006 BE42     		cmp	r6, r7
 8282 2008 F9D1     		bne	.L673
 8283 200a BAE7     		b	.L668
 8284              	.LVL537:
 8285              	.L703:
 175:TMCL.c        ****     	CanFrame.Dlc = (TMCLCommandState == TCS_CAN7 ? 7:8);
 8286              		.loc 1 175 6 is_stmt 1 view .LVU2319
 176:TMCL.c        ****     	CanFrame.Ext = ExtendedCANFrame;
 8287              		.loc 1 176 19 is_stmt 0 view .LVU2320
 8288 200c 012B     		cmp	r3, #1
 8289 200e 14BF     		ite	ne
 8290 2010 0820     		movne	r0, #8
 8291 2012 0720     		moveq	r0, #7
 178:TMCL.c        **** 
 8292              		.loc 1 178 19 view .LVU2321
 8293 2014 0021     		movs	r1, #0
 175:TMCL.c        ****     	CanFrame.Dlc = (TMCLCommandState == TCS_CAN7 ? 7:8);
 8294              		.loc 1 175 32 view .LVU2322
 8295 2016 5D4A     		ldr	r2, .L715+8
 176:TMCL.c        ****     	CanFrame.Ext = ExtendedCANFrame;
 8296              		.loc 1 176 19 view .LVU2323
 8297 2018 8DF80800 		strb	r0, [sp, #8]
 175:TMCL.c        ****     	CanFrame.Dlc = (TMCLCommandState == TCS_CAN7 ? 7:8);
 8298              		.loc 1 175 18 view .LVU2324
 8299 201c 9368     		ldr	r3, [r2, #8]
 178:TMCL.c        **** 
 8300              		.loc 1 178 19 view .LVU2325
 8301 201e 8DF80A10 		strb	r1, [sp, #10]
 175:TMCL.c        ****     	CanFrame.Dlc = (TMCLCommandState == TCS_CAN7 ? 7:8);
 8302              		.loc 1 175 18 view .LVU2326
 8303 2022 0393     		str	r3, [sp, #12]
 176:TMCL.c        ****     	CanFrame.Ext = ExtendedCANFrame;
 8304              		.loc 1 176 6 is_stmt 1 view .LVU2327
 177:TMCL.c        ****     	CanFrame.Rtr = false;
 8305              		.loc 1 177 6 view .LVU2328
 178:TMCL.c        **** 
 8306              		.loc 1 178 6 view .LVU2329
 180:TMCL.c        ****     	{
 8307              		.loc 1 180 6 view .LVU2330
 177:TMCL.c        ****     	CanFrame.Rtr = false;
 8308              		.loc 1 177 19 is_stmt 0 view .LVU2331
 8309 2024 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 8310 2026 8DF80930 		strb	r3, [sp, #9]
 180:TMCL.c        ****     	{
 8311              		.loc 1 180 25 view .LVU2332
 8312 202a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 180:TMCL.c        ****     	{
 8313              		.loc 1 180 8 view .LVU2333
 8314 202c 002B     		cmp	r3, #0
 8315 202e 4DD1     		bne	.L664
 182:TMCL.c        ****     		CanFrame.Data[1] = ActualReply.Status;
 8316              		.loc 1 182 7 is_stmt 1 view .LVU2334
 182:TMCL.c        ****     		CanFrame.Data[1] = ActualReply.Status;
 8317              		.loc 1 182 24 is_stmt 0 view .LVU2335
 8318 2030 5068     		ldr	r0, [r2, #4]
 183:TMCL.c        ****     		CanFrame.Data[2] = ActualReply.Opcode;
 8319              		.loc 1 183 24 view .LVU2336
 8320 2032 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 184:TMCL.c        ****     		CanFrame.Data[3] = ActualReply.Value.Byte[3];
 8321              		.loc 1 184 24 view .LVU2337
 8322 2034 617A     		ldrb	r1, [r4, #9]	@ zero_extendqisi2
 183:TMCL.c        ****     		CanFrame.Data[2] = ActualReply.Opcode;
 8323              		.loc 1 183 24 view .LVU2338
 8324 2036 8DF81120 		strb	r2, [sp, #17]
 185:TMCL.c        ****     		CanFrame.Data[4] = ActualReply.Value.Byte[2];
 8325              		.loc 1 185 24 view .LVU2339
 8326 203a E27B     		ldrb	r2, [r4, #15]	@ zero_extendqisi2
 182:TMCL.c        ****     		CanFrame.Data[1] = ActualReply.Status;
 8327              		.loc 1 182 24 view .LVU2340
 8328 203c 8DF81000 		strb	r0, [sp, #16]
 183:TMCL.c        ****     		CanFrame.Data[2] = ActualReply.Opcode;
 8329              		.loc 1 183 7 is_stmt 1 view .LVU2341
 184:TMCL.c        ****     		CanFrame.Data[3] = ActualReply.Value.Byte[3];
 8330              		.loc 1 184 7 view .LVU2342
 184:TMCL.c        ****     		CanFrame.Data[3] = ActualReply.Value.Byte[3];
 8331              		.loc 1 184 24 is_stmt 0 view .LVU2343
 8332 2040 8DF81210 		strb	r1, [sp, #18]
 185:TMCL.c        ****     		CanFrame.Data[4] = ActualReply.Value.Byte[2];
 8333              		.loc 1 185 7 is_stmt 1 view .LVU2344
 186:TMCL.c        ****     		CanFrame.Data[5] = ActualReply.Value.Byte[1];
 8334              		.loc 1 186 24 is_stmt 0 view .LVU2345
 8335 2044 A07B     		ldrb	r0, [r4, #14]	@ zero_extendqisi2
 187:TMCL.c        ****     		CanFrame.Data[6] = ActualReply.Value.Byte[0];
 8336              		.loc 1 187 24 view .LVU2346
 8337 2046 617B     		ldrb	r1, [r4, #13]	@ zero_extendqisi2
 185:TMCL.c        ****     		CanFrame.Data[4] = ActualReply.Value.Byte[2];
 8338              		.loc 1 185 24 view .LVU2347
 8339 2048 8DF81320 		strb	r2, [sp, #19]
 186:TMCL.c        ****     		CanFrame.Data[5] = ActualReply.Value.Byte[1];
 8340              		.loc 1 186 7 is_stmt 1 view .LVU2348
 188:TMCL.c        ****     		CanFrame.Data[7] = 0;
 8341              		.loc 1 188 24 is_stmt 0 view .LVU2349
 8342 204c 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2
 186:TMCL.c        ****     		CanFrame.Data[5] = ActualReply.Value.Byte[1];
 8343              		.loc 1 186 24 view .LVU2350
 8344 204e 8DF81400 		strb	r0, [sp, #20]
 187:TMCL.c        ****     		CanFrame.Data[6] = ActualReply.Value.Byte[0];
 8345              		.loc 1 187 7 is_stmt 1 view .LVU2351
 187:TMCL.c        ****     		CanFrame.Data[6] = ActualReply.Value.Byte[0];
 8346              		.loc 1 187 24 is_stmt 0 view .LVU2352
 8347 2052 8DF81510 		strb	r1, [sp, #21]
 188:TMCL.c        ****     		CanFrame.Data[7] = 0;
 8348              		.loc 1 188 7 is_stmt 1 view .LVU2353
 188:TMCL.c        ****     		CanFrame.Data[7] = 0;
 8349              		.loc 1 188 24 is_stmt 0 view .LVU2354
 8350 2056 8DF81620 		strb	r2, [sp, #22]
 189:TMCL.c        ****     	}
 8351              		.loc 1 189 7 is_stmt 1 view .LVU2355
 189:TMCL.c        ****     	}
 8352              		.loc 1 189 24 is_stmt 0 view .LVU2356
 8353 205a 8DF81730 		strb	r3, [sp, #23]
 199:TMCL.c        ****     	{
 8354              		.loc 1 199 6 is_stmt 1 view .LVU2357
 8355              	.L665:
 201:TMCL.c        ****     	}
 8356              		.loc 1 201 7 view .LVU2358
 201:TMCL.c        ****     	}
 8357              		.loc 1 201 11 is_stmt 0 view .LVU2359
 8358 205e 02AD     		add	r5, sp, #8
 8359 2060 2846     		mov	r0, r5
 8360 2062 FFF7FEFF 		bl	can_sendMessage
 8361              	.LVL538:
 201:TMCL.c        ****     	}
 8362              		.loc 1 201 9 view .LVU2360
 8363 2066 0028     		cmp	r0, #0
 8364 2068 BED0     		beq	.L661
 209:TMCL.c        ****     {
 8365              		.loc 1 209 24 view .LVU2361
 8366 206a A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 8367 206c 84E7     		b	.L662
 8368              	.L709:
 295:TMCL.c        ****   			UARTCount = 0;  // discard everything when there has been a command timeout
 8369              		.loc 1 295 5 is_stmt 1 view .LVU2362
 295:TMCL.c        ****   			UARTCount = 0;  // discard everything when there has been a command timeout
 8370              		.loc 1 295 8 is_stmt 0 view .LVU2363
 8371 206e FFF7FEFF 		bl	uart_checkTimeout
 8372              	.LVL539:
 295:TMCL.c        ****   			UARTCount = 0;  // discard everything when there has been a command timeout
 8373              		.loc 1 295 7 view .LVU2364
 8374 2072 88BB     		cbnz	r0, .L711
 298:TMCL.c        **** 
 8375              		.loc 1 298 5 is_stmt 1 view .LVU2365
 298:TMCL.c        **** 
 8376              		.loc 1 298 22 is_stmt 0 view .LVU2366
 8377 2074 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
 298:TMCL.c        **** 
 8378              		.loc 1 298 26 view .LVU2367
 8379 2078 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 298:TMCL.c        **** 
 8380              		.loc 1 298 22 view .LVU2368
 8381 207c 531C     		adds	r3, r2, #1
 8382 207e DBB2     		uxtb	r3, r3
 298:TMCL.c        **** 
 8383              		.loc 1 298 26 view .LVU2369
 8384 2080 2244     		add	r2, r2, r4
 300:TMCL.c        ****   		{
 8385              		.loc 1 300 7 view .LVU2370
 8386 2082 092B     		cmp	r3, #9
 298:TMCL.c        **** 
 8387              		.loc 1 298 22 view .LVU2371
 8388 2084 84F82030 		strb	r3, [r4, #32]
 298:TMCL.c        **** 
 8389              		.loc 1 298 26 view .LVU2372
 8390 2088 82F82410 		strb	r1, [r2, #36]
 300:TMCL.c        ****   		{
 8391              		.loc 1 300 5 is_stmt 1 view .LVU2373
 300:TMCL.c        ****   		{
 8392              		.loc 1 300 7 is_stmt 0 view .LVU2374
 8393 208c A6D1     		bne	.L679
 302:TMCL.c        ****   			if(UARTCmd[0] == moduleConfig.serialModuleAddress)  // is this our address?
 8394              		.loc 1 302 6 is_stmt 1 view .LVU2375
 303:TMCL.c        ****   			{
 8395              		.loc 1 303 35 is_stmt 0 view .LVU2376
 8396 208e 3F4B     		ldr	r3, .L715+8
 303:TMCL.c        ****   			{
 8397              		.loc 1 303 16 view .LVU2377
 8398 2090 94F82420 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
 303:TMCL.c        ****   			{
 8399              		.loc 1 303 8 view .LVU2378
 8400 2094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 302:TMCL.c        ****   			if(UARTCmd[0] == moduleConfig.serialModuleAddress)  // is this our address?
 8401              		.loc 1 302 15 view .LVU2379
 8402 2096 84F82000 		strb	r0, [r4, #32]
 303:TMCL.c        ****   			{
 8403              		.loc 1 303 6 is_stmt 1 view .LVU2380
 303:TMCL.c        ****   			{
 8404              		.loc 1 303 8 is_stmt 0 view .LVU2381
 8405 209a 9342     		cmp	r3, r2
 8406 209c 9ED1     		bne	.L679
 8407 209e 3C4B     		ldr	r3, .L715+12
 8408 20a0 D91D     		adds	r1, r3, #7
 8409 20a2 01E0     		b	.L681
 8410              	.LVL540:
 8411              	.L712:
 8412              	.LBB94:
 307:TMCL.c        **** 
 8413              		.loc 1 307 27 view .LVU2382
 8414 20a4 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 8415              	.LVL541:
 8416              	.L681:
 307:TMCL.c        **** 
 8417              		.loc 1 307 8 is_stmt 1 discriminator 3 view .LVU2383
 307:TMCL.c        **** 
 8418              		.loc 1 307 17 is_stmt 0 discriminator 3 view .LVU2384
 8419 20a8 1044     		add	r0, r0, r2
 8420              	.LVL542:
 306:TMCL.c        ****   					checksum += UARTCmd[i];
 8421              		.loc 1 306 7 discriminator 3 view .LVU2385
 8422 20aa 8B42     		cmp	r3, r1
 307:TMCL.c        **** 
 8423              		.loc 1 307 17 discriminator 3 view .LVU2386
 8424 20ac C0B2     		uxtb	r0, r0
 8425              	.LVL543:
 306:TMCL.c        ****   					checksum += UARTCmd[i];
 8426              		.loc 1 306 21 is_stmt 1 discriminator 3 view .LVU2387
 306:TMCL.c        ****   					checksum += UARTCmd[i];
 8427              		.loc 1 306 16 discriminator 3 view .LVU2388
 306:TMCL.c        ****   					checksum += UARTCmd[i];
 8428              		.loc 1 306 7 is_stmt 0 discriminator 3 view .LVU2389
 8429 20ae F9D1     		bne	.L712
 309:TMCL.c        ****   				{
 8430              		.loc 1 309 7 is_stmt 1 view .LVU2390
 309:TMCL.c        ****   				{
 8431              		.loc 1 309 9 is_stmt 0 view .LVU2391
 8432 20b0 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 8433              	.LVL544:
 309:TMCL.c        ****   				{
 8434              		.loc 1 309 9 view .LVU2392
 8435 20b4 8342     		cmp	r3, r0
 8436 20b6 55D0     		beq	.L713
 320:TMCL.c        ****   			}
 8437              		.loc 1 320 12 is_stmt 1 view .LVU2393
 320:TMCL.c        ****   			}
 8438              		.loc 1 320 28 is_stmt 0 view .LVU2394
 8439 20b8 0423     		movs	r3, #4
 8440 20ba A377     		strb	r3, [r4, #30]
 8441              	.LBE94:
 327:TMCL.c        ****   		tmcl_executeActualCommand();
 8442              		.loc 1 327 4 is_stmt 1 view .LVU2395
 8443 20bc 94E7     		b	.L661
 8444              	.LVL545:
 8445              	.L708:
 265:TMCL.c        ****   		io_resetCPU(true);
 8446              		.loc 1 265 5 view .LVU2396
 8447 20be 6420     		movs	r0, #100
 8448 20c0 FFF7FEFF 		bl	wait
 8449              	.LVL546:
 266:TMCL.c        ****   	}
 8450              		.loc 1 266 5 view .LVU2397
 8451 20c4 0120     		movs	r0, #1
 8452 20c6 FFF7FEFF 		bl	io_resetCPU
 8453              	.LVL547:
 8454 20ca 61E7     		b	.L674
 8455              	.L664:
 191:TMCL.c        ****     	{
 8456              		.loc 1 191 11 view .LVU2398
 191:TMCL.c        ****     	{
 8457              		.loc 1 191 13 is_stmt 0 view .LVU2399
 8458 20cc 012B     		cmp	r3, #1
 8459 20ce 0BD0     		beq	.L714
 199:TMCL.c        ****     	{
 8460              		.loc 1 199 6 is_stmt 1 view .LVU2400
 199:TMCL.c        ****     	{
 8461              		.loc 1 199 8 is_stmt 0 view .LVU2401
 8462 20d0 022B     		cmp	r3, #2
 8463 20d2 C4D1     		bne	.L665
 8464 20d4 02AD     		add	r5, sp, #8
 8465 20d6 54E7     		b	.L668
 8466              	.L711:
 296:TMCL.c        **** 
 8467              		.loc 1 296 6 is_stmt 1 view .LVU2402
 298:TMCL.c        **** 
 8468              		.loc 1 298 5 view .LVU2403
 298:TMCL.c        **** 
 8469              		.loc 1 298 22 is_stmt 0 view .LVU2404
 8470 20d8 0123     		movs	r3, #1
 298:TMCL.c        **** 
 8471              		.loc 1 298 26 view .LVU2405
 8472 20da 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 298:TMCL.c        **** 
 8473              		.loc 1 298 22 view .LVU2406
 8474 20de 84F82030 		strb	r3, [r4, #32]
 298:TMCL.c        **** 
 8475              		.loc 1 298 26 view .LVU2407
 8476 20e2 84F82420 		strb	r2, [r4, #36]
 300:TMCL.c        ****   		{
 8477              		.loc 1 300 5 is_stmt 1 view .LVU2408
 8478 20e6 79E7     		b	.L679
 8479              	.L714:
 195:TMCL.c        ****     		}
 8480              		.loc 1 195 25 is_stmt 0 view .LVU2409
 8481 20e8 D4F81500 		ldr	r0, [r4, #21]	@ unaligned
 8482 20ec D4F81910 		ldr	r1, [r4, #25]	@ unaligned
 8483 20f0 04AB     		add	r3, sp, #16
 8484 20f2 03C3     		stmia	r3!, {r0, r1}
 8485 20f4 B3E7     		b	.L665
 8486              	.L707:
 8487              	.LBB95:
 236:TMCL.c        ****     	ActualReply.Status = REPLY_CHKERR;
 8488              		.loc 1 236 6 is_stmt 1 view .LVU2410
 237:TMCL.c        ****     	ActualReply.Value.Int32 = 0;
 8489              		.loc 1 237 6 view .LVU2411
 237:TMCL.c        ****     	ActualReply.Value.Int32 = 0;
 8490              		.loc 1 237 25 is_stmt 0 view .LVU2412
 8491 20f6 0122     		movs	r2, #1
 238:TMCL.c        **** 
 8492              		.loc 1 238 30 view .LVU2413
 8493 20f8 0023     		movs	r3, #0
 240:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 8494              		.loc 1 240 37 view .LVU2414
 8495 20fa 244F     		ldr	r7, .L715+8
 237:TMCL.c        ****     	ActualReply.Value.Int32 = 0;
 8496              		.loc 1 237 25 view .LVU2415
 8497 20fc 2281     		strh	r2, [r4, #8]	@ movhi
 238:TMCL.c        **** 
 8498              		.loc 1 238 6 is_stmt 1 view .LVU2416
 240:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 8499              		.loc 1 240 37 is_stmt 0 view .LVU2417
 8500 20fe B878     		ldrb	r0, [r7, #2]	@ zero_extendqisi2
 240:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 8501              		.loc 1 240 56 view .LVU2418
 8502 2100 7E78     		ldrb	r6, [r7, #1]	@ zero_extendqisi2
 238:TMCL.c        **** 
 8503              		.loc 1 238 30 view .LVU2419
 8504 2102 E360     		str	r3, [r4, #12]
 240:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 8505              		.loc 1 240 56 view .LVU2420
 8506 2104 0644     		add	r6, r6, r0
 240:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 8507              		.loc 1 240 91 view .LVU2421
 8508 2106 1644     		add	r6, r6, r2
 8509 2108 F6B2     		uxtb	r6, r6
 8510              	.L705:
 240:TMCL.c        ****     			ActualReply.Status+ActualReply.Opcode +
 8511              		.loc 1 240 6 is_stmt 1 view .LVU2422
 8512              	.LVL548:
 245:TMCL.c        ****     	uart_write(moduleConfig.serialModuleAddress);
 8513              		.loc 1 245 6 view .LVU2423
 8514 210a FFF7FEFF 		bl	uart_write
 8515              	.LVL549:
 246:TMCL.c        ****     	uart_write(ActualReply.Status);
 8516              		.loc 1 246 6 view .LVU2424
 8517 210e 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 8518 2110 FFF7FEFF 		bl	uart_write
 8519              	.LVL550:
 247:TMCL.c        ****     	uart_write(ActualReply.Opcode);
 8520              		.loc 1 247 6 view .LVU2425
 8521 2114 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 8522 2116 FFF7FEFF 		bl	uart_write
 8523              	.LVL551:
 248:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[3]);
 8524              		.loc 1 248 6 view .LVU2426
 8525 211a 607A     		ldrb	r0, [r4, #9]	@ zero_extendqisi2
 8526 211c FFF7FEFF 		bl	uart_write
 8527              	.LVL552:
 249:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[2]);
 8528              		.loc 1 249 6 view .LVU2427
 8529 2120 E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2
 8530 2122 FFF7FEFF 		bl	uart_write
 8531              	.LVL553:
 250:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[1]);
 8532              		.loc 1 250 6 view .LVU2428
 8533 2126 A07B     		ldrb	r0, [r4, #14]	@ zero_extendqisi2
 8534 2128 FFF7FEFF 		bl	uart_write
 8535              	.LVL554:
 251:TMCL.c        ****     	uart_write(ActualReply.Value.Byte[0]);
 8536              		.loc 1 251 6 view .LVU2429
 8537 212c 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 8538 212e FFF7FEFF 		bl	uart_write
 8539              	.LVL555:
 252:TMCL.c        ****     	uart_write(checksum);
 8540              		.loc 1 252 6 view .LVU2430
 8541 2132 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 8542 2134 FFF7FEFF 		bl	uart_write
 8543              	.LVL556:
 253:TMCL.c        ****     }
 8544              		.loc 1 253 6 view .LVU2431
 8545 2138 3046     		mov	r0, r6
 8546 213a FFF7FEFF 		bl	uart_write
 8547              	.LVL557:
 8548 213e 20E7     		b	.L668
 8549              	.LVL558:
 8550              	.L710:
 253:TMCL.c        ****     }
 8551              		.loc 1 253 6 is_stmt 0 view .LVU2432
 8552              	.LBE95:
 8553              	.LBB96:
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8554              		.loc 1 213 7 is_stmt 1 view .LVU2433
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8555              		.loc 1 213 38 is_stmt 0 view .LVU2434
 8556 2140 124F     		ldr	r7, .L715+8
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8557              		.loc 1 213 89 view .LVU2435
 8558 2142 267A     		ldrb	r6, [r4, #8]	@ zero_extendqisi2
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8559              		.loc 1 213 38 view .LVU2436
 8560 2144 B878     		ldrb	r0, [r7, #2]	@ zero_extendqisi2
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8561              		.loc 1 213 56 view .LVU2437
 8562 2146 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 8563 2148 0344     		add	r3, r3, r0
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8564              		.loc 1 213 89 view .LVU2438
 8565 214a 1E44     		add	r6, r6, r3
 214:TMCL.c        **** 					ActualReply.Value.Byte[3]+ActualReply.Value.Byte[2]+
 8566              		.loc 1 214 27 view .LVU2439
 8567 214c 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 8568 214e 1E44     		add	r6, r6, r3
 214:TMCL.c        **** 					ActualReply.Value.Byte[3]+ActualReply.Value.Byte[2]+
 8569              		.loc 1 214 46 view .LVU2440
 8570 2150 E37B     		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 8571 2152 1E44     		add	r6, r6, r3
 215:TMCL.c        **** 					ActualReply.Value.Byte[1]+ActualReply.Value.Byte[0];
 8572              		.loc 1 215 31 view .LVU2441
 8573 2154 A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 8574 2156 1E44     		add	r6, r6, r3
 215:TMCL.c        **** 					ActualReply.Value.Byte[1]+ActualReply.Value.Byte[0];
 8575              		.loc 1 215 57 view .LVU2442
 8576 2158 637B     		ldrb	r3, [r4, #13]	@ zero_extendqisi2
 8577 215a 1E44     		add	r6, r6, r3
 213:TMCL.c        ****     				ActualReply.Status+ActualReply.Opcode+
 8578              		.loc 1 213 15 view .LVU2443
 8579 215c 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 8580 215e 1E44     		add	r6, r6, r3
 8581 2160 F6B2     		uxtb	r6, r6
 8582              	.LVL559:
 218:TMCL.c        ****     		uart_write(moduleConfig.serialModuleAddress);
 8583              		.loc 1 218 7 is_stmt 1 view .LVU2444
 8584 2162 D2E7     		b	.L705
 8585              	.LVL560:
 8586              	.L713:
 218:TMCL.c        ****     		uart_write(moduleConfig.serialModuleAddress);
 8587              		.loc 1 218 7 is_stmt 0 view .LVU2445
 8588              	.LBE96:
 8589              	.LBB97:
 311:TMCL.c        ****   					ActualCommand.Type=UARTCmd[2];
 8590              		.loc 1 311 8 is_stmt 1 view .LVU2446
 318:TMCL.c        ****   				}
 8591              		.loc 1 318 24 is_stmt 0 view .LVU2447
 8592 2164 0322     		movs	r2, #3
 312:TMCL.c        ****   					ActualCommand.Motor=UARTCmd[3];
 8593              		.loc 1 312 26 view .LVU2448
 8594 2166 94F82610 		ldrb	r1, [r4, #38]	@ zero_extendqisi2
 8595 216a A36A     		ldr	r3, [r4, #40]
 311:TMCL.c        ****   					ActualCommand.Type=UARTCmd[2];
 8596              		.loc 1 311 28 view .LVU2449
 8597 216c 94F82500 		ldrb	r0, [r4, #37]	@ zero_extendqisi2
 8598              	.LVL561:
 312:TMCL.c        ****   					ActualCommand.Motor=UARTCmd[3];
 8599              		.loc 1 312 26 view .LVU2450
 8600 2170 6170     		strb	r1, [r4, #1]
 313:TMCL.c        ****   					ActualCommand.Value.Byte[3]=UARTCmd[4];
 8601              		.loc 1 313 27 view .LVU2451
 8602 2172 94F82710 		ldrb	r1, [r4, #39]	@ zero_extendqisi2
 8603 2176 1BBA     		rev	r3, r3
 311:TMCL.c        ****   					ActualCommand.Type=UARTCmd[2];
 8604              		.loc 1 311 28 view .LVU2452
 8605 2178 2070     		strb	r0, [r4]
 312:TMCL.c        ****   					ActualCommand.Motor=UARTCmd[3];
 8606              		.loc 1 312 8 is_stmt 1 view .LVU2453
 313:TMCL.c        ****   					ActualCommand.Value.Byte[3]=UARTCmd[4];
 8607              		.loc 1 313 8 view .LVU2454
 317:TMCL.c        ****  					TMCLCommandState = TCS_UART;
 8608              		.loc 1 317 35 is_stmt 0 view .LVU2455
 8609 217a 6360     		str	r3, [r4, #4]
 313:TMCL.c        ****   					ActualCommand.Value.Byte[3]=UARTCmd[4];
 8610              		.loc 1 313 27 view .LVU2456
 8611 217c A170     		strb	r1, [r4, #2]
 314:TMCL.c        ****   					ActualCommand.Value.Byte[2]=UARTCmd[5];
 8612              		.loc 1 314 8 is_stmt 1 view .LVU2457
 315:TMCL.c        ****   					ActualCommand.Value.Byte[1]=UARTCmd[6];
 8613              		.loc 1 315 8 view .LVU2458
 316:TMCL.c        ****   					ActualCommand.Value.Byte[0]=UARTCmd[7];
 8614              		.loc 1 316 8 view .LVU2459
 317:TMCL.c        ****  					TMCLCommandState = TCS_UART;
 8615              		.loc 1 317 8 view .LVU2460
 318:TMCL.c        ****   				}
 8616              		.loc 1 318 7 view .LVU2461
 318:TMCL.c        ****   				}
 8617              		.loc 1 318 24 is_stmt 0 view .LVU2462
 8618 217e A277     		strb	r2, [r4, #30]
 8619              	.LBE97:
 327:TMCL.c        ****   		tmcl_executeActualCommand();
 8620              		.loc 1 327 4 is_stmt 1 view .LVU2463
 8621 2180 30E7     		b	.L683
 8622              	.L716:
 8623 2182 00BF     		.align	2
 8624              	.L715:
 8625 2184 00000000 		.word	.LANCHOR0
 8626 2188 13000000 		.word	.LANCHOR0+19
 8627 218c 00000000 		.word	moduleConfig
 8628 2190 25000000 		.word	.LANCHOR0+37
 8629              		.cfi_endproc
 8630              	.LFE7:
 8632              		.align	1
 8633              		.p2align 2,,3
 8634              		.global	tmcl_softwareReset
 8635              		.syntax unified
 8636              		.thumb
 8637              		.thumb_func
 8639              	tmcl_softwareReset:
 8640              	.LFB14:
1758:TMCL.c        **** 	if(ActualCommand.Value.Int32==1234)
 8641              		.loc 1 1758 1 view -0
 8642              		.cfi_startproc
 8643              		@ args = 0, pretend = 0, frame = 0
 8644              		@ frame_needed = 0, uses_anonymous_args = 0
 8645              		@ link register save eliminated.
1759:TMCL.c        **** 		ResetRequested = true;
 8646              		.loc 1 1759 2 view .LVU2465
1759:TMCL.c        **** 		ResetRequested = true;
 8647              		.loc 1 1759 4 is_stmt 0 view .LVU2466
 8648 2194 40F2D242 		movw	r2, #1234
1759:TMCL.c        **** 		ResetRequested = true;
 8649              		.loc 1 1759 24 view .LVU2467
 8650 2198 034B     		ldr	r3, .L719
1759:TMCL.c        **** 		ResetRequested = true;
 8651              		.loc 1 1759 4 view .LVU2468
 8652 219a 5968     		ldr	r1, [r3, #4]
 8653 219c 9142     		cmp	r1, r2
1760:TMCL.c        **** }
 8654              		.loc 1 1760 3 is_stmt 1 view .LVU2469
1760:TMCL.c        **** }
 8655              		.loc 1 1760 18 is_stmt 0 view .LVU2470
 8656 219e 04BF     		itt	eq
 8657 21a0 0122     		moveq	r2, #1
 8658 21a2 5A77     		strbeq	r2, [r3, #29]
1761:TMCL.c        **** 
 8659              		.loc 1 1761 1 view .LVU2471
 8660 21a4 7047     		bx	lr
 8661              	.L720:
 8662 21a6 00BF     		.align	2
 8663              	.L719:
 8664 21a8 00000000 		.word	.LANCHOR0
 8665              		.cfi_endproc
 8666              	.LFE14:
 8668              		.align	1
 8669              		.p2align 2,,3
 8670              		.global	tmcl_factoryDefault
 8671              		.syntax unified
 8672              		.thumb
 8673              		.thumb_func
 8675              	tmcl_factoryDefault:
 8676              	.LFB15:
1765:TMCL.c        **** 	if((ActualCommand.Type==0) && (ActualCommand.Motor==0) && (ActualCommand.Value.Int32==1234))
 8677              		.loc 1 1765 1 is_stmt 1 view -0
 8678              		.cfi_startproc
 8679              		@ args = 0, pretend = 0, frame = 0
 8680              		@ frame_needed = 0, uses_anonymous_args = 0
1766:TMCL.c        **** 	{
 8681              		.loc 1 1766 2 view .LVU2473
1765:TMCL.c        **** 	if((ActualCommand.Type==0) && (ActualCommand.Motor==0) && (ActualCommand.Value.Int32==1234))
 8682              		.loc 1 1765 1 is_stmt 0 view .LVU2474
 8683 21ac 08B5     		push	{r3, lr}
 8684              	.LCFI349:
 8685              		.cfi_def_cfa_offset 8
 8686              		.cfi_offset 3, -8
 8687              		.cfi_offset 14, -4
1766:TMCL.c        **** 	{
 8688              		.loc 1 1766 29 view .LVU2475
 8689 21ae 0B4B     		ldr	r3, .L725
 8690 21b0 1968     		ldr	r1, [r3]
 8691 21b2 21F07F41 		bic	r1, r1, #-16777216
 8692 21b6 21F0FF01 		bic	r1, r1, #255
1766:TMCL.c        **** 	{
 8693              		.loc 1 1766 4 view .LVU2476
 8694 21ba 21B9     		cbnz	r1, .L721
1766:TMCL.c        **** 	{
 8695              		.loc 1 1766 57 discriminator 1 view .LVU2477
 8696 21bc 40F2D242 		movw	r2, #1234
 8697 21c0 5B68     		ldr	r3, [r3, #4]
 8698 21c2 9342     		cmp	r3, r2
 8699 21c4 00D0     		beq	.L724
 8700              	.L721:
1770:TMCL.c        **** 	}
1771:TMCL.c        **** }
 8701              		.loc 1 1771 1 view .LVU2478
 8702 21c6 08BD     		pop	{r3, pc}
 8703              	.L724:
 8704              	.LBB100:
 8705              	.LBI100:
1764:TMCL.c        **** {
 8706              		.loc 1 1764 6 is_stmt 1 view .LVU2479
 8707              	.LBB101:
1768:TMCL.c        **** 		io_resetCPU(true);
 8708              		.loc 1 1768 3 view .LVU2480
 8709 21c8 40F2FF70 		movw	r0, #2047
 8710 21cc FFF7FEFF 		bl	eeprom_writeConfigByte
 8711              	.LVL562:
1769:TMCL.c        **** 	}
 8712              		.loc 1 1769 3 view .LVU2481
 8713              	.LBE101:
 8714              	.LBE100:
 8715              		.loc 1 1771 1 is_stmt 0 view .LVU2482
 8716 21d0 BDE80840 		pop	{r3, lr}
 8717              	.LCFI350:
 8718              		.cfi_restore 14
 8719              		.cfi_restore 3
 8720              		.cfi_def_cfa_offset 0
 8721              	.LBB103:
 8722              	.LBB102:
1769:TMCL.c        **** 	}
 8723              		.loc 1 1769 3 view .LVU2483
 8724 21d4 0120     		movs	r0, #1
 8725 21d6 FFF7FEBF 		b	io_resetCPU
 8726              	.LVL563:
 8727              	.L726:
 8728 21da 00BF     		.align	2
 8729              	.L725:
 8730 21dc 00000000 		.word	.LANCHOR0
 8731              	.LBE102:
 8732              	.LBE103:
 8733              		.cfi_endproc
 8734              	.LFE15:
 8736              		.global	ActualReply
 8737              		.global	ActualCommand
 8738              		.global	SpecialReply
 8739              		.global	TMCLReplyFormat
 8740              		.global	ResetRequested
 8741              		.bss
 8742              		.align	2
 8743              		.set	.LANCHOR0,. + 0
 8746              	ActualCommand:
 8747 0000 00000000 		.space	8
 8747      00000000 
 8750              	ActualReply:
 8751 0008 00000000 		.space	8
 8751      00000000 
 8754              	TMCLReplyFormat:
 8755 0010 00       		.space	1
 8756 0011 000000   		.space	3
 8759              	SpecialReply:
 8760 0014 00000000 		.space	9
 8760      00000000 
 8760      00
 8763              	ResetRequested:
 8764 001d 00       		.space	1
 8767              	TMCLCommandState.3:
 8768 001e 00       		.space	1
 8771              	ExtendedCANFrame.2:
 8772 001f 00       		.space	1
 8775              	UARTCount.1:
 8776 0020 00       		.space	1
 8777 0021 000000   		.space	3
 8780              	UARTCmd.0:
 8781 0024 00000000 		.space	9
 8781      00000000 
 8781      00
 8782              		.text
 8783              	.Letext0:
 8784              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 8785              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 8786              		.file 4 "TMC-API/tmc/helpers/Types.h"
 8787              		.file 5 "Definitions.h"
 8788              		.file 6 "./cpu/STM32F103/stm32f10x_type.h"
 8789              		.file 7 "./cpu/STM32F103/stm32f10x_map.h"
 8790              		.file 8 "hal/tmcl/TMCL-Defines.h"
 8791              		.file 9 "hal/comm/CAN.h"
 8792              		.file 10 "hal/comm/UART.h"
 8793              		.file 11 "hal/system/SysTick.h"
 8794              		.file 12 "hal/system/IO.h"
 8795              		.file 13 "hal/comm/Eeprom.h"
 8796              		.file 14 "BLDC.h"
 8797              		.file 15 "hal/ic/LIS2DH12.h"
 8798              		.file 16 "./TMC-API/tmc/ic/TMC4671/TMC4671.h"
 8799              		.file 17 "./TMC-API/tmc/ic/TMC6200/TMC6200.h"
 8800              		.file 18 "hal/comm/SPI.h"
 8801              		.file 19 "Sensor.h"
 8802              		.file 20 "hal/Debug.h"
 8803              		.file 21 "hal/system/SystemInfo.h"
 8804              		.file 22 "hal/Flags.h"
 8805              		.file 23 "Button.h"
 8806              		.file 24 "./cpu/STM32F103/stm32f10x_nvic.h"
 8807              		.file 25 "./cpu/STM32F103/stm32f10x_systick.h"
 8808              		.file 26 "./cpu/STM32F103/stm32f10x_dma.h"
 8809              		.file 27 "./cpu/STM32F103/stm32f10x_adc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMCL.c
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:17     .text:00000000 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:23     .text:00000000 tmcl_handleAxisParameter.part.0
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:49     .text:0000000c $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:51     .text:00000010 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:55     .text:0000001a $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:308    .text:00000214 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:1584   .text:00000728 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:1611   .text:0000077c $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:2391   .text:00000aa0 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:2417   .text:00000af0 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:3204   .text:00000e24 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:3223   .text:00000e60 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:3896   .text:00001158 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:3908   .text:0000117c $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:4472   .text:00001414 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:4480   .text:0000141c $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:5446   .text:00001778 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:5462   .text:000017a4 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6531   .text:00001a70 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6585   .text:00001b3c $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6591   .text:00001b3c tmcl_handleGlobalParameter.part.0
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6616   .text:00001b4c $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6636   .text:00001b60 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6993   .text:00001c84 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:6998   .text:00001c8c $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7005   .text:00001c8c tmc4671_readwriteByte
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7045   .text:00001c9c tmc6200_readwriteByte
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7087   .text:00001cb0 tmcl_rotateLeft
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7106   .text:00001cbc $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7110   .text:00001cc0 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7117   .text:00001cc0 tmcl_rotateRight
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7134   .text:00001cc8 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7138   .text:00001ccc $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7145   .text:00001ccc tmcl_motorStop
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7165   .text:00001cd0 tmcl_init
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7184   .text:00001cd4 tmcl_handleAxisParameter
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7210   .text:00001ce4 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7214   .text:00001ce8 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7221   .text:00001ce8 tmcl_handleGlobalParameter
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7243   .text:00001cf4 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7247   .text:00001cf8 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7254   .text:00001cf8 tmcl_setOutput
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7303   .text:00001d14 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7307   .text:00001d18 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7314   .text:00001d18 tmcl_getInput
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7383   .text:00001d4c $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7387   .text:00001d50 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7394   .text:00001d50 tmcl_getVersion
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7476   .text:00001d90 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7483   .text:00001da0 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7490   .text:00001da0 tmcl_boot
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7569   .text:00001dec $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7579   .text:00001e00 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7586   .text:00001e00 tmcl_executeActualCommand
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7624   .text:00001e24 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7650   .text:00001e46 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8099   .text:00001f64 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8103   .text:00001f68 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8110   .text:00001f68 tmcl_processCommand
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8625   .text:00002184 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8632   .text:00002194 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8639   .text:00002194 tmcl_softwareReset
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8664   .text:000021a8 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8668   .text:000021ac $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8675   .text:000021ac tmcl_factoryDefault
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8730   .text:000021dc $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8750   .bss:00000008 ActualReply
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8746   .bss:00000000 ActualCommand
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8759   .bss:00000014 SpecialReply
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8754   .bss:00000010 TMCLReplyFormat
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8763   .bss:0000001d ResetRequested
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8742   .bss:00000000 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8767   .bss:0000001e TMCLCommandState.3
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8771   .bss:0000001f ExtendedCANFrame.2
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8775   .bss:00000020 UARTCount.1
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:8780   .bss:00000024 UARTCmd.0
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7639   .text:00001e33 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7639   .text:00001e34 $t
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7663   .text:00001e53 $d
C:\Users\forre\AppData\Local\Temp\cc6pEl4U.s:7663   .text:00001e54 $t

UNDEFINED SYMBOLS
tmcm_getDriverState
sensor_getFltActualTorque
debug_getTestVar9
debug_getTestVar1
debug_getTestVar5
sensor_pedalVelocity
debug_getTestVar7
debug_getTestVar6
sensor_filteredPedalVelocityFast
debug_getTestVar3
debug_getTestVar2
debug_getTestVar4
debug_getTestVar8
sensor_pedalPosition
debug_getTestVar0
sensor_filteredPedalVelocity
sensor_pedalCounterPer500MSeconds
sensor_pedalCounter
systemInfo_getVelocityLoopsPerSecond
systemInfo_getCurrentLoopsPerSecond
systemInfo_getMainLoopsPerSecond
sensor_targetpedalTorque
sensor_rightPedalTorque
sensor_leftPedalTorque
sensor_actualPedalTorque
bldc_getInput5V
bldc_getInput6V
bldc_getInput12V
flags_getAllStatusFlags
bldc_getMotorTemperature
bldc_getSupplyVoltage
eeprom_readConfigBlock
sensor_wheelVelocity
sensor_motorVelocity
sensor_actualGain
sensor_actualMapSpeedTorque
motorConfig
bldc_getDigitalHallAngle
bldc_getEncoderAngle
sensor_actualTorqueLimit
sensor_pedalMotorEnable
sensor_pedalDirection
bldc_getActualVelocity
bldc_getRampGeneratorVelocity
bldc_getTargetVelocity
tmc4671_readInt
bldc_getOpenLoopAngle
sensor_averageTorque
bldc_getActualMotorCurrent
bldc_getTargetMotorCurrent
tmc4671_writeInt
bldc_setTargetVelocity
tmcm_disableDriver
button_updateBatteryStatusFactor
debug_setTestVar7
bldc_setAdcI0Offset
bldc_setAdcI1Offset
bldc_setRampEnabled
sensor_updateCutOffTime
bldc_setDualShuntFactor
sensor_setFltActualTorque
debug_setTestVar4
debug_setTestVar5
debug_setTestVar8
debug_setTestVar1
debug_setTestVar2
debug_setTestVar3
debug_setTestVar9
debug_setTestVar6
debug_setTestVar0
button_resetSavingTimer
bldc_setAcceleration
bldc_setMaxVelocity
tmc4671_setTorqueFluxLimit_mA
bldc_setCommutationMode
tmcm_enableDriver
bldc_getCommutationMode
bldc_getMotorPolePairs
bldc_getDualShuntFactor
bldc_getAdcI0Offset
bldc_getAdcI1Offset
eeprom_writeConfigBlock
bldc_setTargetMotorCurrent
eeprom_writeConfigByte
can_init
eeprom_readConfigByte
moduleConfig
weasel_spi_readWriteByte
dragon_spi_readWriteByte
bldc_stopMotor
tmcm_clearModuleSpecificIOPin
tmcm_setModuleSpecificIOPin
tmcm_getModuleSpecificADCValue
tmcm_getModuleSpecificIOPin
tmcm_getModuleSpecificIOPinStatus
VersionString
io_disableInterrupts
NVIC_DeInit
SysTick_ITConfig
DMA_Cmd
DMA_DeInit
ADC_DeInit
io_resetCPU
LIS2DH12_spi_writeInt
LIS2DH12_spi_readInt
tmc6200_writeInt
tmc6200_readInt
can_getMessage
uart_read
uart_write
can_sendMessage
uart_checkTimeout
wait
