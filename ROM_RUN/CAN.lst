   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"CAN.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	can_Rx0Irq
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	can_Rx0Irq:
  25              	.LFB0:
  26              		.file 1 "hal/comm/CAN.c"
   1:hal/comm/CAN.c **** /*
   2:hal/comm/CAN.c ****  * CAN.h
   3:hal/comm/CAN.c ****  *
   4:hal/comm/CAN.c ****  *  Created on: 01.04.2020
   5:hal/comm/CAN.c ****  *      Author: OK / ED
   6:hal/comm/CAN.c ****  */
   7:hal/comm/CAN.c **** 
   8:hal/comm/CAN.c **** #include "CAN.h"
   9:hal/comm/CAN.c **** 
  10:hal/comm/CAN.c **** #if defined(USE_CAN_INTERFACE)
  11:hal/comm/CAN.c **** 
  12:hal/comm/CAN.c **** #define CAN_INTR_PRI 7
  13:hal/comm/CAN.c **** #define CAN_TX_BUF_SIZE 8
  14:hal/comm/CAN.c **** #define CAN_RX_BUF_SIZE 8
  15:hal/comm/CAN.c **** 
  16:hal/comm/CAN.c **** volatile int CanRxWritePtr, CanRxReadPtr, CanTxWritePtr, CanTxReadPtr;
  17:hal/comm/CAN.c **** volatile TCanFrame CanTxBuffer[CAN_TX_BUF_SIZE];
  18:hal/comm/CAN.c **** volatile TCanFrame CanRxBuffer[CAN_RX_BUF_SIZE];
  19:hal/comm/CAN.c **** 
  20:hal/comm/CAN.c **** /* CAN-Receive-Interrupt Handler for Receive FIFO 0 */
  21:hal/comm/CAN.c **** void can_Rx0Irq()
  22:hal/comm/CAN.c **** {
  27              		.loc 1 22 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  23:hal/comm/CAN.c **** 	CanRxMsg CanMessage;
  31              		.loc 1 23 2 view .LVU1
  24:hal/comm/CAN.c **** 	int i, j;
  32              		.loc 1 24 2 view .LVU2
  25:hal/comm/CAN.c **** 
  26:hal/comm/CAN.c **** 	i = CanRxWritePtr+1;
  33              		.loc 1 26 2 view .LVU3
  22:hal/comm/CAN.c **** 	CanRxMsg CanMessage;
  34              		.loc 1 22 1 is_stmt 0 view .LVU4
  35 0000 30B5     		push	{r4, r5, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
  41              		.loc 1 26 19 view .LVU5
  42 0002 234C     		ldr	r4, .L16
  27:hal/comm/CAN.c **** 	if(i==CAN_RX_BUF_SIZE)
  28:hal/comm/CAN.c **** 		i=0;
  29:hal/comm/CAN.c **** 
  30:hal/comm/CAN.c **** 	if(i != CanRxReadPtr)  // read data if some space in buffer available
  31:hal/comm/CAN.c **** 	{
  32:hal/comm/CAN.c **** 		CAN_Receive(CAN_FIFO0, &CanMessage);
  43              		.loc 1 32 3 view .LVU6
  44 0004 0020     		movs	r0, #0
  26:hal/comm/CAN.c **** 	if(i==CAN_RX_BUF_SIZE)
  45              		.loc 1 26 19 view .LVU7
  46 0006 2368     		ldr	r3, [r4]
  30:hal/comm/CAN.c **** 	{
  47              		.loc 1 30 7 view .LVU8
  48 0008 6268     		ldr	r2, [r4, #4]
  28:hal/comm/CAN.c **** 
  49              		.loc 1 28 4 view .LVU9
  50 000a 072B     		cmp	r3, #7
  26:hal/comm/CAN.c **** 	if(i==CAN_RX_BUF_SIZE)
  51              		.loc 1 26 4 view .LVU10
  52 000c 03F10105 		add	r5, r3, #1
  53              	.LVL0:
  27:hal/comm/CAN.c **** 		i=0;
  54              		.loc 1 27 2 is_stmt 1 view .LVU11
  28:hal/comm/CAN.c **** 
  55              		.loc 1 28 4 is_stmt 0 view .LVU12
  56 0010 08BF     		it	eq
  57 0012 0025     		moveq	r5, #0
  58              	.LVL1:
  30:hal/comm/CAN.c **** 	{
  59              		.loc 1 30 2 is_stmt 1 view .LVU13
  30:hal/comm/CAN.c **** 	{
  60              		.loc 1 30 4 is_stmt 0 view .LVU14
  61 0014 AA42     		cmp	r2, r5
  22:hal/comm/CAN.c **** 	CanRxMsg CanMessage;
  62              		.loc 1 22 1 view .LVU15
  63 0016 87B0     		sub	sp, sp, #28
  64              	.LCFI1:
  65              		.cfi_def_cfa_offset 40
  30:hal/comm/CAN.c **** 	{
  66              		.loc 1 30 4 view .LVU16
  67 0018 34D0     		beq	.L3
  68              		.loc 1 32 3 is_stmt 1 view .LVU17
  69 001a 01A9     		add	r1, sp, #4
  70 001c FFF7FEFF 		bl	CAN_Receive
  71              	.LVL2:
  33:hal/comm/CAN.c **** 
  34:hal/comm/CAN.c **** 		if(CanMessage.IDE==CAN_ID_EXT)
  72              		.loc 1 34 3 view .LVU18
  73              		.loc 1 34 5 is_stmt 0 view .LVU19
  74 0020 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
  75 0024 042B     		cmp	r3, #4
  76 0026 29D0     		beq	.L15
  35:hal/comm/CAN.c **** 		{
  36:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Ext = true;
  37:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id = CanMessage.ExtId;
  38:hal/comm/CAN.c **** 		}
  39:hal/comm/CAN.c **** 		else
  40:hal/comm/CAN.c **** 		{
  41:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Ext = false;
  77              		.loc 1 41 4 is_stmt 1 view .LVU20
  78              		.loc 1 41 35 is_stmt 0 view .LVU21
  79 0028 0021     		movs	r1, #0
  80              		.loc 1 41 30 view .LVU22
  81 002a 2368     		ldr	r3, [r4]
  42:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id = CanMessage.StdId;
  82              		.loc 1 42 46 view .LVU23
  83 002c 019A     		ldr	r2, [sp, #4]
  84              	.L13:
  41:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id = CanMessage.StdId;
  85              		.loc 1 41 35 view .LVU24
  86 002e 04EB0313 		add	r3, r4, r3, lsl #4
  87 0032 5972     		strb	r1, [r3, #9]
  88              		.loc 1 42 4 is_stmt 1 view .LVU25
  89              		.loc 1 42 30 is_stmt 0 view .LVU26
  90 0034 2368     		ldr	r3, [r4]
  91              		.loc 1 42 34 view .LVU27
  92 0036 04EB0313 		add	r3, r4, r3, lsl #4
  93 003a DA60     		str	r2, [r3, #12]
  43:hal/comm/CAN.c **** 		}
  44:hal/comm/CAN.c **** 
  45:hal/comm/CAN.c **** 		if(CanMessage.RTR==CAN_RTR_REMOTE)
  94              		.loc 1 45 3 is_stmt 1 view .LVU28
  46:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Rtr = true;
  95              		.loc 1 46 4 view .LVU29
  47:hal/comm/CAN.c **** 		else
  48:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Rtr = false;
  96              		.loc 1 48 4 view .LVU30
  49:hal/comm/CAN.c **** 
  50:hal/comm/CAN.c **** 		CanRxBuffer[CanRxWritePtr].Dlc = CanMessage.DLC;
  97              		.loc 1 50 3 view .LVU31
  45:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Rtr = true;
  98              		.loc 1 45 5 is_stmt 0 view .LVU32
  99 003c 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 100 0040 022B     		cmp	r3, #2
  46:hal/comm/CAN.c **** 		else
 101              		.loc 1 46 35 view .LVU33
 102 0042 0CBF     		ite	eq
 103 0044 0122     		moveq	r2, #1
  48:hal/comm/CAN.c **** 
 104              		.loc 1 48 35 view .LVU34
 105 0046 0022     		movne	r2, #0
  48:hal/comm/CAN.c **** 
 106              		.loc 1 48 30 view .LVU35
 107 0048 2368     		ldr	r3, [r4]
  48:hal/comm/CAN.c **** 
 108              		.loc 1 48 35 view .LVU36
 109 004a 04EB0313 		add	r3, r4, r3, lsl #4
 110 004e 9A72     		strb	r2, [r3, #10]
  51:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 111              		.loc 1 51 8 view .LVU37
 112 0050 0022     		movs	r2, #0
  50:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 113              		.loc 1 50 29 view .LVU38
 114 0052 2368     		ldr	r3, [r4]
  50:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 115              		.loc 1 50 46 view .LVU39
 116 0054 9DF80E10 		ldrb	r1, [sp, #14]	@ zero_extendqisi2
  50:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 117              		.loc 1 50 34 view .LVU40
 118 0058 04EB0313 		add	r3, r4, r3, lsl #4
 119 005c 1972     		strb	r1, [r3, #8]
 120              		.loc 1 51 3 is_stmt 1 view .LVU41
 121              	.LVL3:
 122              		.loc 1 51 12 view .LVU42
 123 005e 0DF10F01 		add	r1, sp, #15
 124              	.LVL4:
 125              	.L8:
  52:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Data[j] = CanMessage.Data[j];
 126              		.loc 1 52 4 discriminator 3 view .LVU43
 127              		.loc 1 52 35 is_stmt 0 discriminator 3 view .LVU44
 128 0062 2368     		ldr	r3, [r4]
 129              		.loc 1 52 56 discriminator 3 view .LVU45
 130 0064 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 131              		.loc 1 52 39 discriminator 3 view .LVU46
 132 0068 04EB0313 		add	r3, r4, r3, lsl #4
 133 006c 1344     		add	r3, r3, r2
  51:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 134              		.loc 1 51 18 discriminator 3 view .LVU47
 135 006e 0132     		adds	r2, r2, #1
 136              	.LVL5:
  51:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 137              		.loc 1 51 3 discriminator 3 view .LVU48
 138 0070 082A     		cmp	r2, #8
 139              		.loc 1 52 39 discriminator 3 view .LVU49
 140 0072 1874     		strb	r0, [r3, #16]
  51:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 141              		.loc 1 51 17 is_stmt 1 discriminator 3 view .LVU50
 142              	.LVL6:
  51:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 143              		.loc 1 51 12 discriminator 3 view .LVU51
  51:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 144              		.loc 1 51 3 is_stmt 0 discriminator 3 view .LVU52
 145 0074 F5D1     		bne	.L8
  53:hal/comm/CAN.c **** 
  54:hal/comm/CAN.c **** 		CanRxWritePtr = i;
 146              		.loc 1 54 3 is_stmt 1 view .LVU53
 147              		.loc 1 54 17 is_stmt 0 view .LVU54
 148 0076 2560     		str	r5, [r4]
  55:hal/comm/CAN.c **** 	}
  56:hal/comm/CAN.c **** 	else
  57:hal/comm/CAN.c **** 	{
  58:hal/comm/CAN.c **** 		// release mailbox if no space left
  59:hal/comm/CAN.c **** 		CAN_FIFORelease(CAN_FIFO0);
  60:hal/comm/CAN.c **** 	}
  61:hal/comm/CAN.c **** }
 149              		.loc 1 61 1 view .LVU55
 150 0078 07B0     		add	sp, sp, #28
 151              	.LCFI2:
 152              		.cfi_remember_state
 153              		.cfi_def_cfa_offset 12
 154              		@ sp needed
 155 007a 30BD     		pop	{r4, r5, pc}
 156              	.LVL7:
 157              	.L15:
 158              	.LCFI3:
 159              		.cfi_restore_state
  36:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id = CanMessage.ExtId;
 160              		.loc 1 36 4 is_stmt 1 view .LVU56
  36:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id = CanMessage.ExtId;
 161              		.loc 1 36 35 is_stmt 0 view .LVU57
 162 007c 0121     		movs	r1, #1
  36:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id = CanMessage.ExtId;
 163              		.loc 1 36 30 view .LVU58
 164 007e 2368     		ldr	r3, [r4]
  37:hal/comm/CAN.c **** 		}
 165              		.loc 1 37 46 view .LVU59
 166 0080 029A     		ldr	r2, [sp, #8]
 167 0082 D4E7     		b	.L13
 168              	.L3:
  59:hal/comm/CAN.c **** 	}
 169              		.loc 1 59 3 is_stmt 1 view .LVU60
 170              		.loc 1 61 1 is_stmt 0 view .LVU61
 171 0084 07B0     		add	sp, sp, #28
 172              	.LCFI4:
 173              		.cfi_def_cfa_offset 12
 174              		@ sp needed
 175 0086 BDE83040 		pop	{r4, r5, lr}
 176              	.LCFI5:
 177              		.cfi_restore 14
 178              		.cfi_restore 5
 179              		.cfi_restore 4
 180              		.cfi_def_cfa_offset 0
 181              	.LVL8:
  59:hal/comm/CAN.c **** 	}
 182              		.loc 1 59 3 view .LVU62
 183 008a FFF7FEBF 		b	CAN_FIFORelease
 184              	.LVL9:
 185              	.L17:
  59:hal/comm/CAN.c **** 	}
 186              		.loc 1 59 3 view .LVU63
 187 008e 00BF     		.align	2
 188              	.L16:
 189 0090 00000000 		.word	.LANCHOR0
 190              		.cfi_endproc
 191              	.LFE0:
 193              		.align	1
 194              		.p2align 2,,3
 195              		.global	can_Rx1Irq
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	can_Rx1Irq:
 201              	.LFB1:
  62:hal/comm/CAN.c **** 
  63:hal/comm/CAN.c **** 
  64:hal/comm/CAN.c **** /* CAN-Receive-Interrupt Handler for Receive FIFO 1 */
  65:hal/comm/CAN.c **** void can_Rx1Irq()
  66:hal/comm/CAN.c **** {
 202              		.loc 1 66 1 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 24
 205              		@ frame_needed = 0, uses_anonymous_args = 0
  67:hal/comm/CAN.c **** 	CanRxMsg CanMessage;
 206              		.loc 1 67 2 view .LVU65
  68:hal/comm/CAN.c **** 	int i, j;
 207              		.loc 1 68 2 view .LVU66
  69:hal/comm/CAN.c **** 
  70:hal/comm/CAN.c **** 	i = CanRxWritePtr+1;
 208              		.loc 1 70 2 view .LVU67
  66:hal/comm/CAN.c **** 	CanRxMsg CanMessage;
 209              		.loc 1 66 1 is_stmt 0 view .LVU68
 210 0094 30B5     		push	{r4, r5, lr}
 211              	.LCFI6:
 212              		.cfi_def_cfa_offset 12
 213              		.cfi_offset 4, -12
 214              		.cfi_offset 5, -8
 215              		.cfi_offset 14, -4
 216              		.loc 1 70 19 view .LVU69
 217 0096 234C     		ldr	r4, .L32
  71:hal/comm/CAN.c **** 	if(i==CAN_RX_BUF_SIZE)
  72:hal/comm/CAN.c **** 		i=0;
  73:hal/comm/CAN.c **** 
  74:hal/comm/CAN.c **** 	if(i != CanRxReadPtr)  // read data if some space in buffer available
  75:hal/comm/CAN.c **** 	{
  76:hal/comm/CAN.c **** 		CAN_Receive(CAN_FIFO1, &CanMessage);
 218              		.loc 1 76 3 view .LVU70
 219 0098 0120     		movs	r0, #1
  70:hal/comm/CAN.c **** 	if(i==CAN_RX_BUF_SIZE)
 220              		.loc 1 70 19 view .LVU71
 221 009a 2368     		ldr	r3, [r4]
  74:hal/comm/CAN.c **** 	{
 222              		.loc 1 74 7 view .LVU72
 223 009c 6268     		ldr	r2, [r4, #4]
  72:hal/comm/CAN.c **** 
 224              		.loc 1 72 4 view .LVU73
 225 009e 072B     		cmp	r3, #7
  70:hal/comm/CAN.c **** 	if(i==CAN_RX_BUF_SIZE)
 226              		.loc 1 70 4 view .LVU74
 227 00a0 03F10105 		add	r5, r3, #1
 228              	.LVL10:
  71:hal/comm/CAN.c **** 		i=0;
 229              		.loc 1 71 2 is_stmt 1 view .LVU75
  72:hal/comm/CAN.c **** 
 230              		.loc 1 72 4 is_stmt 0 view .LVU76
 231 00a4 08BF     		it	eq
 232 00a6 0025     		moveq	r5, #0
 233              	.LVL11:
  74:hal/comm/CAN.c **** 	{
 234              		.loc 1 74 2 is_stmt 1 view .LVU77
  74:hal/comm/CAN.c **** 	{
 235              		.loc 1 74 4 is_stmt 0 view .LVU78
 236 00a8 AA42     		cmp	r2, r5
  66:hal/comm/CAN.c **** 	CanRxMsg CanMessage;
 237              		.loc 1 66 1 view .LVU79
 238 00aa 87B0     		sub	sp, sp, #28
 239              	.LCFI7:
 240              		.cfi_def_cfa_offset 40
  74:hal/comm/CAN.c **** 	{
 241              		.loc 1 74 4 view .LVU80
 242 00ac 34D0     		beq	.L20
 243              		.loc 1 76 3 is_stmt 1 view .LVU81
 244 00ae 01A9     		add	r1, sp, #4
 245 00b0 FFF7FEFF 		bl	CAN_Receive
 246              	.LVL12:
  77:hal/comm/CAN.c **** 
  78:hal/comm/CAN.c **** 		if(CanMessage.IDE==CAN_ID_EXT)
 247              		.loc 1 78 3 view .LVU82
 248              		.loc 1 78 5 is_stmt 0 view .LVU83
 249 00b4 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 250 00b8 042B     		cmp	r3, #4
 251 00ba 29D0     		beq	.L31
  79:hal/comm/CAN.c **** 		{
  80:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Ext = true;
  81:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id=CanMessage.ExtId;
  82:hal/comm/CAN.c **** 		}
  83:hal/comm/CAN.c **** 		else
  84:hal/comm/CAN.c **** 		{
  85:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Ext = false;
 252              		.loc 1 85 4 is_stmt 1 view .LVU84
 253              		.loc 1 85 35 is_stmt 0 view .LVU85
 254 00bc 0021     		movs	r1, #0
 255              		.loc 1 85 30 view .LVU86
 256 00be 2368     		ldr	r3, [r4]
  86:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id=CanMessage.StdId;
 257              		.loc 1 86 44 view .LVU87
 258 00c0 019A     		ldr	r2, [sp, #4]
 259              	.L30:
  85:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id=CanMessage.StdId;
 260              		.loc 1 85 35 view .LVU88
 261 00c2 04EB0313 		add	r3, r4, r3, lsl #4
 262 00c6 5972     		strb	r1, [r3, #9]
 263              		.loc 1 86 4 is_stmt 1 view .LVU89
 264              		.loc 1 86 30 is_stmt 0 view .LVU90
 265 00c8 2368     		ldr	r3, [r4]
 266              		.loc 1 86 33 view .LVU91
 267 00ca 04EB0313 		add	r3, r4, r3, lsl #4
 268 00ce DA60     		str	r2, [r3, #12]
  87:hal/comm/CAN.c **** 		}
  88:hal/comm/CAN.c **** 
  89:hal/comm/CAN.c **** 		if(CanMessage.RTR == CAN_RTR_REMOTE)
 269              		.loc 1 89 3 is_stmt 1 view .LVU92
  90:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Rtr = true;
 270              		.loc 1 90 4 view .LVU93
  91:hal/comm/CAN.c **** 		else
  92:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Rtr = false;
 271              		.loc 1 92 4 view .LVU94
  93:hal/comm/CAN.c **** 
  94:hal/comm/CAN.c **** 		CanRxBuffer[CanRxWritePtr].Dlc = CanMessage.DLC;
 272              		.loc 1 94 3 view .LVU95
  89:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Rtr = true;
 273              		.loc 1 89 5 is_stmt 0 view .LVU96
 274 00d0 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 275 00d4 022B     		cmp	r3, #2
  90:hal/comm/CAN.c **** 		else
 276              		.loc 1 90 35 view .LVU97
 277 00d6 0CBF     		ite	eq
 278 00d8 0122     		moveq	r2, #1
  92:hal/comm/CAN.c **** 
 279              		.loc 1 92 35 view .LVU98
 280 00da 0022     		movne	r2, #0
  92:hal/comm/CAN.c **** 
 281              		.loc 1 92 30 view .LVU99
 282 00dc 2368     		ldr	r3, [r4]
  92:hal/comm/CAN.c **** 
 283              		.loc 1 92 35 view .LVU100
 284 00de 04EB0313 		add	r3, r4, r3, lsl #4
 285 00e2 9A72     		strb	r2, [r3, #10]
  95:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 286              		.loc 1 95 8 view .LVU101
 287 00e4 0022     		movs	r2, #0
  94:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 288              		.loc 1 94 29 view .LVU102
 289 00e6 2368     		ldr	r3, [r4]
  94:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 290              		.loc 1 94 46 view .LVU103
 291 00e8 9DF80E10 		ldrb	r1, [sp, #14]	@ zero_extendqisi2
  94:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 292              		.loc 1 94 34 view .LVU104
 293 00ec 04EB0313 		add	r3, r4, r3, lsl #4
 294 00f0 1972     		strb	r1, [r3, #8]
 295              		.loc 1 95 3 is_stmt 1 view .LVU105
 296              	.LVL13:
 297              		.loc 1 95 12 view .LVU106
 298 00f2 0DF10F01 		add	r1, sp, #15
 299              	.LVL14:
 300              	.L25:
  96:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Data[j]=CanMessage.Data[j];
 301              		.loc 1 96 4 discriminator 3 view .LVU107
 302              		.loc 1 96 35 is_stmt 0 discriminator 3 view .LVU108
 303 00f6 2368     		ldr	r3, [r4]
 304              		.loc 1 96 54 discriminator 3 view .LVU109
 305 00f8 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 306              		.loc 1 96 38 discriminator 3 view .LVU110
 307 00fc 04EB0313 		add	r3, r4, r3, lsl #4
 308 0100 1344     		add	r3, r3, r2
  95:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 309              		.loc 1 95 18 discriminator 3 view .LVU111
 310 0102 0132     		adds	r2, r2, #1
 311              	.LVL15:
  95:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 312              		.loc 1 95 3 discriminator 3 view .LVU112
 313 0104 082A     		cmp	r2, #8
 314              		.loc 1 96 38 discriminator 3 view .LVU113
 315 0106 1874     		strb	r0, [r3, #16]
  95:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 316              		.loc 1 95 17 is_stmt 1 discriminator 3 view .LVU114
 317              	.LVL16:
  95:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 318              		.loc 1 95 12 discriminator 3 view .LVU115
  95:hal/comm/CAN.c **** 		for(j=0; j<8; j++)
 319              		.loc 1 95 3 is_stmt 0 discriminator 3 view .LVU116
 320 0108 F5D1     		bne	.L25
  97:hal/comm/CAN.c **** 
  98:hal/comm/CAN.c **** 		CanRxWritePtr = i;
 321              		.loc 1 98 3 is_stmt 1 view .LVU117
 322              		.loc 1 98 17 is_stmt 0 view .LVU118
 323 010a 2560     		str	r5, [r4]
  99:hal/comm/CAN.c **** 	}
 100:hal/comm/CAN.c **** 	else
 101:hal/comm/CAN.c **** 	{
 102:hal/comm/CAN.c **** 		// release mailbox if no space left
 103:hal/comm/CAN.c **** 		CAN_FIFORelease(CAN_FIFO1);
 104:hal/comm/CAN.c **** 	}
 105:hal/comm/CAN.c **** }
 324              		.loc 1 105 1 view .LVU119
 325 010c 07B0     		add	sp, sp, #28
 326              	.LCFI8:
 327              		.cfi_remember_state
 328              		.cfi_def_cfa_offset 12
 329              		@ sp needed
 330 010e 30BD     		pop	{r4, r5, pc}
 331              	.LVL17:
 332              	.L31:
 333              	.LCFI9:
 334              		.cfi_restore_state
  80:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id=CanMessage.ExtId;
 335              		.loc 1 80 4 is_stmt 1 view .LVU120
  80:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id=CanMessage.ExtId;
 336              		.loc 1 80 35 is_stmt 0 view .LVU121
 337 0110 0121     		movs	r1, #1
  80:hal/comm/CAN.c **** 			CanRxBuffer[CanRxWritePtr].Id=CanMessage.ExtId;
 338              		.loc 1 80 30 view .LVU122
 339 0112 2368     		ldr	r3, [r4]
  81:hal/comm/CAN.c **** 		}
 340              		.loc 1 81 44 view .LVU123
 341 0114 029A     		ldr	r2, [sp, #8]
 342 0116 D4E7     		b	.L30
 343              	.L20:
 103:hal/comm/CAN.c **** 	}
 344              		.loc 1 103 3 is_stmt 1 view .LVU124
 345              		.loc 1 105 1 is_stmt 0 view .LVU125
 346 0118 07B0     		add	sp, sp, #28
 347              	.LCFI10:
 348              		.cfi_def_cfa_offset 12
 349              		@ sp needed
 350 011a BDE83040 		pop	{r4, r5, lr}
 351              	.LCFI11:
 352              		.cfi_restore 14
 353              		.cfi_restore 5
 354              		.cfi_restore 4
 355              		.cfi_def_cfa_offset 0
 356              	.LVL18:
 103:hal/comm/CAN.c **** 	}
 357              		.loc 1 103 3 view .LVU126
 358 011e FFF7FEBF 		b	CAN_FIFORelease
 359              	.LVL19:
 360              	.L33:
 103:hal/comm/CAN.c **** 	}
 361              		.loc 1 103 3 view .LVU127
 362 0122 00BF     		.align	2
 363              	.L32:
 364 0124 00000000 		.word	.LANCHOR0
 365              		.cfi_endproc
 366              	.LFE1:
 368              		.align	1
 369              		.p2align 2,,3
 370              		.global	can_TxIrq
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 375              	can_TxIrq:
 376              	.LFB2:
 106:hal/comm/CAN.c **** 
 107:hal/comm/CAN.c **** 
 108:hal/comm/CAN.c **** /* CAN-Transmit-Interrupt Handler */
 109:hal/comm/CAN.c **** void can_TxIrq()
 110:hal/comm/CAN.c **** {
 377              		.loc 1 110 1 is_stmt 1 view -0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 24
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 111:hal/comm/CAN.c **** 	CanTxMsg CanMessage;
 381              		.loc 1 111 2 view .LVU129
 112:hal/comm/CAN.c **** 	int i;
 382              		.loc 1 112 2 view .LVU130
 113:hal/comm/CAN.c **** 
 114:hal/comm/CAN.c **** 	if(CanTxReadPtr==CanTxWritePtr)  // buffer empty?
 383              		.loc 1 114 2 view .LVU131
 384              		.loc 1 114 17 is_stmt 0 view .LVU132
 385 0128 3149     		ldr	r1, .L47
 386 012a D1F88820 		ldr	r2, [r1, #136]
 387 012e D1F88C30 		ldr	r3, [r1, #140]
 388              		.loc 1 114 4 view .LVU133
 389 0132 9A42     		cmp	r2, r3
 390 0134 57D0     		beq	.L45
 115:hal/comm/CAN.c **** 	{
 116:hal/comm/CAN.c **** 		CAN_ITConfig(CAN_IT_TME, DISABLE);
 117:hal/comm/CAN.c **** 	}
 118:hal/comm/CAN.c **** 	else
 119:hal/comm/CAN.c **** 	{
 120:hal/comm/CAN.c **** 		if(CanTxBuffer[CanTxReadPtr].Ext)
 391              		.loc 1 120 3 is_stmt 1 view .LVU134
 110:hal/comm/CAN.c **** 	CanTxMsg CanMessage;
 392              		.loc 1 110 1 is_stmt 0 view .LVU135
 393 0136 00B5     		push	{lr}
 394              	.LCFI12:
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 14, -4
 397              		.loc 1 120 31 view .LVU136
 398 0138 D1F88830 		ldr	r3, [r1, #136]
 110:hal/comm/CAN.c **** 	CanTxMsg CanMessage;
 399              		.loc 1 110 1 view .LVU137
 400 013c 87B0     		sub	sp, sp, #28
 401              	.LCFI13:
 402              		.cfi_def_cfa_offset 32
 403              		.loc 1 120 31 view .LVU138
 404 013e 01EB0313 		add	r3, r1, r3, lsl #4
 405 0142 93F89130 		ldrb	r3, [r3, #145]	@ zero_extendqisi2
 406              		.loc 1 120 5 view .LVU139
 407 0146 03F0FF02 		and	r2, r3, #255
 408 014a 002B     		cmp	r3, #0
 409 014c 3ED1     		bne	.L46
 121:hal/comm/CAN.c **** 		{
 122:hal/comm/CAN.c **** 			CanMessage.IDE = CAN_ID_EXT;
 123:hal/comm/CAN.c **** 			CanMessage.StdId = 0;
 124:hal/comm/CAN.c **** 			CanMessage.ExtId = CanTxBuffer[CanTxReadPtr].Id;
 125:hal/comm/CAN.c **** 		}
 126:hal/comm/CAN.c **** 		else
 127:hal/comm/CAN.c **** 		{
 128:hal/comm/CAN.c **** 			CanMessage.IDE = CAN_ID_STD;
 410              		.loc 1 128 4 is_stmt 1 view .LVU140
 129:hal/comm/CAN.c **** 			CanMessage.StdId = CanTxBuffer[CanTxReadPtr].Id;
 411              		.loc 1 129 48 is_stmt 0 view .LVU141
 412 014e D1F88830 		ldr	r3, [r1, #136]
 128:hal/comm/CAN.c **** 			CanMessage.StdId = CanTxBuffer[CanTxReadPtr].Id;
 413              		.loc 1 128 19 view .LVU142
 414 0152 8DF80C20 		strb	r2, [sp, #12]
 415              		.loc 1 129 4 is_stmt 1 view .LVU143
 416              		.loc 1 129 48 is_stmt 0 view .LVU144
 417 0156 01EB0313 		add	r3, r1, r3, lsl #4
 418 015a D3F89430 		ldr	r3, [r3, #148]
 419              		.loc 1 129 21 view .LVU145
 420 015e CDE90132 		strd	r3, r2, [sp, #4]
 130:hal/comm/CAN.c **** 			CanMessage.ExtId = 0;
 421              		.loc 1 130 4 is_stmt 1 view .LVU146
 422              	.L37:
 131:hal/comm/CAN.c **** 		}
 132:hal/comm/CAN.c **** 
 133:hal/comm/CAN.c **** 		if(CanTxBuffer[CanTxReadPtr].Rtr)
 423              		.loc 1 133 3 view .LVU147
 424              		.loc 1 133 31 is_stmt 0 view .LVU148
 425 0162 D1F88830 		ldr	r3, [r1, #136]
 134:hal/comm/CAN.c **** 			CanMessage.RTR = CAN_RTR_REMOTE;
 135:hal/comm/CAN.c **** 		else
 136:hal/comm/CAN.c **** 			CanMessage.RTR = CAN_RTR_DATA;
 137:hal/comm/CAN.c **** 
 138:hal/comm/CAN.c **** 		CanMessage.DLC = CanTxBuffer[CanTxReadPtr].Dlc;
 139:hal/comm/CAN.c **** 		for(i=0; i<8; i++)
 426              		.loc 1 139 8 view .LVU149
 427 0166 0022     		movs	r2, #0
 133:hal/comm/CAN.c **** 			CanMessage.RTR = CAN_RTR_REMOTE;
 428              		.loc 1 133 31 view .LVU150
 429 0168 01EB0313 		add	r3, r1, r3, lsl #4
 430 016c 93F89230 		ldrb	r3, [r3, #146]	@ zero_extendqisi2
 138:hal/comm/CAN.c **** 		for(i=0; i<8; i++)
 431              		.loc 1 138 45 view .LVU151
 432 0170 D1F88800 		ldr	r0, [r1, #136]
 134:hal/comm/CAN.c **** 			CanMessage.RTR = CAN_RTR_REMOTE;
 433              		.loc 1 134 19 view .LVU152
 434 0174 13F0FF03 		ands	r3, r3, #255
 435 0178 18BF     		it	ne
 436 017a 0223     		movne	r3, #2
 138:hal/comm/CAN.c **** 		for(i=0; i<8; i++)
 437              		.loc 1 138 45 view .LVU153
 438 017c 01EB0010 		add	r0, r1, r0, lsl #4
 439 0180 90F890C0 		ldrb	ip, [r0, #144]	@ zero_extendqisi2
 440 0184 8DF80D30 		strb	r3, [sp, #13]
 138:hal/comm/CAN.c **** 		for(i=0; i<8; i++)
 441              		.loc 1 138 3 is_stmt 1 view .LVU154
 442              		.loc 1 139 3 view .LVU155
 443              	.LVL20:
 444              		.loc 1 139 12 view .LVU156
 445 0188 0DF10F00 		add	r0, sp, #15
 138:hal/comm/CAN.c **** 		for(i=0; i<8; i++)
 446              		.loc 1 138 18 is_stmt 0 view .LVU157
 447 018c 8DF80EC0 		strb	ip, [sp, #14]
 448              	.LVL21:
 449              	.L39:
 140:hal/comm/CAN.c **** 			CanMessage.Data[i]=CanTxBuffer[CanTxReadPtr].Data[i];
 450              		.loc 1 140 4 is_stmt 1 discriminator 3 view .LVU158
 451              		.loc 1 140 53 is_stmt 0 discriminator 3 view .LVU159
 452 0190 D1F88830 		ldr	r3, [r1, #136]
 453 0194 01EB0313 		add	r3, r1, r3, lsl #4
 454 0198 1344     		add	r3, r3, r2
 455 019a 93F89830 		ldrb	r3, [r3, #152]	@ zero_extendqisi2
 139:hal/comm/CAN.c **** 			CanMessage.Data[i]=CanTxBuffer[CanTxReadPtr].Data[i];
 456              		.loc 1 139 18 discriminator 3 view .LVU160
 457 019e 0132     		adds	r2, r2, #1
 458              	.LVL22:
 139:hal/comm/CAN.c **** 			CanMessage.Data[i]=CanTxBuffer[CanTxReadPtr].Data[i];
 459              		.loc 1 139 3 discriminator 3 view .LVU161
 460 01a0 082A     		cmp	r2, #8
 461              		.loc 1 140 22 discriminator 3 view .LVU162
 462 01a2 00F8013B 		strb	r3, [r0], #1
 139:hal/comm/CAN.c **** 			CanMessage.Data[i]=CanTxBuffer[CanTxReadPtr].Data[i];
 463              		.loc 1 139 17 is_stmt 1 discriminator 3 view .LVU163
 464              	.LVL23:
 139:hal/comm/CAN.c **** 			CanMessage.Data[i]=CanTxBuffer[CanTxReadPtr].Data[i];
 465              		.loc 1 139 12 discriminator 3 view .LVU164
 139:hal/comm/CAN.c **** 			CanMessage.Data[i]=CanTxBuffer[CanTxReadPtr].Data[i];
 466              		.loc 1 139 3 is_stmt 0 discriminator 3 view .LVU165
 467 01a6 F3D1     		bne	.L39
 141:hal/comm/CAN.c **** 
 142:hal/comm/CAN.c **** 		CanTxReadPtr++;
 468              		.loc 1 142 3 is_stmt 1 view .LVU166
 469              		.loc 1 142 15 is_stmt 0 view .LVU167
 470 01a8 D1F88830 		ldr	r3, [r1, #136]
 143:hal/comm/CAN.c **** 		if(CanTxReadPtr == CAN_TX_BUF_SIZE)
 144:hal/comm/CAN.c **** 			CanTxReadPtr=0;
 145:hal/comm/CAN.c **** 
 146:hal/comm/CAN.c **** 		CAN_Transmit(&CanMessage);
 471              		.loc 1 146 3 view .LVU168
 472 01ac 01A8     		add	r0, sp, #4
 142:hal/comm/CAN.c **** 		if(CanTxReadPtr == CAN_TX_BUF_SIZE)
 473              		.loc 1 142 15 view .LVU169
 474 01ae 0133     		adds	r3, r3, #1
 475 01b0 C1F88830 		str	r3, [r1, #136]
 143:hal/comm/CAN.c **** 		if(CanTxReadPtr == CAN_TX_BUF_SIZE)
 476              		.loc 1 143 3 is_stmt 1 view .LVU170
 143:hal/comm/CAN.c **** 		if(CanTxReadPtr == CAN_TX_BUF_SIZE)
 477              		.loc 1 143 19 is_stmt 0 view .LVU171
 478 01b4 D1F88830 		ldr	r3, [r1, #136]
 143:hal/comm/CAN.c **** 		if(CanTxReadPtr == CAN_TX_BUF_SIZE)
 479              		.loc 1 143 5 view .LVU172
 480 01b8 082B     		cmp	r3, #8
 144:hal/comm/CAN.c **** 
 481              		.loc 1 144 4 is_stmt 1 view .LVU173
 482              		.loc 1 146 3 view .LVU174
 144:hal/comm/CAN.c **** 
 483              		.loc 1 144 16 is_stmt 0 view .LVU175
 484 01ba 04BF     		itt	eq
 485 01bc 0023     		moveq	r3, #0
 486 01be C1F88830 		streq	r3, [r1, #136]
 487              		.loc 1 146 3 view .LVU176
 488 01c2 FFF7FEFF 		bl	CAN_Transmit
 489              	.LVL24:
 147:hal/comm/CAN.c **** 	}
 148:hal/comm/CAN.c **** }
 490              		.loc 1 148 1 view .LVU177
 491 01c6 07B0     		add	sp, sp, #28
 492              	.LCFI14:
 493              		.cfi_remember_state
 494              		.cfi_def_cfa_offset 4
 495              		@ sp needed
 496 01c8 5DF804FB 		ldr	pc, [sp], #4
 497              	.L46:
 498              	.LCFI15:
 499              		.cfi_restore_state
 122:hal/comm/CAN.c **** 			CanMessage.StdId = 0;
 500              		.loc 1 122 4 is_stmt 1 view .LVU178
 122:hal/comm/CAN.c **** 			CanMessage.StdId = 0;
 501              		.loc 1 122 19 is_stmt 0 view .LVU179
 502 01cc 0420     		movs	r0, #4
 123:hal/comm/CAN.c **** 			CanMessage.ExtId = CanTxBuffer[CanTxReadPtr].Id;
 503              		.loc 1 123 21 view .LVU180
 504 01ce 0022     		movs	r2, #0
 124:hal/comm/CAN.c **** 		}
 505              		.loc 1 124 48 view .LVU181
 506 01d0 D1F88830 		ldr	r3, [r1, #136]
 122:hal/comm/CAN.c **** 			CanMessage.StdId = 0;
 507              		.loc 1 122 19 view .LVU182
 508 01d4 8DF80C00 		strb	r0, [sp, #12]
 123:hal/comm/CAN.c **** 			CanMessage.ExtId = CanTxBuffer[CanTxReadPtr].Id;
 509              		.loc 1 123 4 is_stmt 1 view .LVU183
 124:hal/comm/CAN.c **** 		}
 510              		.loc 1 124 48 is_stmt 0 view .LVU184
 511 01d8 01EB0313 		add	r3, r1, r3, lsl #4
 512 01dc D3F89430 		ldr	r3, [r3, #148]
 123:hal/comm/CAN.c **** 			CanMessage.ExtId = CanTxBuffer[CanTxReadPtr].Id;
 513              		.loc 1 123 21 view .LVU185
 514 01e0 0192     		str	r2, [sp, #4]
 124:hal/comm/CAN.c **** 		}
 515              		.loc 1 124 4 is_stmt 1 view .LVU186
 124:hal/comm/CAN.c **** 		}
 516              		.loc 1 124 21 is_stmt 0 view .LVU187
 517 01e2 0293     		str	r3, [sp, #8]
 518 01e4 BDE7     		b	.L37
 519              	.L45:
 520              	.LCFI16:
 521              		.cfi_def_cfa_offset 0
 522              		.cfi_restore 14
 116:hal/comm/CAN.c **** 	}
 523              		.loc 1 116 3 is_stmt 1 view .LVU188
 524 01e6 0021     		movs	r1, #0
 525 01e8 0120     		movs	r0, #1
 526 01ea FFF7FEBF 		b	CAN_ITConfig
 527              	.LVL25:
 528              	.L48:
 529 01ee 00BF     		.align	2
 530              	.L47:
 531 01f0 00000000 		.word	.LANCHOR0
 532              		.cfi_endproc
 533              	.LFE2:
 535              		.align	1
 536              		.p2align 2,,3
 537              		.global	can_init
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	can_init:
 543              	.LVL26:
 544              	.LFB3:
 149:hal/comm/CAN.c **** 
 150:hal/comm/CAN.c **** /* initialize can interface 									*/
 151:hal/comm/CAN.c **** /* baudrate: CAN-Bitrate  1  2  3  4   5   6   7   8			*/
 152:hal/comm/CAN.c **** /*                        10 20 50 100 125 250 500 1000kBit/s 	*/
 153:hal/comm/CAN.c **** void can_init(int Bitrate, int ReceiveID, int SecondaryID)
 154:hal/comm/CAN.c **** {
 545              		.loc 1 154 1 view -0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 40
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 155:hal/comm/CAN.c **** 	CAN_InitTypeDef CANInit;
 549              		.loc 1 155 2 view .LVU190
 156:hal/comm/CAN.c **** 	CAN_FilterInitTypeDef CANFilterInit;
 550              		.loc 1 156 2 view .LVU191
 157:hal/comm/CAN.c **** 	GPIO_InitTypeDef GPIOInit;
 551              		.loc 1 157 2 view .LVU192
 158:hal/comm/CAN.c **** 	NVIC_InitTypeDef NVICInit;
 552              		.loc 1 158 2 view .LVU193
 159:hal/comm/CAN.c **** 
 160:hal/comm/CAN.c **** 	switch(Bitrate)
 553              		.loc 1 160 2 view .LVU194
 154:hal/comm/CAN.c **** 	CAN_InitTypeDef CANInit;
 554              		.loc 1 154 1 is_stmt 0 view .LVU195
 555 01f4 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 556              	.LCFI17:
 557              		.cfi_def_cfa_offset 28
 558              		.cfi_offset 4, -28
 559              		.cfi_offset 5, -24
 560              		.cfi_offset 6, -20
 561              		.cfi_offset 7, -16
 562              		.cfi_offset 8, -12
 563              		.cfi_offset 9, -8
 564              		.cfi_offset 14, -4
 565              		.loc 1 160 2 view .LVU196
 566 01f8 0138     		subs	r0, r0, #1
 567              	.LVL27:
 154:hal/comm/CAN.c **** 	CAN_InitTypeDef CANInit;
 568              		.loc 1 154 1 view .LVU197
 569 01fa 0C46     		mov	r4, r1
 570 01fc 1646     		mov	r6, r2
 161:hal/comm/CAN.c **** 	{
 162:hal/comm/CAN.c **** 		case 8:     // 1000kBit/s: 18 Time Quanta, Sampling Point 72.2%
 163:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 2;
 164:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 165:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 166:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 167:hal/comm/CAN.c **** 			break;
 168:hal/comm/CAN.c **** 		case 7:     // 500kBit/s: 18 Time Quanta, Sampling Point 72.2%
 169:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 4;
 170:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 171:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 172:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 173:hal/comm/CAN.c **** 			break;
 174:hal/comm/CAN.c **** 		case 6:     // 250kBit/s: 18 Time Quanta, Sampling Point 72.2%
 175:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 8;
 176:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 177:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 178:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 571              		.loc 1 178 20 view .LVU198
 572 01fe 0021     		movs	r1, #0
 573              	.LVL28:
 176:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 574              		.loc 1 176 20 view .LVU199
 575 0200 4FF44372 		mov	r2, #780
 576              	.LVL29:
 154:hal/comm/CAN.c **** 	CAN_InitTypeDef CANInit;
 577              		.loc 1 154 1 view .LVU200
 578 0204 8BB0     		sub	sp, sp, #44
 579              	.LCFI18:
 580              		.cfi_def_cfa_offset 72
 160:hal/comm/CAN.c **** 	{
 581              		.loc 1 160 2 view .LVU201
 582 0206 0728     		cmp	r0, #7
 583 0208 09D8     		bhi	.L50
 584 020a DFE810F0 		tbh	[pc, r0, lsl #1]
 585              	.L52:
 586 020e 0101     		.2byte	(.L58-.L52)/2
 587 0210 0901     		.2byte	(.L57-.L52)/2
 588 0212 1101     		.2byte	(.L56-.L52)/2
 589 0214 1901     		.2byte	(.L55-.L52)/2
 590 0216 2101     		.2byte	(.L54-.L52)/2
 591 0218 0800     		.2byte	(.L50-.L52)/2
 592 021a 2901     		.2byte	(.L53-.L52)/2
 593 021c F900     		.2byte	(.L51-.L52)/2
 594              		.p2align 1
 595              	.L50:
 175:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 596              		.loc 1 175 4 is_stmt 1 view .LVU202
 176:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 597              		.loc 1 176 4 view .LVU203
 177:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 598              		.loc 1 177 4 view .LVU204
 599              		.loc 1 178 4 view .LVU205
 175:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 600              		.loc 1 175 26 is_stmt 0 view .LVU206
 601 021e 0823     		movs	r3, #8
 602              		.loc 1 178 20 view .LVU207
 603 0220 8DF81310 		strb	r1, [sp, #19]
 176:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 604              		.loc 1 176 20 view .LVU208
 605 0224 ADF81420 		strh	r2, [sp, #20]	@ movhi
 175:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 606              		.loc 1 175 26 view .LVU209
 607 0228 ADF81630 		strh	r3, [sp, #22]	@ movhi
 179:hal/comm/CAN.c **** 			break;
 608              		.loc 1 179 4 is_stmt 1 view .LVU210
 609              	.L59:
 180:hal/comm/CAN.c **** 		case 5:     // 125kBit/s: 18 Time Quanta, Sampling Point 72.2%
 181:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 16;
 182:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 183:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 184:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 185:hal/comm/CAN.c **** 			break;
 186:hal/comm/CAN.c **** 		case 4:     // 100kBit/s: 18 Time Quanta, Sampling Point 72.2%
 187:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 20;
 188:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 189:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 190:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 191:hal/comm/CAN.c **** 			break;
 192:hal/comm/CAN.c **** 		case 3:     // 50kBit/s: 18 Time Quanta, Sampling Point 72.2%
 193:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 40;
 194:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 195:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 196:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 197:hal/comm/CAN.c **** 			break;
 198:hal/comm/CAN.c **** 		case 2:     // 20kBit/s: 18 Time Quanta, Sampling Point 72.2%
 199:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 100;
 200:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 201:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 202:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 203:hal/comm/CAN.c **** 			break;
 204:hal/comm/CAN.c **** 		case 1:     // 10kBit/s: 18 Time Quanta, Sampling Point 72.27%
 205:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 200;
 206:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 207:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 208:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 209:hal/comm/CAN.c **** 			break;
 210:hal/comm/CAN.c **** 		default:    // 250kBit/s: 18 Time Quanta, Sampling Point 72.2%
 211:hal/comm/CAN.c **** 			CANInit.CAN_Prescaler = 8;
 212:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 213:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 214:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 215:hal/comm/CAN.c **** 			break;
 216:hal/comm/CAN.c **** 	}
 217:hal/comm/CAN.c **** 
 218:hal/comm/CAN.c **** 	// enable CAN and AFIO clock
 219:hal/comm/CAN.c **** 	CAN_DeInit();
 610              		.loc 1 219 2 view .LVU211
 611 022c FFF7FEFF 		bl	CAN_DeInit
 612              	.LVL30:
 220:hal/comm/CAN.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN, ENABLE);
 613              		.loc 1 220 2 view .LVU212
 614 0230 0121     		movs	r1, #1
 615 0232 4FF00070 		mov	r0, #33554432
 616 0236 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 617              	.LVL31:
 221:hal/comm/CAN.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 618              		.loc 1 221 2 view .LVU213
 619 023a 0121     		movs	r1, #1
 222:hal/comm/CAN.c **** 
 223:hal/comm/CAN.c **** #if defined(USE_CAN_PB8_PB9)
 224:hal/comm/CAN.c **** 	// connect CAN-Pins (PB8 and PB9)
 225:hal/comm/CAN.c **** 	// activate GPIOB
 226:hal/comm/CAN.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 227:hal/comm/CAN.c **** 	RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 228:hal/comm/CAN.c **** 	GPIO_PinRemapConfig(GPIO_Remap1_CAN, ENABLE);
 229:hal/comm/CAN.c **** 
 230:hal/comm/CAN.c **** 	GPIOInit.GPIO_Speed = GPIO_Speed_50MHz;
 231:hal/comm/CAN.c **** 	GPIOInit.GPIO_Mode = GPIO_Mode_AF_PP;
 232:hal/comm/CAN.c **** 	GPIOInit.GPIO_Pin = GPIO_Pin_9;
 233:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 234:hal/comm/CAN.c **** 
 235:hal/comm/CAN.c **** 	GPIOInit.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 236:hal/comm/CAN.c **** 	//GPIOInit.GPIO_Mode = GPIO_Mode_IPU;
 237:hal/comm/CAN.c **** 	GPIOInit.GPIO_Pin = GPIO_Pin_8;
 238:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 239:hal/comm/CAN.c **** 
 240:hal/comm/CAN.c **** #else
 241:hal/comm/CAN.c **** 	#error "CAN pins not defined!"
 242:hal/comm/CAN.c **** #endif
 243:hal/comm/CAN.c **** 
 244:hal/comm/CAN.c **** 	// initialize CAN
 245:hal/comm/CAN.c **** 	CANInit.CAN_Mode = CAN_Mode_Normal;
 246:hal/comm/CAN.c **** 	CANInit.CAN_TTCM = DISABLE;
 247:hal/comm/CAN.c **** 	CANInit.CAN_ABOM = ENABLE;
 248:hal/comm/CAN.c **** 	CANInit.CAN_AWUM = DISABLE;
 249:hal/comm/CAN.c **** 	CANInit.CAN_NART = DISABLE;
 250:hal/comm/CAN.c **** 	CANInit.CAN_RFLM = ENABLE;
 251:hal/comm/CAN.c **** 	CANInit.CAN_TXFP = ENABLE;
 252:hal/comm/CAN.c **** 	CAN_Init(&CANInit);
 253:hal/comm/CAN.c **** 
 254:hal/comm/CAN.c **** 	// configure CAN-Filter
 255:hal/comm/CAN.c **** 
 256:hal/comm/CAN.c **** 	// Filter 0 for Standard Frames with FIFO 0
 257:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterNumber = 0;
 258:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 259:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 620              		.loc 1 259 32 is_stmt 0 view .LVU214
 621 023c 0D46     		mov	r5, r1
 248:hal/comm/CAN.c **** 	CANInit.CAN_NART = DISABLE;
 622              		.loc 1 248 19 view .LVU215
 623 023e 0027     		movs	r7, #0
 221:hal/comm/CAN.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 624              		.loc 1 221 2 view .LVU216
 625 0240 0846     		mov	r0, r1
 626 0242 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 627              	.LVL32:
 226:hal/comm/CAN.c **** 	RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 628              		.loc 1 226 2 is_stmt 1 view .LVU217
 629 0246 2946     		mov	r1, r5
 630 0248 0820     		movs	r0, #8
 631 024a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 632              	.LVL33:
 227:hal/comm/CAN.c **** 	GPIO_PinRemapConfig(GPIO_Remap1_CAN, ENABLE);
 633              		.loc 1 227 2 view .LVU218
 634 024e 3946     		mov	r1, r7
 635 0250 0820     		movs	r0, #8
 636 0252 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 637              	.LVL34:
 228:hal/comm/CAN.c **** 
 638              		.loc 1 228 2 view .LVU219
 639 0256 2946     		mov	r1, r5
 640 0258 4FF4EA10 		mov	r0, #1916928
 641 025c FFF7FEFF 		bl	GPIO_PinRemapConfig
 642              	.LVL35:
 230:hal/comm/CAN.c **** 	GPIOInit.GPIO_Mode = GPIO_Mode_AF_PP;
 643              		.loc 1 230 2 view .LVU220
 231:hal/comm/CAN.c **** 	GPIOInit.GPIO_Pin = GPIO_Pin_9;
 644              		.loc 1 231 2 view .LVU221
 232:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 645              		.loc 1 232 2 view .LVU222
 232:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 646              		.loc 1 232 20 is_stmt 0 view .LVU223
 647 0260 4FF40073 		mov	r3, #512
 648 0264 ADF80430 		strh	r3, [sp, #4]	@ movhi
 230:hal/comm/CAN.c **** 	GPIOInit.GPIO_Mode = GPIO_Mode_AF_PP;
 649              		.loc 1 230 22 view .LVU224
 650 0268 41F60303 		movw	r3, #6147
 233:hal/comm/CAN.c **** 
 651              		.loc 1 233 2 view .LVU225
 652 026c 8048     		ldr	r0, .L65
 653 026e 01A9     		add	r1, sp, #4
 237:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 654              		.loc 1 237 20 view .LVU226
 655 0270 4FF48079 		mov	r9, #256
 230:hal/comm/CAN.c **** 	GPIOInit.GPIO_Mode = GPIO_Mode_AF_PP;
 656              		.loc 1 230 22 view .LVU227
 657 0274 ADF80630 		strh	r3, [sp, #6]	@ movhi
 233:hal/comm/CAN.c **** 
 658              		.loc 1 233 2 is_stmt 1 view .LVU228
 659 0278 FFF7FEFF 		bl	GPIO_Init
 660              	.LVL36:
 235:hal/comm/CAN.c **** 	//GPIOInit.GPIO_Mode = GPIO_Mode_IPU;
 661              		.loc 1 235 2 view .LVU229
 235:hal/comm/CAN.c **** 	//GPIOInit.GPIO_Mode = GPIO_Mode_IPU;
 662              		.loc 1 235 21 is_stmt 0 view .LVU230
 663 027c 0423     		movs	r3, #4
 238:hal/comm/CAN.c **** 
 664              		.loc 1 238 2 view .LVU231
 665 027e 7C48     		ldr	r0, .L65
 666 0280 01A9     		add	r1, sp, #4
 235:hal/comm/CAN.c **** 	//GPIOInit.GPIO_Mode = GPIO_Mode_IPU;
 667              		.loc 1 235 21 view .LVU232
 668 0282 8DF80730 		strb	r3, [sp, #7]
 237:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 669              		.loc 1 237 2 is_stmt 1 view .LVU233
 238:hal/comm/CAN.c **** 
 670              		.loc 1 238 2 view .LVU234
 237:hal/comm/CAN.c **** 	GPIO_Init(GPIOB, &GPIOInit);
 671              		.loc 1 237 20 is_stmt 0 view .LVU235
 672 0286 ADF80490 		strh	r9, [sp, #4]	@ movhi
 238:hal/comm/CAN.c **** 
 673              		.loc 1 238 2 view .LVU236
 674 028a FFF7FEFF 		bl	GPIO_Init
 675              	.LVL37:
 245:hal/comm/CAN.c **** 	CANInit.CAN_TTCM = DISABLE;
 676              		.loc 1 245 2 is_stmt 1 view .LVU237
 246:hal/comm/CAN.c **** 	CANInit.CAN_ABOM = ENABLE;
 677              		.loc 1 246 2 view .LVU238
 247:hal/comm/CAN.c **** 	CANInit.CAN_AWUM = DISABLE;
 678              		.loc 1 247 2 view .LVU239
 248:hal/comm/CAN.c **** 	CANInit.CAN_NART = DISABLE;
 679              		.loc 1 248 2 view .LVU240
 249:hal/comm/CAN.c **** 	CANInit.CAN_RFLM = ENABLE;
 680              		.loc 1 249 2 view .LVU241
 250:hal/comm/CAN.c **** 	CANInit.CAN_TXFP = ENABLE;
 681              		.loc 1 250 2 view .LVU242
 251:hal/comm/CAN.c **** 	CAN_Init(&CANInit);
 682              		.loc 1 251 2 view .LVU243
 250:hal/comm/CAN.c **** 	CANInit.CAN_TXFP = ENABLE;
 683              		.loc 1 250 19 is_stmt 0 view .LVU244
 684 028e 40F20113 		movw	r3, #257
 260:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID << 5;
 261:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = 0;
 262:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 685              		.loc 1 262 37 view .LVU245
 686 0292 4FF6FF78 		movw	r8, #65535
 252:hal/comm/CAN.c **** 
 687              		.loc 1 252 2 view .LVU246
 688 0296 03A8     		add	r0, sp, #12
 250:hal/comm/CAN.c **** 	CANInit.CAN_TXFP = ENABLE;
 689              		.loc 1 250 19 view .LVU247
 690 0298 ADF81030 		strh	r3, [sp, #16]	@ movhi
 246:hal/comm/CAN.c **** 	CANInit.CAN_ABOM = ENABLE;
 691              		.loc 1 246 19 view .LVU248
 692 029c ADF80C90 		strh	r9, [sp, #12]	@ movhi
 248:hal/comm/CAN.c **** 	CANInit.CAN_NART = DISABLE;
 693              		.loc 1 248 19 view .LVU249
 694 02a0 ADF80E70 		strh	r7, [sp, #14]	@ movhi
 245:hal/comm/CAN.c **** 	CANInit.CAN_TTCM = DISABLE;
 695              		.loc 1 245 19 view .LVU250
 696 02a4 8DF81270 		strb	r7, [sp, #18]
 252:hal/comm/CAN.c **** 
 697              		.loc 1 252 2 is_stmt 1 view .LVU251
 698 02a8 FFF7FEFF 		bl	CAN_Init
 699              	.LVL38:
 257:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 700              		.loc 1 257 2 view .LVU252
 258:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 701              		.loc 1 258 2 view .LVU253
 259:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID << 5;
 702              		.loc 1 259 2 view .LVU254
 260:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = 0;
 703              		.loc 1 260 45 is_stmt 0 view .LVU255
 704 02ac 6301     		lsls	r3, r4, #5
 263:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 264:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 265:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 266:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 705              		.loc 1 266 2 view .LVU256
 706 02ae 06A8     		add	r0, sp, #24
 257:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 707              		.loc 1 257 33 view .LVU257
 708 02b0 ADF81870 		strh	r7, [sp, #24]	@ movhi
 259:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID << 5;
 709              		.loc 1 259 32 view .LVU258
 710 02b4 8DF81A50 		strb	r5, [sp, #26]
 260:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = 0;
 711              		.loc 1 260 2 is_stmt 1 view .LVU259
 261:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 712              		.loc 1 261 32 is_stmt 0 view .LVU260
 713 02b8 ADF81E70 		strh	r7, [sp, #30]	@ movhi
 262:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 714              		.loc 1 262 37 view .LVU261
 715 02bc ADF82080 		strh	r8, [sp, #32]	@ movhi
 263:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 716              		.loc 1 263 36 view .LVU262
 717 02c0 ADF82280 		strh	r8, [sp, #34]	@ movhi
 264:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 718              		.loc 1 264 41 view .LVU263
 719 02c4 ADF82470 		strh	r7, [sp, #36]	@ movhi
 265:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 720              		.loc 1 265 37 view .LVU264
 721 02c8 8DF82650 		strb	r5, [sp, #38]
 260:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = 0;
 722              		.loc 1 260 33 view .LVU265
 723 02cc ADF81C30 		strh	r3, [sp, #28]	@ movhi
 261:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 724              		.loc 1 261 2 is_stmt 1 view .LVU266
 262:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 725              		.loc 1 262 2 view .LVU267
 263:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 726              		.loc 1 263 2 view .LVU268
 264:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 727              		.loc 1 264 2 view .LVU269
 265:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 728              		.loc 1 265 2 view .LVU270
 729              		.loc 1 266 2 view .LVU271
 730 02d0 FFF7FEFF 		bl	CAN_FilterInit
 731              	.LVL39:
 267:hal/comm/CAN.c **** 
 268:hal/comm/CAN.c **** 	// Filter 1 for Standard Frames with FIFO 1
 269:hal/comm/CAN.c **** 	if(SecondaryID != 0)
 732              		.loc 1 269 2 view .LVU272
 733              		.loc 1 269 4 is_stmt 0 view .LVU273
 734 02d4 002E     		cmp	r6, #0
 735 02d6 4AD1     		bne	.L64
 270:hal/comm/CAN.c **** 	{
 271:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterNumber = 1;
 272:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 273:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 274:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdHigh = SecondaryID << 5;
 275:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = 0;
 276:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 277:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 278:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO1;
 279:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterActivation = ENABLE;
 280:hal/comm/CAN.c **** 		CAN_FilterInit(&CANFilterInit);
 281:hal/comm/CAN.c **** 	}
 282:hal/comm/CAN.c **** 
 283:hal/comm/CAN.c **** 	// Filter 2 for Extended Frames with FIFO 0
 284:hal/comm/CAN.c **** 	ReceiveID <<= 3;
 736              		.loc 1 284 2 is_stmt 1 view .LVU274
 285:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterNumber = 2;
 737              		.loc 1 285 33 is_stmt 0 view .LVU275
 738 02d8 0223     		movs	r3, #2
 286:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 287:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 288:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID >> 16;
 739              		.loc 1 288 45 view .LVU276
 740 02da 44F34F32 		sbfx	r2, r4, #13, #16
 284:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterNumber = 2;
 741              		.loc 1 284 12 view .LVU277
 742 02de E400     		lsls	r4, r4, #3
 743              	.LVL40:
 285:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterNumber = 2;
 744              		.loc 1 285 2 is_stmt 1 view .LVU278
 286:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 745              		.loc 1 286 2 view .LVU279
 287:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID >> 16;
 746              		.loc 1 287 2 view .LVU280
 747              		.loc 1 288 2 view .LVU281
 289:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = ReceiveID | CAN_ID_EXT;
 748              		.loc 1 289 44 is_stmt 0 view .LVU282
 749 02e0 44F00404 		orr	r4, r4, #4
 750              	.LVL41:
 290:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 291:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 292:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 293:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 294:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 751              		.loc 1 294 2 view .LVU283
 752 02e4 06A8     		add	r0, sp, #24
 292:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 753              		.loc 1 292 41 view .LVU284
 754 02e6 ADF82460 		strh	r6, [sp, #36]	@ movhi
 287:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID >> 16;
 755              		.loc 1 287 32 view .LVU285
 756 02ea 8DF81A50 		strb	r5, [sp, #26]
 290:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 757              		.loc 1 290 37 view .LVU286
 758 02ee ADF82080 		strh	r8, [sp, #32]	@ movhi
 291:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 759              		.loc 1 291 36 view .LVU287
 760 02f2 ADF82280 		strh	r8, [sp, #34]	@ movhi
 293:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 761              		.loc 1 293 37 view .LVU288
 762 02f6 8DF82650 		strb	r5, [sp, #38]
 288:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = ReceiveID | CAN_ID_EXT;
 763              		.loc 1 288 33 view .LVU289
 764 02fa ADF81C20 		strh	r2, [sp, #28]	@ movhi
 289:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 765              		.loc 1 289 2 is_stmt 1 view .LVU290
 289:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 766              		.loc 1 289 32 is_stmt 0 view .LVU291
 767 02fe ADF81E40 		strh	r4, [sp, #30]	@ movhi
 290:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 768              		.loc 1 290 2 is_stmt 1 view .LVU292
 291:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 769              		.loc 1 291 2 view .LVU293
 292:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 770              		.loc 1 292 2 view .LVU294
 293:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 771              		.loc 1 293 2 view .LVU295
 772              		.loc 1 294 2 view .LVU296
 285:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 773              		.loc 1 285 33 is_stmt 0 view .LVU297
 774 0302 ADF81830 		strh	r3, [sp, #24]	@ movhi
 775              		.loc 1 294 2 view .LVU298
 776 0306 FFF7FEFF 		bl	CAN_FilterInit
 777              	.LVL42:
 295:hal/comm/CAN.c **** 
 296:hal/comm/CAN.c **** 	// Filter 3 for Extended Frames with FIFO 1
 297:hal/comm/CAN.c **** 	if(SecondaryID > 0)
 778              		.loc 1 297 2 is_stmt 1 view .LVU299
 779              	.L61:
 298:hal/comm/CAN.c **** 	{
 299:hal/comm/CAN.c **** 		SecondaryID <<= 3;
 300:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterNumber = 3;
 301:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 302:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 303:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdHigh = SecondaryID >> 16;
 304:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = SecondaryID | CAN_ID_EXT;
 305:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 306:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 307:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO1;
 308:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterActivation = ENABLE;
 309:hal/comm/CAN.c **** 		CAN_FilterInit(&CANFilterInit);
 310:hal/comm/CAN.c **** 	}
 311:hal/comm/CAN.c **** 
 312:hal/comm/CAN.c **** 	// activate interrupt for CAN RX FIFO 0
 313:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;
 780              		.loc 1 313 2 view .LVU300
 314:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 315:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 316:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 781              		.loc 1 316 30 is_stmt 0 view .LVU301
 782 030a 0124     		movs	r4, #1
 314:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 783              		.loc 1 314 45 view .LVU302
 784 030c 0726     		movs	r6, #7
 315:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 785              		.loc 1 315 38 view .LVU303
 786 030e 0025     		movs	r5, #0
 313:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 787              		.loc 1 313 27 view .LVU304
 788 0310 1423     		movs	r3, #20
 317:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 789              		.loc 1 317 2 view .LVU305
 790 0312 02A8     		add	r0, sp, #8
 313:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 791              		.loc 1 313 27 view .LVU306
 792 0314 8DF80830 		strb	r3, [sp, #8]
 314:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 793              		.loc 1 314 2 is_stmt 1 view .LVU307
 315:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 794              		.loc 1 315 2 view .LVU308
 316:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 795              		.loc 1 316 2 view .LVU309
 796              		.loc 1 317 2 view .LVU310
 316:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 797              		.loc 1 316 30 is_stmt 0 view .LVU311
 798 0318 8DF80B40 		strb	r4, [sp, #11]
 314:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 799              		.loc 1 314 45 view .LVU312
 800 031c 8DF80960 		strb	r6, [sp, #9]
 315:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 801              		.loc 1 315 38 view .LVU313
 802 0320 8DF80A50 		strb	r5, [sp, #10]
 803              		.loc 1 317 2 view .LVU314
 804 0324 FFF7FEFF 		bl	NVIC_Init
 805              	.LVL43:
 318:hal/comm/CAN.c **** 
 319:hal/comm/CAN.c **** 	// activate interrupt for CAN RX FIFO 1
 320:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannel = CAN_RX1_IRQChannel;
 806              		.loc 1 320 2 is_stmt 1 view .LVU315
 807              		.loc 1 320 27 is_stmt 0 view .LVU316
 808 0328 1523     		movs	r3, #21
 321:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 322:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 323:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 324:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 809              		.loc 1 324 2 view .LVU317
 810 032a 02A8     		add	r0, sp, #8
 320:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 811              		.loc 1 320 27 view .LVU318
 812 032c 8DF80830 		strb	r3, [sp, #8]
 321:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 813              		.loc 1 321 2 is_stmt 1 view .LVU319
 322:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 814              		.loc 1 322 2 view .LVU320
 323:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 815              		.loc 1 323 2 view .LVU321
 816              		.loc 1 324 2 view .LVU322
 321:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 817              		.loc 1 321 45 is_stmt 0 view .LVU323
 818 0330 8DF80960 		strb	r6, [sp, #9]
 322:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 819              		.loc 1 322 38 view .LVU324
 820 0334 8DF80A50 		strb	r5, [sp, #10]
 323:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 821              		.loc 1 323 30 view .LVU325
 822 0338 8DF80B40 		strb	r4, [sp, #11]
 823              		.loc 1 324 2 view .LVU326
 824 033c FFF7FEFF 		bl	NVIC_Init
 825              	.LVL44:
 325:hal/comm/CAN.c **** 
 326:hal/comm/CAN.c **** 	// activate interrupt for CAN TX Mailbox
 327:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannel = USB_HP_CAN_TX_IRQChannel;
 826              		.loc 1 327 2 is_stmt 1 view .LVU327
 827              		.loc 1 327 27 is_stmt 0 view .LVU328
 828 0340 1323     		movs	r3, #19
 328:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 329:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 330:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 331:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 829              		.loc 1 331 2 view .LVU329
 830 0342 02A8     		add	r0, sp, #8
 327:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 831              		.loc 1 327 27 view .LVU330
 832 0344 8DF80830 		strb	r3, [sp, #8]
 328:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelPreemptionPriority = CAN_INTR_PRI;
 833              		.loc 1 328 2 is_stmt 1 view .LVU331
 329:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 834              		.loc 1 329 2 view .LVU332
 330:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 835              		.loc 1 330 2 view .LVU333
 836              		.loc 1 331 2 view .LVU334
 328:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelSubPriority = 0;
 837              		.loc 1 328 45 is_stmt 0 view .LVU335
 838 0348 8DF80960 		strb	r6, [sp, #9]
 329:hal/comm/CAN.c **** 	NVICInit.NVIC_IRQChannelCmd = ENABLE;
 839              		.loc 1 329 38 view .LVU336
 840 034c 8DF80A50 		strb	r5, [sp, #10]
 330:hal/comm/CAN.c **** 	NVIC_Init(&NVICInit);
 841              		.loc 1 330 30 view .LVU337
 842 0350 8DF80B40 		strb	r4, [sp, #11]
 843              		.loc 1 331 2 view .LVU338
 844 0354 FFF7FEFF 		bl	NVIC_Init
 845              	.LVL45:
 332:hal/comm/CAN.c **** 
 333:hal/comm/CAN.c **** 	// configure CAN interrupts
 334:hal/comm/CAN.c **** 	// (enable only receive interrupts here, send interrupts later)
 335:hal/comm/CAN.c **** 	CAN_ITConfig(CAN_IT_FMP0, ENABLE);
 846              		.loc 1 335 2 is_stmt 1 view .LVU339
 847 0358 2146     		mov	r1, r4
 848 035a 0220     		movs	r0, #2
 849 035c FFF7FEFF 		bl	CAN_ITConfig
 850              	.LVL46:
 336:hal/comm/CAN.c **** 	CAN_ITConfig(CAN_IT_FMP1, ENABLE);
 851              		.loc 1 336 2 view .LVU340
 852 0360 2146     		mov	r1, r4
 853 0362 1020     		movs	r0, #16
 854 0364 FFF7FEFF 		bl	CAN_ITConfig
 855              	.LVL47:
 337:hal/comm/CAN.c **** }
 856              		.loc 1 337 1 is_stmt 0 view .LVU341
 857 0368 0BB0     		add	sp, sp, #44
 858              	.LCFI19:
 859              		.cfi_remember_state
 860              		.cfi_def_cfa_offset 28
 861              		@ sp needed
 862 036a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 863              	.LVL48:
 864              	.L64:
 865              	.LCFI20:
 866              		.cfi_restore_state
 271:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 867              		.loc 1 271 3 is_stmt 1 view .LVU342
 272:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 868              		.loc 1 272 3 view .LVU343
 273:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdHigh = SecondaryID << 5;
 869              		.loc 1 273 3 view .LVU344
 274:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = 0;
 870              		.loc 1 274 48 is_stmt 0 view .LVU345
 871 036e 7301     		lsls	r3, r6, #5
 280:hal/comm/CAN.c **** 	}
 872              		.loc 1 280 3 view .LVU346
 873 0370 06A8     		add	r0, sp, #24
 274:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = 0;
 874              		.loc 1 274 34 view .LVU347
 875 0372 ADF81C30 		strh	r3, [sp, #28]	@ movhi
 271:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 876              		.loc 1 271 34 view .LVU348
 877 0376 ADF81850 		strh	r5, [sp, #24]	@ movhi
 273:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdHigh = SecondaryID << 5;
 878              		.loc 1 273 33 view .LVU349
 879 037a 8DF81A50 		strb	r5, [sp, #26]
 274:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = 0;
 880              		.loc 1 274 3 is_stmt 1 view .LVU350
 275:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 881              		.loc 1 275 3 view .LVU351
 276:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 882              		.loc 1 276 3 view .LVU352
 277:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO1;
 883              		.loc 1 277 3 view .LVU353
 278:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterActivation = ENABLE;
 884              		.loc 1 278 3 view .LVU354
 279:hal/comm/CAN.c **** 		CAN_FilterInit(&CANFilterInit);
 885              		.loc 1 279 3 view .LVU355
 280:hal/comm/CAN.c **** 	}
 886              		.loc 1 280 3 view .LVU356
 275:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 887              		.loc 1 275 33 is_stmt 0 view .LVU357
 888 037e ADF81E70 		strh	r7, [sp, #30]	@ movhi
 276:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 889              		.loc 1 276 38 view .LVU358
 890 0382 ADF82080 		strh	r8, [sp, #32]	@ movhi
 277:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO1;
 891              		.loc 1 277 37 view .LVU359
 892 0386 ADF82280 		strh	r8, [sp, #34]	@ movhi
 278:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterActivation = ENABLE;
 893              		.loc 1 278 42 view .LVU360
 894 038a ADF82450 		strh	r5, [sp, #36]	@ movhi
 279:hal/comm/CAN.c **** 		CAN_FilterInit(&CANFilterInit);
 895              		.loc 1 279 38 view .LVU361
 896 038e 8DF82650 		strb	r5, [sp, #38]
 280:hal/comm/CAN.c **** 	}
 897              		.loc 1 280 3 view .LVU362
 898 0392 FFF7FEFF 		bl	CAN_FilterInit
 899              	.LVL49:
 284:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterNumber = 2;
 900              		.loc 1 284 2 is_stmt 1 view .LVU363
 285:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 901              		.loc 1 285 33 is_stmt 0 view .LVU364
 902 0396 0223     		movs	r3, #2
 903 0398 ADF81830 		strh	r3, [sp, #24]	@ movhi
 284:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterNumber = 2;
 904              		.loc 1 284 12 view .LVU365
 905 039c E300     		lsls	r3, r4, #3
 906              	.LVL50:
 285:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 907              		.loc 1 285 2 is_stmt 1 view .LVU366
 286:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 908              		.loc 1 286 2 view .LVU367
 287:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID >> 16;
 909              		.loc 1 287 2 view .LVU368
 288:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = ReceiveID | CAN_ID_EXT;
 910              		.loc 1 288 2 view .LVU369
 289:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 911              		.loc 1 289 44 is_stmt 0 view .LVU370
 912 039e 43F00403 		orr	r3, r3, #4
 913              	.LVL51:
 288:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = ReceiveID | CAN_ID_EXT;
 914              		.loc 1 288 45 view .LVU371
 915 03a2 44F34F34 		sbfx	r4, r4, #13, #16
 916              	.LVL52:
 294:hal/comm/CAN.c **** 
 917              		.loc 1 294 2 view .LVU372
 918 03a6 06A8     		add	r0, sp, #24
 292:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 919              		.loc 1 292 41 view .LVU373
 920 03a8 ADF82470 		strh	r7, [sp, #36]	@ movhi
 287:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdHigh = ReceiveID >> 16;
 921              		.loc 1 287 32 view .LVU374
 922 03ac 8DF81A50 		strb	r5, [sp, #26]
 290:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 923              		.loc 1 290 37 view .LVU375
 924 03b0 ADF82080 		strh	r8, [sp, #32]	@ movhi
 291:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 925              		.loc 1 291 36 view .LVU376
 926 03b4 ADF82280 		strh	r8, [sp, #34]	@ movhi
 293:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 927              		.loc 1 293 37 view .LVU377
 928 03b8 8DF82650 		strb	r5, [sp, #38]
 288:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterIdLow = ReceiveID | CAN_ID_EXT;
 929              		.loc 1 288 33 view .LVU378
 930 03bc ADF81C40 		strh	r4, [sp, #28]	@ movhi
 289:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 931              		.loc 1 289 2 is_stmt 1 view .LVU379
 289:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 932              		.loc 1 289 32 is_stmt 0 view .LVU380
 933 03c0 ADF81E30 		strh	r3, [sp, #30]	@ movhi
 290:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 934              		.loc 1 290 2 is_stmt 1 view .LVU381
 291:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO0;
 935              		.loc 1 291 2 view .LVU382
 292:hal/comm/CAN.c **** 	CANFilterInit.CAN_FilterActivation = ENABLE;
 936              		.loc 1 292 2 view .LVU383
 293:hal/comm/CAN.c **** 	CAN_FilterInit(&CANFilterInit);
 937              		.loc 1 293 2 view .LVU384
 294:hal/comm/CAN.c **** 
 938              		.loc 1 294 2 view .LVU385
 939 03c4 FFF7FEFF 		bl	CAN_FilterInit
 940              	.LVL53:
 297:hal/comm/CAN.c **** 	{
 941              		.loc 1 297 2 view .LVU386
 297:hal/comm/CAN.c **** 	{
 942              		.loc 1 297 4 is_stmt 0 view .LVU387
 943 03c8 BE42     		cmp	r6, r7
 944 03ca 9EDD     		ble	.L61
 299:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterNumber = 3;
 945              		.loc 1 299 3 is_stmt 1 view .LVU388
 299:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterNumber = 3;
 946              		.loc 1 299 15 is_stmt 0 view .LVU389
 947 03cc F300     		lsls	r3, r6, #3
 948              	.LVL54:
 300:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 949              		.loc 1 300 3 is_stmt 1 view .LVU390
 301:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterScale = CAN_FilterScale_32bit;
 950              		.loc 1 301 3 view .LVU391
 302:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdHigh = SecondaryID >> 16;
 951              		.loc 1 302 3 view .LVU392
 304:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 952              		.loc 1 304 47 is_stmt 0 view .LVU393
 953 03ce 43F00403 		orr	r3, r3, #4
 954              	.LVL55:
 304:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 955              		.loc 1 304 33 view .LVU394
 956 03d2 ADF81E30 		strh	r3, [sp, #30]	@ movhi
 300:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 957              		.loc 1 300 34 view .LVU395
 958 03d6 0323     		movs	r3, #3
 303:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = SecondaryID | CAN_ID_EXT;
 959              		.loc 1 303 48 view .LVU396
 960 03d8 46F34F36 		sbfx	r6, r6, #13, #16
 961              	.LVL56:
 309:hal/comm/CAN.c **** 	}
 962              		.loc 1 309 3 view .LVU397
 963 03dc 06A8     		add	r0, sp, #24
 303:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = SecondaryID | CAN_ID_EXT;
 964              		.loc 1 303 34 view .LVU398
 965 03de ADF81C60 		strh	r6, [sp, #28]	@ movhi
 302:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdHigh = SecondaryID >> 16;
 966              		.loc 1 302 33 view .LVU399
 967 03e2 8DF81A50 		strb	r5, [sp, #26]
 303:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterIdLow = SecondaryID | CAN_ID_EXT;
 968              		.loc 1 303 3 is_stmt 1 view .LVU400
 304:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdHigh = 0xffff;
 969              		.loc 1 304 3 view .LVU401
 305:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 970              		.loc 1 305 3 view .LVU402
 305:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMaskIdLow = 0xffff;
 971              		.loc 1 305 38 is_stmt 0 view .LVU403
 972 03e6 ADF82080 		strh	r8, [sp, #32]	@ movhi
 306:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO1;
 973              		.loc 1 306 3 is_stmt 1 view .LVU404
 306:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterFIFOAssignment = CAN_FilterFIFO1;
 974              		.loc 1 306 37 is_stmt 0 view .LVU405
 975 03ea ADF82280 		strh	r8, [sp, #34]	@ movhi
 307:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterActivation = ENABLE;
 976              		.loc 1 307 3 is_stmt 1 view .LVU406
 307:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterActivation = ENABLE;
 977              		.loc 1 307 42 is_stmt 0 view .LVU407
 978 03ee ADF82450 		strh	r5, [sp, #36]	@ movhi
 308:hal/comm/CAN.c **** 		CAN_FilterInit(&CANFilterInit);
 979              		.loc 1 308 3 is_stmt 1 view .LVU408
 308:hal/comm/CAN.c **** 		CAN_FilterInit(&CANFilterInit);
 980              		.loc 1 308 38 is_stmt 0 view .LVU409
 981 03f2 8DF82650 		strb	r5, [sp, #38]
 309:hal/comm/CAN.c **** 	}
 982              		.loc 1 309 3 is_stmt 1 view .LVU410
 300:hal/comm/CAN.c **** 		CANFilterInit.CAN_FilterMode = CAN_FilterMode_IdMask;
 983              		.loc 1 300 34 is_stmt 0 view .LVU411
 984 03f6 ADF81830 		strh	r3, [sp, #24]	@ movhi
 309:hal/comm/CAN.c **** 	}
 985              		.loc 1 309 3 view .LVU412
 986 03fa FFF7FEFF 		bl	CAN_FilterInit
 987              	.LVL57:
 988 03fe 84E7     		b	.L61
 989              	.LVL58:
 990              	.L51:
 163:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 991              		.loc 1 163 4 is_stmt 1 view .LVU413
 164:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 992              		.loc 1 164 4 view .LVU414
 165:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 993              		.loc 1 165 4 view .LVU415
 166:hal/comm/CAN.c **** 			break;
 994              		.loc 1 166 4 view .LVU416
 163:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 995              		.loc 1 163 26 is_stmt 0 view .LVU417
 996 0400 0223     		movs	r3, #2
 166:hal/comm/CAN.c **** 			break;
 997              		.loc 1 166 20 view .LVU418
 998 0402 8DF81310 		strb	r1, [sp, #19]
 164:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 999              		.loc 1 164 20 view .LVU419
 1000 0406 ADF81420 		strh	r2, [sp, #20]	@ movhi
 163:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1001              		.loc 1 163 26 view .LVU420
 1002 040a ADF81630 		strh	r3, [sp, #22]	@ movhi
 167:hal/comm/CAN.c **** 		case 7:     // 500kBit/s: 18 Time Quanta, Sampling Point 72.2%
 1003              		.loc 1 167 4 is_stmt 1 view .LVU421
 1004 040e 0DE7     		b	.L59
 1005              	.L58:
 205:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1006              		.loc 1 205 4 view .LVU422
 206:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1007              		.loc 1 206 4 view .LVU423
 207:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 1008              		.loc 1 207 4 view .LVU424
 208:hal/comm/CAN.c **** 			break;
 1009              		.loc 1 208 4 view .LVU425
 205:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1010              		.loc 1 205 26 is_stmt 0 view .LVU426
 1011 0410 C823     		movs	r3, #200
 208:hal/comm/CAN.c **** 			break;
 1012              		.loc 1 208 20 view .LVU427
 1013 0412 8DF81310 		strb	r1, [sp, #19]
 206:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1014              		.loc 1 206 20 view .LVU428
 1015 0416 ADF81420 		strh	r2, [sp, #20]	@ movhi
 205:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1016              		.loc 1 205 26 view .LVU429
 1017 041a ADF81630 		strh	r3, [sp, #22]	@ movhi
 209:hal/comm/CAN.c **** 		default:    // 250kBit/s: 18 Time Quanta, Sampling Point 72.2%
 1018              		.loc 1 209 4 is_stmt 1 view .LVU430
 1019 041e 05E7     		b	.L59
 1020              	.L57:
 199:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1021              		.loc 1 199 4 view .LVU431
 200:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1022              		.loc 1 200 4 view .LVU432
 201:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 1023              		.loc 1 201 4 view .LVU433
 202:hal/comm/CAN.c **** 			break;
 1024              		.loc 1 202 4 view .LVU434
 199:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1025              		.loc 1 199 26 is_stmt 0 view .LVU435
 1026 0420 6423     		movs	r3, #100
 202:hal/comm/CAN.c **** 			break;
 1027              		.loc 1 202 20 view .LVU436
 1028 0422 8DF81310 		strb	r1, [sp, #19]
 200:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1029              		.loc 1 200 20 view .LVU437
 1030 0426 ADF81420 		strh	r2, [sp, #20]	@ movhi
 199:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1031              		.loc 1 199 26 view .LVU438
 1032 042a ADF81630 		strh	r3, [sp, #22]	@ movhi
 203:hal/comm/CAN.c **** 		case 1:     // 10kBit/s: 18 Time Quanta, Sampling Point 72.27%
 1033              		.loc 1 203 4 is_stmt 1 view .LVU439
 1034 042e FDE6     		b	.L59
 1035              	.L56:
 193:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1036              		.loc 1 193 4 view .LVU440
 194:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1037              		.loc 1 194 4 view .LVU441
 195:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 1038              		.loc 1 195 4 view .LVU442
 196:hal/comm/CAN.c **** 			break;
 1039              		.loc 1 196 4 view .LVU443
 193:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1040              		.loc 1 193 26 is_stmt 0 view .LVU444
 1041 0430 2823     		movs	r3, #40
 196:hal/comm/CAN.c **** 			break;
 1042              		.loc 1 196 20 view .LVU445
 1043 0432 8DF81310 		strb	r1, [sp, #19]
 194:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1044              		.loc 1 194 20 view .LVU446
 1045 0436 ADF81420 		strh	r2, [sp, #20]	@ movhi
 193:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1046              		.loc 1 193 26 view .LVU447
 1047 043a ADF81630 		strh	r3, [sp, #22]	@ movhi
 197:hal/comm/CAN.c **** 		case 2:     // 20kBit/s: 18 Time Quanta, Sampling Point 72.2%
 1048              		.loc 1 197 4 is_stmt 1 view .LVU448
 1049 043e F5E6     		b	.L59
 1050              	.L55:
 187:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1051              		.loc 1 187 4 view .LVU449
 188:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1052              		.loc 1 188 4 view .LVU450
 189:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 1053              		.loc 1 189 4 view .LVU451
 190:hal/comm/CAN.c **** 			break;
 1054              		.loc 1 190 4 view .LVU452
 187:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1055              		.loc 1 187 26 is_stmt 0 view .LVU453
 1056 0440 1423     		movs	r3, #20
 190:hal/comm/CAN.c **** 			break;
 1057              		.loc 1 190 20 view .LVU454
 1058 0442 8DF81310 		strb	r1, [sp, #19]
 188:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1059              		.loc 1 188 20 view .LVU455
 1060 0446 ADF81420 		strh	r2, [sp, #20]	@ movhi
 187:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1061              		.loc 1 187 26 view .LVU456
 1062 044a ADF81630 		strh	r3, [sp, #22]	@ movhi
 191:hal/comm/CAN.c **** 		case 3:     // 50kBit/s: 18 Time Quanta, Sampling Point 72.2%
 1063              		.loc 1 191 4 is_stmt 1 view .LVU457
 1064 044e EDE6     		b	.L59
 1065              	.L54:
 181:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1066              		.loc 1 181 4 view .LVU458
 182:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1067              		.loc 1 182 4 view .LVU459
 183:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 1068              		.loc 1 183 4 view .LVU460
 184:hal/comm/CAN.c **** 			break;
 1069              		.loc 1 184 4 view .LVU461
 181:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1070              		.loc 1 181 26 is_stmt 0 view .LVU462
 1071 0450 1023     		movs	r3, #16
 184:hal/comm/CAN.c **** 			break;
 1072              		.loc 1 184 20 view .LVU463
 1073 0452 8DF81310 		strb	r1, [sp, #19]
 182:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1074              		.loc 1 182 20 view .LVU464
 1075 0456 ADF81420 		strh	r2, [sp, #20]	@ movhi
 181:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1076              		.loc 1 181 26 view .LVU465
 1077 045a ADF81630 		strh	r3, [sp, #22]	@ movhi
 185:hal/comm/CAN.c **** 		case 4:     // 100kBit/s: 18 Time Quanta, Sampling Point 72.2%
 1078              		.loc 1 185 4 is_stmt 1 view .LVU466
 1079 045e E5E6     		b	.L59
 1080              	.L53:
 169:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1081              		.loc 1 169 4 view .LVU467
 170:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1082              		.loc 1 170 4 view .LVU468
 171:hal/comm/CAN.c **** 			CANInit.CAN_SJW = CAN_SJW_1tq;
 1083              		.loc 1 171 4 view .LVU469
 172:hal/comm/CAN.c **** 			break;
 1084              		.loc 1 172 4 view .LVU470
 169:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1085              		.loc 1 169 26 is_stmt 0 view .LVU471
 1086 0460 0423     		movs	r3, #4
 172:hal/comm/CAN.c **** 			break;
 1087              		.loc 1 172 20 view .LVU472
 1088 0462 8DF81310 		strb	r1, [sp, #19]
 170:hal/comm/CAN.c **** 			CANInit.CAN_BS2 = CAN_BS2_4tq;
 1089              		.loc 1 170 20 view .LVU473
 1090 0466 ADF81420 		strh	r2, [sp, #20]	@ movhi
 169:hal/comm/CAN.c **** 			CANInit.CAN_BS1 = CAN_BS1_13tq;
 1091              		.loc 1 169 26 view .LVU474
 1092 046a ADF81630 		strh	r3, [sp, #22]	@ movhi
 173:hal/comm/CAN.c **** 		case 6:     // 250kBit/s: 18 Time Quanta, Sampling Point 72.2%
 1093              		.loc 1 173 4 is_stmt 1 view .LVU475
 1094 046e DDE6     		b	.L59
 1095              	.L66:
 1096              		.align	2
 1097              	.L65:
 1098 0470 000C0140 		.word	1073810432
 1099              		.cfi_endproc
 1100              	.LFE3:
 1102              		.align	1
 1103              		.p2align 2,,3
 1104              		.global	can_sendMessage
 1105              		.syntax unified
 1106              		.thumb
 1107              		.thumb_func
 1109              	can_sendMessage:
 1110              	.LVL59:
 1111              	.LFB4:
 338:hal/comm/CAN.c **** 
 339:hal/comm/CAN.c **** 
 340:hal/comm/CAN.c **** /* send can message */
 341:hal/comm/CAN.c **** int can_sendMessage(TCanFrame *Msg)
 342:hal/comm/CAN.c **** {
 1112              		.loc 1 342 1 view -0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 24
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 343:hal/comm/CAN.c **** 	CanTxMsg CanMessage;
 1116              		.loc 1 343 2 view .LVU477
 344:hal/comm/CAN.c **** 	int i;
 1117              		.loc 1 344 2 view .LVU478
 345:hal/comm/CAN.c **** 
 346:hal/comm/CAN.c **** 	// try to send direct
 347:hal/comm/CAN.c **** 	if(Msg->Ext)
 1118              		.loc 1 347 2 view .LVU479
 342:hal/comm/CAN.c **** 	CanTxMsg CanMessage;
 1119              		.loc 1 342 1 is_stmt 0 view .LVU480
 1120 0474 70B5     		push	{r4, r5, r6, lr}
 1121              	.LCFI21:
 1122              		.cfi_def_cfa_offset 16
 1123              		.cfi_offset 4, -16
 1124              		.cfi_offset 5, -12
 1125              		.cfi_offset 6, -8
 1126              		.cfi_offset 14, -4
 1127              		.loc 1 347 4 view .LVU481
 1128 0476 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 342:hal/comm/CAN.c **** 	CanTxMsg CanMessage;
 1129              		.loc 1 342 1 view .LVU482
 1130 0478 0446     		mov	r4, r0
 1131 047a 86B0     		sub	sp, sp, #24
 1132              	.LCFI22:
 1133              		.cfi_def_cfa_offset 40
 1134              		.loc 1 347 4 view .LVU483
 1135 047c 5BB3     		cbz	r3, .L68
 348:hal/comm/CAN.c **** 	{
 349:hal/comm/CAN.c **** 		CanMessage.IDE = CAN_ID_EXT;
 1136              		.loc 1 349 3 is_stmt 1 view .LVU484
 1137              		.loc 1 349 18 is_stmt 0 view .LVU485
 1138 047e 0422     		movs	r2, #4
 350:hal/comm/CAN.c **** 		CanMessage.ExtId = Msg->Id;
 351:hal/comm/CAN.c **** 		CanMessage.StdId = 0;
 1139              		.loc 1 351 20 view .LVU486
 1140 0480 0023     		movs	r3, #0
 350:hal/comm/CAN.c **** 		CanMessage.ExtId = Msg->Id;
 1141              		.loc 1 350 20 view .LVU487
 1142 0482 4168     		ldr	r1, [r0, #4]
 349:hal/comm/CAN.c **** 		CanMessage.ExtId = Msg->Id;
 1143              		.loc 1 349 18 view .LVU488
 1144 0484 8DF80C20 		strb	r2, [sp, #12]
 350:hal/comm/CAN.c **** 		CanMessage.ExtId = Msg->Id;
 1145              		.loc 1 350 3 is_stmt 1 view .LVU489
 1146              		.loc 1 351 3 view .LVU490
 350:hal/comm/CAN.c **** 		CanMessage.ExtId = Msg->Id;
 1147              		.loc 1 350 20 is_stmt 0 view .LVU491
 1148 0488 0291     		str	r1, [sp, #8]
 1149              		.loc 1 351 20 view .LVU492
 1150 048a 0193     		str	r3, [sp, #4]
 1151              	.L69:
 352:hal/comm/CAN.c **** 	}
 353:hal/comm/CAN.c **** 	else
 354:hal/comm/CAN.c **** 	{
 355:hal/comm/CAN.c **** 		CanMessage.IDE = CAN_ID_STD;
 356:hal/comm/CAN.c **** 		CanMessage.StdId = Msg->Id;
 357:hal/comm/CAN.c **** 		CanMessage.ExtId = 0;
 358:hal/comm/CAN.c **** 	}
 359:hal/comm/CAN.c **** 
 360:hal/comm/CAN.c **** 	if(Msg->Rtr)
 1152              		.loc 1 360 2 is_stmt 1 view .LVU493
 361:hal/comm/CAN.c **** 		CanMessage.RTR = CAN_RTR_REMOTE;
 362:hal/comm/CAN.c **** 	else
 363:hal/comm/CAN.c **** 		CanMessage.RTR = CAN_RTR_DATA;
 364:hal/comm/CAN.c **** 
 365:hal/comm/CAN.c **** 	CanMessage.DLC = Msg->Dlc;
 1153              		.loc 1 365 17 is_stmt 0 view .LVU494
 1154 048c 2246     		mov	r2, r4
 360:hal/comm/CAN.c **** 		CanMessage.RTR = CAN_RTR_REMOTE;
 1155              		.loc 1 360 8 view .LVU495
 1156 048e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 366:hal/comm/CAN.c **** 	for(i=0; i<8; i++)
 367:hal/comm/CAN.c **** 		CanMessage.Data[i] = Msg->Data[i];
 1157              		.loc 1 367 22 view .LVU496
 1158 0490 A168     		ldr	r1, [r4, #8]	@ unaligned
 361:hal/comm/CAN.c **** 	else
 1159              		.loc 1 361 18 view .LVU497
 1160 0492 002B     		cmp	r3, #0
 1161 0494 18BF     		it	ne
 1162 0496 0223     		movne	r3, #2
 1163              		.loc 1 367 22 view .LVU498
 1164 0498 CDF80F10 		str	r1, [sp, #15]	@ unaligned
 365:hal/comm/CAN.c **** 	for(i=0; i<8; i++)
 1165              		.loc 1 365 17 view .LVU499
 1166 049c 12F8081B 		ldrb	r1, [r2], #8	@ zero_extendqisi2
 368:hal/comm/CAN.c **** 
 369:hal/comm/CAN.c **** 	if(CAN_Transmit(&CanMessage) != CAN_NO_MB)
 1167              		.loc 1 369 5 view .LVU500
 1168 04a0 01A8     		add	r0, sp, #4
 1169              	.LVL60:
 367:hal/comm/CAN.c **** 
 1170              		.loc 1 367 22 view .LVU501
 1171 04a2 5268     		ldr	r2, [r2, #4]	@ unaligned
 1172 04a4 8DF80D30 		strb	r3, [sp, #13]
 365:hal/comm/CAN.c **** 	for(i=0; i<8; i++)
 1173              		.loc 1 365 2 is_stmt 1 view .LVU502
 367:hal/comm/CAN.c **** 
 1174              		.loc 1 367 22 is_stmt 0 view .LVU503
 1175 04a8 CDF81320 		str	r2, [sp, #19]	@ unaligned
 365:hal/comm/CAN.c **** 	for(i=0; i<8; i++)
 1176              		.loc 1 365 17 view .LVU504
 1177 04ac 8DF80E10 		strb	r1, [sp, #14]
 366:hal/comm/CAN.c **** 		CanMessage.Data[i] = Msg->Data[i];
 1178              		.loc 1 366 2 is_stmt 1 view .LVU505
 1179              	.LVL61:
 366:hal/comm/CAN.c **** 		CanMessage.Data[i] = Msg->Data[i];
 1180              		.loc 1 366 11 view .LVU506
 1181              		.loc 1 369 2 view .LVU507
 1182              		.loc 1 369 5 is_stmt 0 view .LVU508
 1183 04b0 FFF7FEFF 		bl	CAN_Transmit
 1184              	.LVL62:
 1185              		.loc 1 369 4 view .LVU509
 1186 04b4 0428     		cmp	r0, #4
 1187 04b6 14D1     		bne	.L74
 370:hal/comm/CAN.c **** 		return true;
 371:hal/comm/CAN.c **** 
 372:hal/comm/CAN.c **** 	// if transmit mailboxes are full: use software buffer, activate Tx-interrupt
 373:hal/comm/CAN.c **** 	i = CanTxWritePtr+1;
 1188              		.loc 1 373 2 is_stmt 1 view .LVU510
 1189              		.loc 1 373 19 is_stmt 0 view .LVU511
 1190 04b8 154E     		ldr	r6, .L78
 1191 04ba D6F88C30 		ldr	r3, [r6, #140]
 374:hal/comm/CAN.c **** 	if(i==CAN_TX_BUF_SIZE)
 375:hal/comm/CAN.c **** 		i=0;
 376:hal/comm/CAN.c **** 
 377:hal/comm/CAN.c **** 	// write into buffer, if not full
 378:hal/comm/CAN.c **** 	if(i != CanTxReadPtr)
 1192              		.loc 1 378 7 view .LVU512
 1193 04be D6F88820 		ldr	r2, [r6, #136]
 375:hal/comm/CAN.c **** 
 1194              		.loc 1 375 4 view .LVU513
 1195 04c2 072B     		cmp	r3, #7
 373:hal/comm/CAN.c **** 	if(i==CAN_TX_BUF_SIZE)
 1196              		.loc 1 373 4 view .LVU514
 1197 04c4 03F10105 		add	r5, r3, #1
 1198              	.LVL63:
 374:hal/comm/CAN.c **** 	if(i==CAN_TX_BUF_SIZE)
 1199              		.loc 1 374 2 is_stmt 1 view .LVU515
 375:hal/comm/CAN.c **** 
 1200              		.loc 1 375 4 is_stmt 0 view .LVU516
 1201 04c8 08BF     		it	eq
 1202 04ca 0025     		moveq	r5, #0
 1203              	.LVL64:
 1204              		.loc 1 378 2 is_stmt 1 view .LVU517
 1205              		.loc 1 378 4 is_stmt 0 view .LVU518
 1206 04cc AA42     		cmp	r2, r5
 1207 04ce 0BD1     		bne	.L77
 379:hal/comm/CAN.c **** 	{
 380:hal/comm/CAN.c **** 		CanTxBuffer[CanTxWritePtr] = *Msg;
 381:hal/comm/CAN.c **** 		CanTxWritePtr = i;
 382:hal/comm/CAN.c **** 
 383:hal/comm/CAN.c **** 		// activate transmit interrupt
 384:hal/comm/CAN.c **** 		CAN_ITConfig(CAN_IT_TME, ENABLE);
 385:hal/comm/CAN.c **** 
 386:hal/comm/CAN.c **** 		return true;
 387:hal/comm/CAN.c **** 	}
 388:hal/comm/CAN.c **** 	else
 389:hal/comm/CAN.c **** 		return false;
 1208              		.loc 1 389 10 view .LVU519
 1209 04d0 0020     		movs	r0, #0
 390:hal/comm/CAN.c **** }
 1210              		.loc 1 390 1 view .LVU520
 1211 04d2 06B0     		add	sp, sp, #24
 1212              	.LCFI23:
 1213              		.cfi_remember_state
 1214              		.cfi_def_cfa_offset 16
 1215              		@ sp needed
 1216 04d4 70BD     		pop	{r4, r5, r6, pc}
 1217              	.LVL65:
 1218              	.L68:
 1219              	.LCFI24:
 1220              		.cfi_restore_state
 355:hal/comm/CAN.c **** 		CanMessage.StdId = Msg->Id;
 1221              		.loc 1 355 3 is_stmt 1 view .LVU521
 356:hal/comm/CAN.c **** 		CanMessage.ExtId = 0;
 1222              		.loc 1 356 20 is_stmt 0 view .LVU522
 1223 04d6 4268     		ldr	r2, [r0, #4]
 355:hal/comm/CAN.c **** 		CanMessage.StdId = Msg->Id;
 1224              		.loc 1 355 18 view .LVU523
 1225 04d8 8DF80C30 		strb	r3, [sp, #12]
 356:hal/comm/CAN.c **** 		CanMessage.ExtId = 0;
 1226              		.loc 1 356 3 is_stmt 1 view .LVU524
 357:hal/comm/CAN.c **** 	}
 1227              		.loc 1 357 20 is_stmt 0 view .LVU525
 1228 04dc CDE90123 		strd	r2, r3, [sp, #4]
 1229 04e0 D4E7     		b	.L69
 1230              	.LVL66:
 1231              	.L74:
 370:hal/comm/CAN.c **** 
 1232              		.loc 1 370 10 view .LVU526
 1233 04e2 0120     		movs	r0, #1
 1234              		.loc 1 390 1 view .LVU527
 1235 04e4 06B0     		add	sp, sp, #24
 1236              	.LCFI25:
 1237              		.cfi_remember_state
 1238              		.cfi_def_cfa_offset 16
 1239              		@ sp needed
 1240 04e6 70BD     		pop	{r4, r5, r6, pc}
 1241              	.LVL67:
 1242              	.L77:
 1243              	.LCFI26:
 1244              		.cfi_restore_state
 380:hal/comm/CAN.c **** 		CanTxWritePtr = i;
 1245              		.loc 1 380 3 is_stmt 1 view .LVU528
 380:hal/comm/CAN.c **** 		CanTxWritePtr = i;
 1246              		.loc 1 380 14 is_stmt 0 view .LVU529
 1247 04e8 D6F88C30 		ldr	r3, [r6, #140]
 380:hal/comm/CAN.c **** 		CanTxWritePtr = i;
 1248              		.loc 1 380 30 view .LVU530
 1249 04ec 06EB031C 		add	ip, r6, r3, lsl #4
 1250 04f0 0CF1900C 		add	ip, ip, #144
 1251 04f4 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1252 04f8 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 381:hal/comm/CAN.c **** 
 1253              		.loc 1 381 3 is_stmt 1 view .LVU531
 384:hal/comm/CAN.c **** 
 1254              		.loc 1 384 3 is_stmt 0 view .LVU532
 1255 04fc 0121     		movs	r1, #1
 1256 04fe 0846     		mov	r0, r1
 381:hal/comm/CAN.c **** 
 1257              		.loc 1 381 17 view .LVU533
 1258 0500 C6F88C50 		str	r5, [r6, #140]
 384:hal/comm/CAN.c **** 
 1259              		.loc 1 384 3 is_stmt 1 view .LVU534
 1260 0504 FFF7FEFF 		bl	CAN_ITConfig
 1261              	.LVL68:
 386:hal/comm/CAN.c **** 	}
 1262              		.loc 1 386 3 view .LVU535
 386:hal/comm/CAN.c **** 	}
 1263              		.loc 1 386 10 is_stmt 0 view .LVU536
 1264 0508 0120     		movs	r0, #1
 1265              		.loc 1 390 1 view .LVU537
 1266 050a 06B0     		add	sp, sp, #24
 1267              	.LCFI27:
 1268              		.cfi_def_cfa_offset 16
 1269              		@ sp needed
 1270 050c 70BD     		pop	{r4, r5, r6, pc}
 1271              	.LVL69:
 1272              	.L79:
 1273              		.loc 1 390 1 view .LVU538
 1274 050e 00BF     		.align	2
 1275              	.L78:
 1276 0510 00000000 		.word	.LANCHOR0
 1277              		.cfi_endproc
 1278              	.LFE4:
 1280              		.align	1
 1281              		.p2align 2,,3
 1282              		.global	can_getMessage
 1283              		.syntax unified
 1284              		.thumb
 1285              		.thumb_func
 1287              	can_getMessage:
 1288              	.LVL70:
 1289              	.LFB5:
 391:hal/comm/CAN.c **** 
 392:hal/comm/CAN.c **** /* get CAN message */
 393:hal/comm/CAN.c **** int can_getMessage(TCanFrame *Msg)
 394:hal/comm/CAN.c **** {
 1290              		.loc 1 394 1 is_stmt 1 view -0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 1294              		@ link register save eliminated.
 395:hal/comm/CAN.c **** 	// is buffer empty?
 396:hal/comm/CAN.c **** 	if(CanRxReadPtr == CanRxWritePtr)
 1295              		.loc 1 396 2 view .LVU540
 394:hal/comm/CAN.c **** 	// is buffer empty?
 1296              		.loc 1 394 1 is_stmt 0 view .LVU541
 1297 0514 10B4     		push	{r4}
 1298              	.LCFI28:
 1299              		.cfi_def_cfa_offset 4
 1300              		.cfi_offset 4, -4
 1301              		.loc 1 396 18 view .LVU542
 1302 0516 0E4C     		ldr	r4, .L86
 1303 0518 6268     		ldr	r2, [r4, #4]
 1304 051a 2368     		ldr	r3, [r4]
 1305              		.loc 1 396 4 view .LVU543
 1306 051c 9A42     		cmp	r2, r3
 1307 051e 14D0     		beq	.L82
 397:hal/comm/CAN.c **** 		return false;
 398:hal/comm/CAN.c **** 
 399:hal/comm/CAN.c **** 	*Msg = CanRxBuffer[CanRxReadPtr++];
 1308              		.loc 1 399 2 is_stmt 1 view .LVU544
 1309 0520 8446     		mov	ip, r0
 1310              		.loc 1 399 33 is_stmt 0 view .LVU545
 1311 0522 6368     		ldr	r3, [r4, #4]
 1312 0524 5A1C     		adds	r2, r3, #1
 1313              		.loc 1 399 7 view .LVU546
 1314 0526 04EB0313 		add	r3, r4, r3, lsl #4
 1315              		.loc 1 399 33 view .LVU547
 1316 052a 6260     		str	r2, [r4, #4]
 1317              		.loc 1 399 7 view .LVU548
 1318 052c 0833     		adds	r3, r3, #8
 1319 052e 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1320              	.LVL71:
 1321              		.loc 1 399 7 view .LVU549
 1322 0530 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 400:hal/comm/CAN.c **** 	if(CanRxReadPtr == CAN_RX_BUF_SIZE)
 1323              		.loc 1 400 2 is_stmt 1 view .LVU550
 1324              		.loc 1 400 18 is_stmt 0 view .LVU551
 1325 0534 6368     		ldr	r3, [r4, #4]
 1326              		.loc 1 400 4 view .LVU552
 1327 0536 082B     		cmp	r3, #8
 1328 0538 02D0     		beq	.L85
 401:hal/comm/CAN.c **** 		CanRxReadPtr=0;  // Ringbuffer
 402:hal/comm/CAN.c **** 
 403:hal/comm/CAN.c **** 	return true;
 1329              		.loc 1 403 9 view .LVU553
 1330 053a 0120     		movs	r0, #1
 404:hal/comm/CAN.c **** }
 1331              		.loc 1 404 1 view .LVU554
 1332 053c 10BC     		pop	{r4}
 1333              	.LCFI29:
 1334              		.cfi_remember_state
 1335              		.cfi_restore 4
 1336              		.cfi_def_cfa_offset 0
 1337 053e 7047     		bx	lr
 1338              	.L85:
 1339              	.LCFI30:
 1340              		.cfi_restore_state
 401:hal/comm/CAN.c **** 		CanRxReadPtr=0;  // Ringbuffer
 1341              		.loc 1 401 3 is_stmt 1 view .LVU555
 401:hal/comm/CAN.c **** 		CanRxReadPtr=0;  // Ringbuffer
 1342              		.loc 1 401 15 is_stmt 0 view .LVU556
 1343 0540 0023     		movs	r3, #0
 403:hal/comm/CAN.c **** }
 1344              		.loc 1 403 9 view .LVU557
 1345 0542 0120     		movs	r0, #1
 401:hal/comm/CAN.c **** 		CanRxReadPtr=0;  // Ringbuffer
 1346              		.loc 1 401 15 view .LVU558
 1347 0544 6360     		str	r3, [r4, #4]
 1348              		.loc 1 404 1 view .LVU559
 1349 0546 10BC     		pop	{r4}
 1350              	.LCFI31:
 1351              		.cfi_remember_state
 1352              		.cfi_restore 4
 1353              		.cfi_def_cfa_offset 0
 1354 0548 7047     		bx	lr
 1355              	.LVL72:
 1356              	.L82:
 1357              	.LCFI32:
 1358              		.cfi_restore_state
 397:hal/comm/CAN.c **** 
 1359              		.loc 1 397 10 view .LVU560
 1360 054a 0020     		movs	r0, #0
 1361              	.LVL73:
 1362              		.loc 1 404 1 view .LVU561
 1363 054c 10BC     		pop	{r4}
 1364              	.LCFI33:
 1365              		.cfi_restore 4
 1366              		.cfi_def_cfa_offset 0
 1367 054e 7047     		bx	lr
 1368              	.L87:
 1369              		.align	2
 1370              	.L86:
 1371 0550 00000000 		.word	.LANCHOR0
 1372              		.cfi_endproc
 1373              	.LFE5:
 1375              		.global	CanRxBuffer
 1376              		.global	CanTxBuffer
 1377              		.global	CanTxReadPtr
 1378              		.global	CanTxWritePtr
 1379              		.global	CanRxReadPtr
 1380              		.global	CanRxWritePtr
 1381              		.bss
 1382              		.align	2
 1383              		.set	.LANCHOR0,. + 0
 1386              	CanRxWritePtr:
 1387 0000 00000000 		.space	4
 1390              	CanRxReadPtr:
 1391 0004 00000000 		.space	4
 1394              	CanRxBuffer:
 1395 0008 00000000 		.space	128
 1395      00000000 
 1395      00000000 
 1395      00000000 
 1395      00000000 
 1398              	CanTxReadPtr:
 1399 0088 00000000 		.space	4
 1402              	CanTxWritePtr:
 1403 008c 00000000 		.space	4
 1406              	CanTxBuffer:
 1407 0090 00000000 		.space	128
 1407      00000000 
 1407      00000000 
 1407      00000000 
 1407      00000000 
 1408              		.text
 1409              	.Letext0:
 1410              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1411              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 1412              		.file 4 "hal/comm/../../TMC-API/tmc/helpers/Types.h"
 1413              		.file 5 "./cpu/STM32F103/stm32f10x_type.h"
 1414              		.file 6 "./cpu/STM32F103/stm32f10x_map.h"
 1415              		.file 7 "./cpu/STM32F103/stm32f10x_can.h"
 1416              		.file 8 "./cpu/STM32F103/stm32f10x_gpio.h"
 1417              		.file 9 "./cpu/STM32F103/stm32f10x_nvic.h"
 1418              		.file 10 "hal/comm/CAN.h"
 1419              		.file 11 "./cpu/STM32F103/stm32f10x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CAN.c
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:17     .text:00000000 $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:24     .text:00000000 can_Rx0Irq
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:189    .text:00000090 $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:193    .text:00000094 $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:200    .text:00000094 can_Rx1Irq
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:364    .text:00000124 $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:368    .text:00000128 $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:375    .text:00000128 can_TxIrq
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:531    .text:000001f0 $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:535    .text:000001f4 $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:542    .text:000001f4 can_init
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:586    .text:0000020e $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:594    .text:0000021e $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1098   .text:00000470 $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1102   .text:00000474 $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1109   .text:00000474 can_sendMessage
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1276   .text:00000510 $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1280   .text:00000514 $t
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1287   .text:00000514 can_getMessage
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1371   .text:00000550 $d
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1394   .bss:00000008 CanRxBuffer
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1406   .bss:00000090 CanTxBuffer
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1398   .bss:00000088 CanTxReadPtr
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1402   .bss:0000008c CanTxWritePtr
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1390   .bss:00000004 CanRxReadPtr
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1386   .bss:00000000 CanRxWritePtr
C:\Users\forre\AppData\Local\Temp\ccps9IWz.s:1382   .bss:00000000 $d

UNDEFINED SYMBOLS
CAN_Receive
CAN_FIFORelease
CAN_Transmit
CAN_ITConfig
CAN_DeInit
RCC_APB1PeriphClockCmd
RCC_APB2PeriphClockCmd
RCC_APB2PeriphResetCmd
GPIO_PinRemapConfig
GPIO_Init
CAN_Init
CAN_FilterInit
NVIC_Init
