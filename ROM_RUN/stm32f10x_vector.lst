   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f10x_vector.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	Reset_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	Reset_Handler:
  25              	.LFB0:
  26              		.file 1 "cpu/STM32F103/stm32f10x_vector.c"
   1:cpu/STM32F103/stm32f10x_vector.c **** /******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
   2:cpu/STM32F103/stm32f10x_vector.c **** * File Name          : stm32f10x_vector.c
   3:cpu/STM32F103/stm32f10x_vector.c **** * Author             : MCD Application Team
   4:cpu/STM32F103/stm32f10x_vector.c **** * Version            : V1.0
   5:cpu/STM32F103/stm32f10x_vector.c **** * Date               : 10/08/2007
   6:cpu/STM32F103/stm32f10x_vector.c **** * Description        : This file contains the vector table for STM32F10x.
   7:cpu/STM32F103/stm32f10x_vector.c **** *                      After Reset the Cortex-M3 processor is in Thread mode,
   8:cpu/STM32F103/stm32f10x_vector.c **** *                      priority is Privileged, and the Stack is set to Main.
   9:cpu/STM32F103/stm32f10x_vector.c **** ********************************************************************************
  10:cpu/STM32F103/stm32f10x_vector.c **** * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  11:cpu/STM32F103/stm32f10x_vector.c **** * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
  12:cpu/STM32F103/stm32f10x_vector.c **** * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
  13:cpu/STM32F103/stm32f10x_vector.c **** * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
  14:cpu/STM32F103/stm32f10x_vector.c **** * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
  15:cpu/STM32F103/stm32f10x_vector.c **** * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  16:cpu/STM32F103/stm32f10x_vector.c **** *******************************************************************************/
  17:cpu/STM32F103/stm32f10x_vector.c **** 
  18:cpu/STM32F103/stm32f10x_vector.c **** /* Includes ------------------------------------------------------------------*/
  19:cpu/STM32F103/stm32f10x_vector.c **** 
  20:cpu/STM32F103/stm32f10x_vector.c **** void NMIException(void);
  21:cpu/STM32F103/stm32f10x_vector.c **** void HardFaultException(void);
  22:cpu/STM32F103/stm32f10x_vector.c **** void MemManageException(void);
  23:cpu/STM32F103/stm32f10x_vector.c **** void BusFaultException(void);
  24:cpu/STM32F103/stm32f10x_vector.c **** void UsageFaultException(void);
  25:cpu/STM32F103/stm32f10x_vector.c **** void DebugMonitor(void);
  26:cpu/STM32F103/stm32f10x_vector.c **** void SVCHandler(void);
  27:cpu/STM32F103/stm32f10x_vector.c **** void PendSVC(void);
  28:cpu/STM32F103/stm32f10x_vector.c **** void SysTickHandler(void);
  29:cpu/STM32F103/stm32f10x_vector.c **** void WWDG_IRQHandler(void);
  30:cpu/STM32F103/stm32f10x_vector.c **** void PVD_IRQHandler(void);
  31:cpu/STM32F103/stm32f10x_vector.c **** void TAMPER_IRQHandler(void);
  32:cpu/STM32F103/stm32f10x_vector.c **** void RTC_IRQHandler(void);
  33:cpu/STM32F103/stm32f10x_vector.c **** void FLASH_IRQHandler(void);
  34:cpu/STM32F103/stm32f10x_vector.c **** void RCC_IRQHandler(void);
  35:cpu/STM32F103/stm32f10x_vector.c **** void EXTI0_IRQHandler(void);
  36:cpu/STM32F103/stm32f10x_vector.c **** void EXTI1_IRQHandler(void);
  37:cpu/STM32F103/stm32f10x_vector.c **** void EXTI2_IRQHandler(void);
  38:cpu/STM32F103/stm32f10x_vector.c **** void EXTI3_IRQHandler(void);
  39:cpu/STM32F103/stm32f10x_vector.c **** void EXTI4_IRQHandler(void);
  40:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel1_IRQHandler(void);
  41:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel2_IRQHandler(void);
  42:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel3_IRQHandler(void);
  43:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel4_IRQHandler(void);
  44:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel5_IRQHandler(void);
  45:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel6_IRQHandler(void);
  46:cpu/STM32F103/stm32f10x_vector.c **** void DMAChannel7_IRQHandler(void);
  47:cpu/STM32F103/stm32f10x_vector.c **** void ADC_IRQHandler(void);
  48:cpu/STM32F103/stm32f10x_vector.c **** void USB_HP_CAN_TX_IRQHandler(void);
  49:cpu/STM32F103/stm32f10x_vector.c **** void USB_LP_CAN_RX0_IRQHandler(void);
  50:cpu/STM32F103/stm32f10x_vector.c **** void CAN_RX1_IRQHandler(void);
  51:cpu/STM32F103/stm32f10x_vector.c **** void CAN_SCE_IRQHandler(void);
  52:cpu/STM32F103/stm32f10x_vector.c **** void EXTI9_5_IRQHandler(void);
  53:cpu/STM32F103/stm32f10x_vector.c **** void TIM1_BRK_IRQHandler(void);
  54:cpu/STM32F103/stm32f10x_vector.c **** void TIM1_UP_IRQHandler(void);
  55:cpu/STM32F103/stm32f10x_vector.c **** void TIM1_TRG_COM_IRQHandler(void);
  56:cpu/STM32F103/stm32f10x_vector.c **** void TIM1_CC_IRQHandler(void);
  57:cpu/STM32F103/stm32f10x_vector.c **** void TIM2_IRQHandler(void);
  58:cpu/STM32F103/stm32f10x_vector.c **** void TIM3_IRQHandler(void);
  59:cpu/STM32F103/stm32f10x_vector.c **** void TIM4_IRQHandler(void);
  60:cpu/STM32F103/stm32f10x_vector.c **** void I2C1_EV_IRQHandler(void);
  61:cpu/STM32F103/stm32f10x_vector.c **** void I2C1_ER_IRQHandler(void);
  62:cpu/STM32F103/stm32f10x_vector.c **** void I2C2_EV_IRQHandler(void);
  63:cpu/STM32F103/stm32f10x_vector.c **** void I2C2_ER_IRQHandler(void);
  64:cpu/STM32F103/stm32f10x_vector.c **** void SPI1_IRQHandler(void);
  65:cpu/STM32F103/stm32f10x_vector.c **** void SPI2_IRQHandler(void);
  66:cpu/STM32F103/stm32f10x_vector.c **** void USART1_IRQHandler(void);
  67:cpu/STM32F103/stm32f10x_vector.c **** void USART2_IRQHandler(void);
  68:cpu/STM32F103/stm32f10x_vector.c **** void USART3_IRQHandler(void);
  69:cpu/STM32F103/stm32f10x_vector.c **** void EXTI15_10_IRQHandler(void);
  70:cpu/STM32F103/stm32f10x_vector.c **** void RTCAlarm_IRQHandler(void);
  71:cpu/STM32F103/stm32f10x_vector.c **** void USBWakeUp_IRQHandler(void);
  72:cpu/STM32F103/stm32f10x_vector.c **** 
  73:cpu/STM32F103/stm32f10x_vector.c **** 
  74:cpu/STM32F103/stm32f10x_vector.c **** /* Exported types ------------------------------------------------------------*/
  75:cpu/STM32F103/stm32f10x_vector.c **** /* Exported constants --------------------------------------------------------*/
  76:cpu/STM32F103/stm32f10x_vector.c **** extern unsigned long _etext;
  77:cpu/STM32F103/stm32f10x_vector.c **** extern unsigned long _sidata;		/* start address for the initialization values
  78:cpu/STM32F103/stm32f10x_vector.c ****                                    of the .data section. defined in linker script */
  79:cpu/STM32F103/stm32f10x_vector.c **** extern unsigned long _sdata;		/* start address for the .data section. defined
  80:cpu/STM32F103/stm32f10x_vector.c ****                                    in linker script */
  81:cpu/STM32F103/stm32f10x_vector.c **** extern unsigned long _edata;		/* end address for the .data section. defined in
  82:cpu/STM32F103/stm32f10x_vector.c ****                                    linker script */
  83:cpu/STM32F103/stm32f10x_vector.c **** 
  84:cpu/STM32F103/stm32f10x_vector.c **** extern unsigned long _sbss;			/* start address for the .bss section. defined
  85:cpu/STM32F103/stm32f10x_vector.c ****                                    in linker script */
  86:cpu/STM32F103/stm32f10x_vector.c **** extern unsigned long _ebss;			/* end address for the .bss section. defined in
  87:cpu/STM32F103/stm32f10x_vector.c ****                                    linker script */
  88:cpu/STM32F103/stm32f10x_vector.c **** 
  89:cpu/STM32F103/stm32f10x_vector.c **** extern void _estack;		/* init value for the stack pointer. defined in linker script */
  90:cpu/STM32F103/stm32f10x_vector.c **** 
  91:cpu/STM32F103/stm32f10x_vector.c **** 
  92:cpu/STM32F103/stm32f10x_vector.c **** 
  93:cpu/STM32F103/stm32f10x_vector.c **** /* Private typedef -----------------------------------------------------------*/
  94:cpu/STM32F103/stm32f10x_vector.c **** /* function prototypes -------------------------------------------------------*/
  95:cpu/STM32F103/stm32f10x_vector.c **** void Reset_Handler(void) __attribute__((__interrupt__));
  96:cpu/STM32F103/stm32f10x_vector.c **** extern int main(void);
  97:cpu/STM32F103/stm32f10x_vector.c **** 
  98:cpu/STM32F103/stm32f10x_vector.c **** 
  99:cpu/STM32F103/stm32f10x_vector.c **** /*******************************************************************************
 100:cpu/STM32F103/stm32f10x_vector.c **** *
 101:cpu/STM32F103/stm32f10x_vector.c **** * The minimal vector table for a Cortex M3.  Note that the proper constructs
 102:cpu/STM32F103/stm32f10x_vector.c **** * must be placed on this to ensure that it ends up at physical address
 103:cpu/STM32F103/stm32f10x_vector.c **** * 0x0000.0000.
 104:cpu/STM32F103/stm32f10x_vector.c **** *
 105:cpu/STM32F103/stm32f10x_vector.c **** *******************************************************************************/
 106:cpu/STM32F103/stm32f10x_vector.c **** 
 107:cpu/STM32F103/stm32f10x_vector.c **** 
 108:cpu/STM32F103/stm32f10x_vector.c **** __attribute__ ((section(".isr_vector")))
 109:cpu/STM32F103/stm32f10x_vector.c **** void (* const g_pfnVectors[])(void) =
 110:cpu/STM32F103/stm32f10x_vector.c **** {
 111:cpu/STM32F103/stm32f10x_vector.c ****   &_estack,            // The initial stack pointer
 112:cpu/STM32F103/stm32f10x_vector.c ****   Reset_Handler,             // The reset handler
 113:cpu/STM32F103/stm32f10x_vector.c ****   NMIException,
 114:cpu/STM32F103/stm32f10x_vector.c ****   HardFaultException,
 115:cpu/STM32F103/stm32f10x_vector.c ****   MemManageException,
 116:cpu/STM32F103/stm32f10x_vector.c ****   BusFaultException,
 117:cpu/STM32F103/stm32f10x_vector.c ****   UsageFaultException,
 118:cpu/STM32F103/stm32f10x_vector.c ****   0, 0, 0, 0,            /* Reserved */ 
 119:cpu/STM32F103/stm32f10x_vector.c ****   SVCHandler,
 120:cpu/STM32F103/stm32f10x_vector.c ****   DebugMonitor,
 121:cpu/STM32F103/stm32f10x_vector.c ****   0,                      /* Reserved */
 122:cpu/STM32F103/stm32f10x_vector.c ****   PendSVC,
 123:cpu/STM32F103/stm32f10x_vector.c ****   SysTickHandler,
 124:cpu/STM32F103/stm32f10x_vector.c ****   WWDG_IRQHandler,
 125:cpu/STM32F103/stm32f10x_vector.c ****   PVD_IRQHandler,
 126:cpu/STM32F103/stm32f10x_vector.c ****   TAMPER_IRQHandler,
 127:cpu/STM32F103/stm32f10x_vector.c ****   RTC_IRQHandler,
 128:cpu/STM32F103/stm32f10x_vector.c ****   FLASH_IRQHandler,
 129:cpu/STM32F103/stm32f10x_vector.c ****   RCC_IRQHandler,
 130:cpu/STM32F103/stm32f10x_vector.c ****   EXTI0_IRQHandler,
 131:cpu/STM32F103/stm32f10x_vector.c ****   EXTI1_IRQHandler,
 132:cpu/STM32F103/stm32f10x_vector.c ****   EXTI2_IRQHandler,
 133:cpu/STM32F103/stm32f10x_vector.c ****   EXTI3_IRQHandler,
 134:cpu/STM32F103/stm32f10x_vector.c ****   EXTI4_IRQHandler,
 135:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel1_IRQHandler,
 136:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel2_IRQHandler,
 137:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel3_IRQHandler,
 138:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel4_IRQHandler,
 139:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel5_IRQHandler,
 140:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel6_IRQHandler,
 141:cpu/STM32F103/stm32f10x_vector.c ****   DMAChannel7_IRQHandler,
 142:cpu/STM32F103/stm32f10x_vector.c ****   ADC_IRQHandler,
 143:cpu/STM32F103/stm32f10x_vector.c ****   USB_HP_CAN_TX_IRQHandler,
 144:cpu/STM32F103/stm32f10x_vector.c ****   USB_LP_CAN_RX0_IRQHandler,
 145:cpu/STM32F103/stm32f10x_vector.c ****   CAN_RX1_IRQHandler,
 146:cpu/STM32F103/stm32f10x_vector.c ****   CAN_SCE_IRQHandler,
 147:cpu/STM32F103/stm32f10x_vector.c ****   EXTI9_5_IRQHandler,
 148:cpu/STM32F103/stm32f10x_vector.c ****   TIM1_BRK_IRQHandler,
 149:cpu/STM32F103/stm32f10x_vector.c ****   TIM1_UP_IRQHandler,
 150:cpu/STM32F103/stm32f10x_vector.c ****   TIM1_TRG_COM_IRQHandler,
 151:cpu/STM32F103/stm32f10x_vector.c ****   TIM1_CC_IRQHandler,
 152:cpu/STM32F103/stm32f10x_vector.c ****   TIM2_IRQHandler,
 153:cpu/STM32F103/stm32f10x_vector.c ****   TIM3_IRQHandler,
 154:cpu/STM32F103/stm32f10x_vector.c ****   TIM4_IRQHandler,
 155:cpu/STM32F103/stm32f10x_vector.c ****   I2C1_EV_IRQHandler,
 156:cpu/STM32F103/stm32f10x_vector.c ****   I2C1_ER_IRQHandler,
 157:cpu/STM32F103/stm32f10x_vector.c ****   I2C2_EV_IRQHandler,
 158:cpu/STM32F103/stm32f10x_vector.c ****   I2C2_ER_IRQHandler,
 159:cpu/STM32F103/stm32f10x_vector.c ****   SPI1_IRQHandler,
 160:cpu/STM32F103/stm32f10x_vector.c ****   SPI2_IRQHandler,
 161:cpu/STM32F103/stm32f10x_vector.c ****   USART1_IRQHandler,
 162:cpu/STM32F103/stm32f10x_vector.c ****   USART2_IRQHandler,
 163:cpu/STM32F103/stm32f10x_vector.c ****   USART3_IRQHandler,
 164:cpu/STM32F103/stm32f10x_vector.c ****   EXTI15_10_IRQHandler,
 165:cpu/STM32F103/stm32f10x_vector.c ****   RTCAlarm_IRQHandler,
 166:cpu/STM32F103/stm32f10x_vector.c ****   USBWakeUp_IRQHandler,
 167:cpu/STM32F103/stm32f10x_vector.c ****   0,
 168:cpu/STM32F103/stm32f10x_vector.c ****   0,
 169:cpu/STM32F103/stm32f10x_vector.c ****   0,
 170:cpu/STM32F103/stm32f10x_vector.c ****   0,
 171:cpu/STM32F103/stm32f10x_vector.c ****   0,
 172:cpu/STM32F103/stm32f10x_vector.c ****   0,
 173:cpu/STM32F103/stm32f10x_vector.c ****   0,
 174:cpu/STM32F103/stm32f10x_vector.c ****   (unsigned short)0xF108F85F //this is a workaround for boot in RAM mode.
 175:cpu/STM32F103/stm32f10x_vector.c **** };
 176:cpu/STM32F103/stm32f10x_vector.c **** 
 177:cpu/STM32F103/stm32f10x_vector.c **** /*******************************************************************************
 178:cpu/STM32F103/stm32f10x_vector.c **** * Function Name  : Reset_Handler
 179:cpu/STM32F103/stm32f10x_vector.c **** * Description    : This is the code that gets called when the processor first
 180:cpu/STM32F103/stm32f10x_vector.c **** *                  starts execution following a reset event. Only the absolutely
 181:cpu/STM32F103/stm32f10x_vector.c **** *                  necessary set is performed, after which the application
 182:cpu/STM32F103/stm32f10x_vector.c **** *                  supplied main() routine is called. 
 183:cpu/STM32F103/stm32f10x_vector.c **** * Input          :
 184:cpu/STM32F103/stm32f10x_vector.c **** * Output         :
 185:cpu/STM32F103/stm32f10x_vector.c **** * Return         :
 186:cpu/STM32F103/stm32f10x_vector.c **** *******************************************************************************/
 187:cpu/STM32F103/stm32f10x_vector.c **** void Reset_Handler(void)
 188:cpu/STM32F103/stm32f10x_vector.c **** {
  27              		.loc 1 188 1 view -0
  28              		.cfi_startproc
  29              		@ Stack Align: May be called with mis-aligned SP.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
 189:cpu/STM32F103/stm32f10x_vector.c ****     unsigned long *pulSrc, *pulDest;
  32              		.loc 1 189 5 view .LVU1
 190:cpu/STM32F103/stm32f10x_vector.c **** 
 191:cpu/STM32F103/stm32f10x_vector.c ****     //
 192:cpu/STM32F103/stm32f10x_vector.c ****     // Copy the data segment initializers from flash to SRAM.
 193:cpu/STM32F103/stm32f10x_vector.c ****     //
 194:cpu/STM32F103/stm32f10x_vector.c ****     pulSrc = &_sidata;
  33              		.loc 1 194 5 view .LVU2
  34              	.LVL0:
 195:cpu/STM32F103/stm32f10x_vector.c ****     for(pulDest = &_sdata; pulDest < &_edata; )
  35              		.loc 1 195 5 view .LVU3
  36              		.loc 1 195 28 view .LVU4
 188:cpu/STM32F103/stm32f10x_vector.c ****     unsigned long *pulSrc, *pulDest;
  37              		.loc 1 188 1 is_stmt 0 view .LVU5
  38 0000 6846     		mov	r0, sp
  39              		.cfi_register 13, 0
  40 0002 20F00701 		bic	r1, r0, #7
  41 0006 8D46     		mov	sp, r1
  42              		.loc 1 195 5 view .LVU6
  43 0008 0F4A     		ldr	r2, .L5
 188:cpu/STM32F103/stm32f10x_vector.c ****     unsigned long *pulSrc, *pulDest;
  44              		.loc 1 188 1 view .LVU7
  45 000a 01B5     		push	{r0, lr}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 8
  48              		.cfi_offset 13, -8
  49              		.cfi_offset 14, -4
  50              		.loc 1 195 5 view .LVU8
  51 000c 0F48     		ldr	r0, .L5+4
  52 000e 9042     		cmp	r0, r2
  53 0010 07D2     		bcs	.L2
 196:cpu/STM32F103/stm32f10x_vector.c ****     {
 197:cpu/STM32F103/stm32f10x_vector.c ****         *(pulDest++) = *(pulSrc++);
  54              		.loc 1 197 22 view .LVU9
  55 0012 013A     		subs	r2, r2, #1
  56 0014 121A     		subs	r2, r2, r0
  57 0016 22F00302 		bic	r2, r2, #3
  58 001a 0D49     		ldr	r1, .L5+8
  59 001c 0432     		adds	r2, r2, #4
  60 001e FFF7FEFF 		bl	memcpy
  61              	.LVL1:
  62              	.L2:
 198:cpu/STM32F103/stm32f10x_vector.c ****     }
 199:cpu/STM32F103/stm32f10x_vector.c **** 
 200:cpu/STM32F103/stm32f10x_vector.c ****     //
 201:cpu/STM32F103/stm32f10x_vector.c ****     // Zero fill the bss segment.
 202:cpu/STM32F103/stm32f10x_vector.c ****     //
 203:cpu/STM32F103/stm32f10x_vector.c ****     for(pulDest = &_sbss; pulDest < &_ebss; )
  63              		.loc 1 203 27 is_stmt 1 view .LVU10
  64              		.loc 1 203 5 is_stmt 0 view .LVU11
  65 0022 0C48     		ldr	r0, .L5+12
  66 0024 0C4A     		ldr	r2, .L5+16
  67 0026 9042     		cmp	r0, r2
  68 0028 07D2     		bcs	.L3
 204:cpu/STM32F103/stm32f10x_vector.c ****     {
 205:cpu/STM32F103/stm32f10x_vector.c ****         *(pulDest++) = 0;
  69              		.loc 1 205 22 view .LVU12
  70 002a 013A     		subs	r2, r2, #1
  71 002c 121A     		subs	r2, r2, r0
  72 002e 22F00302 		bic	r2, r2, #3
  73 0032 0021     		movs	r1, #0
  74 0034 0432     		adds	r2, r2, #4
  75 0036 FFF7FEFF 		bl	memset
  76              	.LVL2:
  77              	.L3:
 206:cpu/STM32F103/stm32f10x_vector.c ****     }
 207:cpu/STM32F103/stm32f10x_vector.c **** 
 208:cpu/STM32F103/stm32f10x_vector.c ****     //
 209:cpu/STM32F103/stm32f10x_vector.c ****     // Call the application's entry point.
 210:cpu/STM32F103/stm32f10x_vector.c ****     //
 211:cpu/STM32F103/stm32f10x_vector.c ****     main();
  78              		.loc 1 211 5 is_stmt 1 view .LVU13
  79 003a FFF7FEFF 		bl	main
  80              	.LVL3:
 212:cpu/STM32F103/stm32f10x_vector.c **** }
  81              		.loc 1 212 1 is_stmt 0 view .LVU14
  82 003e BDE80140 		pop	{r0, lr}
  83              	.LCFI1:
  84              		.cfi_restore 14
  85              		.cfi_restore 0
  86              		.cfi_def_cfa_offset 0
  87 0042 8546     		mov	sp, r0
  88 0044 7047     		bx	lr
  89              	.L6:
  90 0046 00BF     		.align	2
  91              	.L5:
  92 0048 00000000 		.word	_edata
  93 004c 00000000 		.word	_sdata
  94 0050 00000000 		.word	_sidata
  95 0054 00000000 		.word	_sbss
  96 0058 00000000 		.word	_ebss
  97              		.cfi_endproc
  98              	.LFE0:
 100              		.global	g_pfnVectors
 101              		.section	.isr_vector,"a"
 102              		.align	2
 105              	g_pfnVectors:
 106 0000 00000000 		.word	_estack
 107 0004 00000000 		.word	Reset_Handler
 108 0008 00000000 		.word	NMIException
 109 000c 00000000 		.word	HardFaultException
 110 0010 00000000 		.word	MemManageException
 111 0014 00000000 		.word	BusFaultException
 112 0018 00000000 		.word	UsageFaultException
 113 001c 00000000 		.word	0
 114 0020 00000000 		.word	0
 115 0024 00000000 		.word	0
 116 0028 00000000 		.word	0
 117 002c 00000000 		.word	SVCHandler
 118 0030 00000000 		.word	DebugMonitor
 119 0034 00000000 		.word	0
 120 0038 00000000 		.word	PendSVC
 121 003c 00000000 		.word	SysTickHandler
 122 0040 00000000 		.word	WWDG_IRQHandler
 123 0044 00000000 		.word	PVD_IRQHandler
 124 0048 00000000 		.word	TAMPER_IRQHandler
 125 004c 00000000 		.word	RTC_IRQHandler
 126 0050 00000000 		.word	FLASH_IRQHandler
 127 0054 00000000 		.word	RCC_IRQHandler
 128 0058 00000000 		.word	EXTI0_IRQHandler
 129 005c 00000000 		.word	EXTI1_IRQHandler
 130 0060 00000000 		.word	EXTI2_IRQHandler
 131 0064 00000000 		.word	EXTI3_IRQHandler
 132 0068 00000000 		.word	EXTI4_IRQHandler
 133 006c 00000000 		.word	DMAChannel1_IRQHandler
 134 0070 00000000 		.word	DMAChannel2_IRQHandler
 135 0074 00000000 		.word	DMAChannel3_IRQHandler
 136 0078 00000000 		.word	DMAChannel4_IRQHandler
 137 007c 00000000 		.word	DMAChannel5_IRQHandler
 138 0080 00000000 		.word	DMAChannel6_IRQHandler
 139 0084 00000000 		.word	DMAChannel7_IRQHandler
 140 0088 00000000 		.word	ADC_IRQHandler
 141 008c 00000000 		.word	USB_HP_CAN_TX_IRQHandler
 142 0090 00000000 		.word	USB_LP_CAN_RX0_IRQHandler
 143 0094 00000000 		.word	CAN_RX1_IRQHandler
 144 0098 00000000 		.word	CAN_SCE_IRQHandler
 145 009c 00000000 		.word	EXTI9_5_IRQHandler
 146 00a0 00000000 		.word	TIM1_BRK_IRQHandler
 147 00a4 00000000 		.word	TIM1_UP_IRQHandler
 148 00a8 00000000 		.word	TIM1_TRG_COM_IRQHandler
 149 00ac 00000000 		.word	TIM1_CC_IRQHandler
 150 00b0 00000000 		.word	TIM2_IRQHandler
 151 00b4 00000000 		.word	TIM3_IRQHandler
 152 00b8 00000000 		.word	TIM4_IRQHandler
 153 00bc 00000000 		.word	I2C1_EV_IRQHandler
 154 00c0 00000000 		.word	I2C1_ER_IRQHandler
 155 00c4 00000000 		.word	I2C2_EV_IRQHandler
 156 00c8 00000000 		.word	I2C2_ER_IRQHandler
 157 00cc 00000000 		.word	SPI1_IRQHandler
 158 00d0 00000000 		.word	SPI2_IRQHandler
 159 00d4 00000000 		.word	USART1_IRQHandler
 160 00d8 00000000 		.word	USART2_IRQHandler
 161 00dc 00000000 		.word	USART3_IRQHandler
 162 00e0 00000000 		.word	EXTI15_10_IRQHandler
 163 00e4 00000000 		.word	RTCAlarm_IRQHandler
 164 00e8 00000000 		.word	USBWakeUp_IRQHandler
 165 00ec 00000000 		.word	0
 166 00f0 00000000 		.word	0
 167 00f4 00000000 		.word	0
 168 00f8 00000000 		.word	0
 169 00fc 00000000 		.word	0
 170 0100 00000000 		.word	0
 171 0104 00000000 		.word	0
 172 0108 5FF80000 		.word	63583
 173              		.text
 174              	.Letext0:
 175              		.file 2 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_vector.c
C:\Users\forre\AppData\Local\Temp\cc09GhOh.s:17     .text:00000000 $t
C:\Users\forre\AppData\Local\Temp\cc09GhOh.s:24     .text:00000000 Reset_Handler
C:\Users\forre\AppData\Local\Temp\cc09GhOh.s:92     .text:00000048 $d
C:\Users\forre\AppData\Local\Temp\cc09GhOh.s:105    .isr_vector:00000000 g_pfnVectors
C:\Users\forre\AppData\Local\Temp\cc09GhOh.s:102    .isr_vector:00000000 $d

UNDEFINED SYMBOLS
memcpy
memset
main
_edata
_sdata
_sidata
_sbss
_ebss
_estack
NMIException
HardFaultException
MemManageException
BusFaultException
UsageFaultException
SVCHandler
DebugMonitor
PendSVC
SysTickHandler
WWDG_IRQHandler
PVD_IRQHandler
TAMPER_IRQHandler
RTC_IRQHandler
FLASH_IRQHandler
RCC_IRQHandler
EXTI0_IRQHandler
EXTI1_IRQHandler
EXTI2_IRQHandler
EXTI3_IRQHandler
EXTI4_IRQHandler
DMAChannel1_IRQHandler
DMAChannel2_IRQHandler
DMAChannel3_IRQHandler
DMAChannel4_IRQHandler
DMAChannel5_IRQHandler
DMAChannel6_IRQHandler
DMAChannel7_IRQHandler
ADC_IRQHandler
USB_HP_CAN_TX_IRQHandler
USB_LP_CAN_RX0_IRQHandler
CAN_RX1_IRQHandler
CAN_SCE_IRQHandler
EXTI9_5_IRQHandler
TIM1_BRK_IRQHandler
TIM1_UP_IRQHandler
TIM1_TRG_COM_IRQHandler
TIM1_CC_IRQHandler
TIM2_IRQHandler
TIM3_IRQHandler
TIM4_IRQHandler
I2C1_EV_IRQHandler
I2C1_ER_IRQHandler
I2C2_EV_IRQHandler
I2C2_ER_IRQHandler
SPI1_IRQHandler
SPI2_IRQHandler
USART1_IRQHandler
USART2_IRQHandler
USART3_IRQHandler
EXTI15_10_IRQHandler
RTCAlarm_IRQHandler
USBWakeUp_IRQHandler
