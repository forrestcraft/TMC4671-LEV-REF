   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"BLDC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	bldc_switchToMotionMode
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	bldc_switchToMotionMode:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "BLDC.c"
   1:BLDC.c        **** /*
   2:BLDC.c        ****  * BLDC.c
   3:BLDC.c        ****  *
   4:BLDC.c        ****  *  Created on: 31.03.2019
   5:BLDC.c        ****  *      Author: ED
   6:BLDC.c        ****  */
   7:BLDC.c        **** 
   8:BLDC.c        **** #include "BLDC.h"
   9:BLDC.c        **** #include "hal/system/SystemInfo.h"
  10:BLDC.c        **** #include "hal/system/SysTick.h"
  11:BLDC.c        **** #include "hal/Flags.h"
  12:BLDC.c        **** #include "hal/Debug.h"
  13:BLDC.c        **** #include "Led.h"
  14:BLDC.c        **** #include "LedRear.h"
  15:BLDC.c        **** #include "Button.h"
  16:BLDC.c        **** #include "Sensor.h"
  17:BLDC.c        **** #include "math.h"
  18:BLDC.c        **** 
  19:BLDC.c        **** 	// === private variables ===
  20:BLDC.c        **** 
  21:BLDC.c        **** 	// general information
  22:BLDC.c        **** 	s32 gActualMotorTemperature = 0;		// actual motor temperature
  23:BLDC.c        **** 	s32	gActualSupplyVoltage = 0;			// actual supply voltage
  24:BLDC.c        **** 	s32 gActualInput12V = 0;				// actual 12V
  25:BLDC.c        **** 	s32 gActualInput6V = 0;					// actual 6V
  26:BLDC.c        **** 	s32 gActualInput5V = 0;					// actual 5V
  27:BLDC.c        **** 
  28:BLDC.c        **** 	// velocity regulation
  29:BLDC.c        **** 	int	gDesiredVelocity = 0;				// requested target velocity
  30:BLDC.c        **** 
  31:BLDC.c        **** 	// torque ramp
  32:BLDC.c        **** 	int32_t gRampTargetTorque = 0;
  33:BLDC.c        **** 	int32_t gTargetTorque = 0;
  34:BLDC.c        **** 
  35:BLDC.c        **** 	// commutation mode
  36:BLDC.c        **** 	u8	gLastSetCommutationMode = 0xFF;		// actual commutation mode
  37:BLDC.c        **** 
  38:BLDC.c        **** 	// motion mode
  39:BLDC.c        **** 	uint32_t gMotionMode = STOP_MODE;
  40:BLDC.c        **** 
  41:BLDC.c        **** void bldc_switchToMotionMode(uint32_t mode)
  42:BLDC.c        **** {
  28              		.loc 1 42 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  43:BLDC.c        **** 	flags_clearStatusFlag(STOP_MODE | TORQUE_MODE | VELOCITY_MODE | POSITION_MODE | POSITION_END);
  32              		.loc 1 43 2 view .LVU1
  42:BLDC.c        **** 	flags_clearStatusFlag(STOP_MODE | TORQUE_MODE | VELOCITY_MODE | POSITION_MODE | POSITION_END);
  33              		.loc 1 42 1 is_stmt 0 view .LVU2
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  42:BLDC.c        **** 	flags_clearStatusFlag(STOP_MODE | TORQUE_MODE | VELOCITY_MODE | POSITION_MODE | POSITION_END);
  39              		.loc 1 42 1 view .LVU3
  40 0002 0446     		mov	r4, r0
  41              		.loc 1 43 2 view .LVU4
  42 0004 4FF49E40 		mov	r0, #20224
  43              	.LVL1:
  44              		.loc 1 43 2 view .LVU5
  45 0008 FFF7FEFF 		bl	flags_clearStatusFlag
  46              	.LVL2:
  44:BLDC.c        **** 
  45:BLDC.c        **** 	switch(mode)
  47              		.loc 1 45 2 is_stmt 1 view .LVU6
  48 000c B4F5007F 		cmp	r4, #512
  49 0010 06D0     		beq	.L2
  50 0012 B4F5006F 		cmp	r4, #2048
  51 0016 19D0     		beq	.L3
  52 0018 B4F5807F 		cmp	r4, #256
  53 001c 0BD0     		beq	.L7
  46:BLDC.c        **** 	{
  47:BLDC.c        **** 		case STOP_MODE:
  48:BLDC.c        **** 			flags_setStatusFlag(STOP_MODE);
  49:BLDC.c        **** 			gMotionMode = STOP_MODE;
  50:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
  51:BLDC.c        **** 			break;
  52:BLDC.c        **** 		case TORQUE_MODE:
  53:BLDC.c        **** 			flags_setStatusFlag(TORQUE_MODE);
  54:BLDC.c        **** 			gMotionMode = TORQUE_MODE;
  55:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
  56:BLDC.c        **** 			break;
  57:BLDC.c        **** 		case VELOCITY_MODE:
  58:BLDC.c        **** 			flags_setStatusFlag(VELOCITY_MODE);
  59:BLDC.c        **** 			gMotionMode = VELOCITY_MODE;
  60:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
  61:BLDC.c        **** 			break;
  62:BLDC.c        **** 	}
  63:BLDC.c        **** }
  54              		.loc 1 63 1 is_stmt 0 view .LVU7
  55 001e 10BD     		pop	{r4, pc}
  56              	.LVL3:
  57              	.L2:
  58:BLDC.c        **** 			gMotionMode = VELOCITY_MODE;
  58              		.loc 1 58 4 is_stmt 1 view .LVU8
  59 0020 2046     		mov	r0, r4
  60 0022 FFF7FEFF 		bl	flags_setStatusFlag
  61              	.LVL4:
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
  62              		.loc 1 59 4 view .LVU9
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
  63              		.loc 1 59 16 is_stmt 0 view .LVU10
  64 0026 0F4B     		ldr	r3, .L8
  60:BLDC.c        **** 			break;
  65              		.loc 1 60 4 view .LVU11
  66 0028 0221     		movs	r1, #2
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
  67              		.loc 1 59 16 view .LVU12
  68 002a 1C60     		str	r4, [r3]
  60:BLDC.c        **** 			break;
  69              		.loc 1 60 4 is_stmt 1 view .LVU13
  70 002c 0020     		movs	r0, #0
  71              		.loc 1 63 1 is_stmt 0 view .LVU14
  72 002e BDE81040 		pop	{r4, lr}
  73              	.LCFI1:
  74              		.cfi_remember_state
  75              		.cfi_restore 14
  76              		.cfi_restore 4
  77              		.cfi_def_cfa_offset 0
  78              	.LVL5:
  60:BLDC.c        **** 			break;
  79              		.loc 1 60 4 view .LVU15
  80 0032 FFF7FEBF 		b	tmc4671_switchToMotionMode
  81              	.LVL6:
  82              	.L7:
  83              	.LCFI2:
  84              		.cfi_restore_state
  48:BLDC.c        **** 			gMotionMode = STOP_MODE;
  85              		.loc 1 48 4 is_stmt 1 view .LVU16
  86 0036 2046     		mov	r0, r4
  87 0038 FFF7FEFF 		bl	flags_setStatusFlag
  88              	.LVL7:
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
  89              		.loc 1 49 4 view .LVU17
  50:BLDC.c        **** 			break;
  90              		.loc 1 50 4 is_stmt 0 view .LVU18
  91 003c 0021     		movs	r1, #0
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
  92              		.loc 1 49 16 view .LVU19
  93 003e 094B     		ldr	r3, .L8
  50:BLDC.c        **** 			break;
  94              		.loc 1 50 4 view .LVU20
  95 0040 0846     		mov	r0, r1
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
  96              		.loc 1 49 16 view .LVU21
  97 0042 1C60     		str	r4, [r3]
  50:BLDC.c        **** 			break;
  98              		.loc 1 50 4 is_stmt 1 view .LVU22
  99              		.loc 1 63 1 is_stmt 0 view .LVU23
 100 0044 BDE81040 		pop	{r4, lr}
 101              	.LCFI3:
 102              		.cfi_remember_state
 103              		.cfi_restore 14
 104              		.cfi_restore 4
 105              		.cfi_def_cfa_offset 0
 106              	.LVL8:
  50:BLDC.c        **** 			break;
 107              		.loc 1 50 4 view .LVU24
 108 0048 FFF7FEBF 		b	tmc4671_switchToMotionMode
 109              	.LVL9:
 110              	.L3:
 111              	.LCFI4:
 112              		.cfi_restore_state
  53:BLDC.c        **** 			gMotionMode = TORQUE_MODE;
 113              		.loc 1 53 4 is_stmt 1 view .LVU25
 114 004c 2046     		mov	r0, r4
 115 004e FFF7FEFF 		bl	flags_setStatusFlag
 116              	.LVL10:
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 117              		.loc 1 54 4 view .LVU26
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 118              		.loc 1 54 16 is_stmt 0 view .LVU27
 119 0052 044B     		ldr	r3, .L8
  55:BLDC.c        **** 			break;
 120              		.loc 1 55 4 view .LVU28
 121 0054 0121     		movs	r1, #1
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 122              		.loc 1 54 16 view .LVU29
 123 0056 1C60     		str	r4, [r3]
  55:BLDC.c        **** 			break;
 124              		.loc 1 55 4 is_stmt 1 view .LVU30
 125 0058 0020     		movs	r0, #0
 126              		.loc 1 63 1 is_stmt 0 view .LVU31
 127 005a BDE81040 		pop	{r4, lr}
 128              	.LCFI5:
 129              		.cfi_restore 14
 130              		.cfi_restore 4
 131              		.cfi_def_cfa_offset 0
 132              	.LVL11:
  55:BLDC.c        **** 			break;
 133              		.loc 1 55 4 view .LVU32
 134 005e FFF7FEBF 		b	tmc4671_switchToMotionMode
 135              	.LVL12:
 136              	.L9:
  55:BLDC.c        **** 			break;
 137              		.loc 1 55 4 view .LVU33
 138 0062 00BF     		.align	2
 139              	.L8:
 140 0064 00000000 		.word	.LANCHOR0
 141              		.cfi_endproc
 142              	.LFE0:
 144              		.align	1
 145              		.p2align 2,,3
 146              		.global	bldc_init
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 151              	bldc_init:
 152              	.LFB1:
  64:BLDC.c        **** 
  65:BLDC.c        **** void bldc_init()
  66:BLDC.c        **** {
 153              		.loc 1 66 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
  67:BLDC.c        **** 	// init commutation mode
  68:BLDC.c        **** 	gLastSetCommutationMode = 0xFF;
 157              		.loc 1 68 2 view .LVU35
 158              		.loc 1 68 26 is_stmt 0 view .LVU36
 159 0068 FF23     		movs	r3, #255
  66:BLDC.c        **** 	// init commutation mode
 160              		.loc 1 66 1 view .LVU37
 161 006a 10B5     		push	{r4, lr}
 162              	.LCFI6:
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 4, -8
 165              		.cfi_offset 14, -4
 166              		.loc 1 68 26 view .LVU38
 167 006c 094C     		ldr	r4, .L12
 168              	.LBB6:
 169              	.LBB7:
  43:BLDC.c        **** 
 170              		.loc 1 43 2 view .LVU39
 171 006e 4FF49E40 		mov	r0, #20224
 172              	.LBE7:
 173              	.LBE6:
 174              		.loc 1 68 26 view .LVU40
 175 0072 2371     		strb	r3, [r4, #4]
  69:BLDC.c        **** 	bldc_switchToMotionMode(STOP_MODE);
 176              		.loc 1 69 2 is_stmt 1 view .LVU41
 177              	.LVL13:
 178              	.LBB10:
 179              	.LBI6:
  41:BLDC.c        **** {
 180              		.loc 1 41 6 view .LVU42
 181              	.LBB8:
  43:BLDC.c        **** 
 182              		.loc 1 43 2 view .LVU43
 183 0074 FFF7FEFF 		bl	flags_clearStatusFlag
 184              	.LVL14:
  45:BLDC.c        **** 	{
 185              		.loc 1 45 2 view .LVU44
  48:BLDC.c        **** 			gMotionMode = STOP_MODE;
 186              		.loc 1 48 4 view .LVU45
 187 0078 4FF48070 		mov	r0, #256
 188 007c FFF7FEFF 		bl	flags_setStatusFlag
 189              	.LVL15:
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 190              		.loc 1 49 4 view .LVU46
  50:BLDC.c        **** 			break;
 191              		.loc 1 50 4 is_stmt 0 view .LVU47
 192 0080 0021     		movs	r1, #0
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 193              		.loc 1 49 16 view .LVU48
 194 0082 4FF48073 		mov	r3, #256
  50:BLDC.c        **** 			break;
 195              		.loc 1 50 4 view .LVU49
 196 0086 0846     		mov	r0, r1
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 197              		.loc 1 49 16 view .LVU50
 198 0088 2360     		str	r3, [r4]
  50:BLDC.c        **** 			break;
 199              		.loc 1 50 4 is_stmt 1 view .LVU51
 200              	.LBE8:
 201              	.LBE10:
  70:BLDC.c        **** }
 202              		.loc 1 70 1 is_stmt 0 view .LVU52
 203 008a BDE81040 		pop	{r4, lr}
 204              	.LCFI7:
 205              		.cfi_restore 14
 206              		.cfi_restore 4
 207              		.cfi_def_cfa_offset 0
 208              	.LBB11:
 209              	.LBB9:
  50:BLDC.c        **** 			break;
 210              		.loc 1 50 4 view .LVU53
 211 008e FFF7FEBF 		b	tmc4671_switchToMotionMode
 212              	.LVL16:
 213              	.L13:
 214 0092 00BF     		.align	2
 215              	.L12:
 216 0094 00000000 		.word	.LANCHOR0
 217              	.LBE9:
 218              	.LBE11:
 219              		.cfi_endproc
 220              	.LFE1:
 222              		.align	1
 223              		.p2align 2,,3
 224              		.global	bldc_getActualMotorCurrent
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 229              	bldc_getActualMotorCurrent:
 230              	.LFB2:
  71:BLDC.c        **** 
  72:BLDC.c        **** /* actual motor current in mA */
  73:BLDC.c        **** int bldc_getActualMotorCurrent()
  74:BLDC.c        **** {
 231              		.loc 1 74 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235              		@ link register save eliminated.
  75:BLDC.c        **** 	return tmc4671_getActualTorqueFluxSum_mA(DEFAULT_MC, motorConfig.dualShuntFactor);
 236              		.loc 1 75 2 view .LVU55
 237              		.loc 1 75 9 is_stmt 0 view .LVU56
 238 0098 024B     		ldr	r3, .L15
 239 009a 0020     		movs	r0, #0
 240 009c B3F86810 		ldrh	r1, [r3, #104]
 241 00a0 FFF7FEBF 		b	tmc4671_getActualTorqueFluxSum_mA
 242              	.LVL17:
 243              	.L16:
 244              		.align	2
 245              	.L15:
 246 00a4 00000000 		.word	motorConfig
 247              		.cfi_endproc
 248              	.LFE2:
 250              		.align	1
 251              		.p2align 2,,3
 252              		.global	bldc_getTargetMotorCurrent
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 257              	bldc_getTargetMotorCurrent:
 258              	.LFB3:
  76:BLDC.c        **** }
  77:BLDC.c        **** 
  78:BLDC.c        **** int bldc_getTargetMotorCurrent()
  79:BLDC.c        **** {
 259              		.loc 1 79 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
  80:BLDC.c        **** 	return tmc4671_getTargetTorqueFluxSum_mA(DEFAULT_MC, motorConfig.dualShuntFactor);
 264              		.loc 1 80 2 view .LVU58
 265              		.loc 1 80 9 is_stmt 0 view .LVU59
 266 00a8 024B     		ldr	r3, .L18
 267 00aa 0020     		movs	r0, #0
 268 00ac B3F86810 		ldrh	r1, [r3, #104]
 269 00b0 FFF7FEBF 		b	tmc4671_getTargetTorqueFluxSum_mA
 270              	.LVL18:
 271              	.L19:
 272              		.align	2
 273              	.L18:
 274 00b4 00000000 		.word	motorConfig
 275              		.cfi_endproc
 276              	.LFE3:
 278              		.align	1
 279              		.p2align 2,,3
 280              		.global	bldc_setTargetMotorCurrent
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 285              	bldc_setTargetMotorCurrent:
 286              	.LVL19:
 287              	.LFB4:
  81:BLDC.c        **** }
  82:BLDC.c        **** 
  83:BLDC.c        **** void bldc_setTargetMotorCurrent(int targetCurrent)
  84:BLDC.c        **** {
 288              		.loc 1 84 1 is_stmt 1 view -0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
  85:BLDC.c        **** 	if ((motorConfig.commutationMode == COMM_MODE_FOC_DISABLED)
 292              		.loc 1 85 2 view .LVU61
  84:BLDC.c        **** 	if ((motorConfig.commutationMode == COMM_MODE_FOC_DISABLED)
 293              		.loc 1 84 1 is_stmt 0 view .LVU62
 294 00b8 08B5     		push	{r3, lr}
 295              	.LCFI8:
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 3, -8
 298              		.cfi_offset 14, -4
 299              		.loc 1 85 18 view .LVU63
 300 00ba 114B     		ldr	r3, .L24
 301              		.loc 1 85 5 view .LVU64
 302 00bc 93F86A20 		ldrb	r2, [r3, #106]	@ zero_extendqisi2
 303 00c0 012A     		cmp	r2, #1
 304 00c2 07D9     		bls	.L20
  86:BLDC.c        **** 	  ||(motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP))
  87:BLDC.c        **** 		return;
  88:BLDC.c        **** 
  89:BLDC.c        **** 	if((targetCurrent >= -MAX_TORQUE) && (targetCurrent <= MAX_TORQUE))
 305              		.loc 1 89 2 is_stmt 1 view .LVU65
 306              		.loc 1 89 4 is_stmt 0 view .LVU66
 307 00c4 4EF66021 		movw	r1, #60000
 308              		.loc 1 89 36 view .LVU67
 309 00c8 00F5EA42 		add	r2, r0, #29952
 310 00cc 3032     		adds	r2, r2, #48
 311              		.loc 1 89 4 view .LVU68
 312 00ce 8A42     		cmp	r2, r1
 313 00d0 0346     		mov	r3, r0
 314 00d2 00D9     		bls	.L23
 315              	.L20:
  90:BLDC.c        **** 	{
  91:BLDC.c        **** 		gTargetTorque = targetCurrent;
  92:BLDC.c        **** 
  93:BLDC.c        **** 		// switch to torque mode
  94:BLDC.c        **** 		bldc_switchToMotionMode(TORQUE_MODE);
  95:BLDC.c        **** 	}
  96:BLDC.c        **** }
 316              		.loc 1 96 1 view .LVU69
 317 00d4 08BD     		pop	{r3, pc}
 318              	.L23:
  91:BLDC.c        **** 
 319              		.loc 1 91 3 is_stmt 1 view .LVU70
  91:BLDC.c        **** 
 320              		.loc 1 91 17 is_stmt 0 view .LVU71
 321 00d6 0B4A     		ldr	r2, .L24+4
 322              	.LBB14:
 323              	.LBB15:
  43:BLDC.c        **** 
 324              		.loc 1 43 2 view .LVU72
 325 00d8 4FF49E40 		mov	r0, #20224
 326              	.LVL20:
  43:BLDC.c        **** 
 327              		.loc 1 43 2 view .LVU73
 328              	.LBE15:
 329              	.LBE14:
  91:BLDC.c        **** 
 330              		.loc 1 91 17 view .LVU74
 331 00dc 1360     		str	r3, [r2]
  94:BLDC.c        **** 	}
 332              		.loc 1 94 3 is_stmt 1 view .LVU75
 333              	.LVL21:
 334              	.LBB18:
 335              	.LBI14:
  41:BLDC.c        **** {
 336              		.loc 1 41 6 view .LVU76
 337              	.LBB16:
  43:BLDC.c        **** 
 338              		.loc 1 43 2 view .LVU77
 339 00de FFF7FEFF 		bl	flags_clearStatusFlag
 340              	.LVL22:
  45:BLDC.c        **** 	{
 341              		.loc 1 45 2 view .LVU78
  53:BLDC.c        **** 			gMotionMode = TORQUE_MODE;
 342              		.loc 1 53 4 view .LVU79
 343 00e2 4FF40060 		mov	r0, #2048
 344 00e6 FFF7FEFF 		bl	flags_setStatusFlag
 345              	.LVL23:
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 346              		.loc 1 54 4 view .LVU80
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 347              		.loc 1 54 16 is_stmt 0 view .LVU81
 348 00ea 4FF40062 		mov	r2, #2048
 349 00ee 064B     		ldr	r3, .L24+8
  55:BLDC.c        **** 			break;
 350              		.loc 1 55 4 view .LVU82
 351 00f0 0121     		movs	r1, #1
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 352              		.loc 1 54 16 view .LVU83
 353 00f2 1A60     		str	r2, [r3]
  55:BLDC.c        **** 			break;
 354              		.loc 1 55 4 is_stmt 1 view .LVU84
 355 00f4 0020     		movs	r0, #0
 356              	.LBE16:
 357              	.LBE18:
 358              		.loc 1 96 1 is_stmt 0 view .LVU85
 359 00f6 BDE80840 		pop	{r3, lr}
 360              	.LCFI9:
 361              		.cfi_restore 14
 362              		.cfi_restore 3
 363              		.cfi_def_cfa_offset 0
 364              	.LBB19:
 365              	.LBB17:
  55:BLDC.c        **** 			break;
 366              		.loc 1 55 4 view .LVU86
 367 00fa FFF7FEBF 		b	tmc4671_switchToMotionMode
 368              	.LVL24:
 369              	.L25:
 370 00fe 00BF     		.align	2
 371              	.L24:
 372 0100 00000000 		.word	motorConfig
 373 0104 00000000 		.word	.LANCHOR1
 374 0108 00000000 		.word	.LANCHOR0
 375              	.LBE17:
 376              	.LBE19:
 377              		.cfi_endproc
 378              	.LFE4:
 380              		.align	1
 381              		.p2align 2,,3
 382              		.global	bldc_getTargetVelocity
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 387              	bldc_getTargetVelocity:
 388              	.LFB5:
  97:BLDC.c        **** 
  98:BLDC.c        **** int bldc_getTargetVelocity()
  99:BLDC.c        **** {
 389              		.loc 1 99 1 is_stmt 1 view -0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 100:BLDC.c        **** 	return (motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP) ? tmc4671_readInt(DEFAULT_MC, TMC4
 394              		.loc 1 100 2 view .LVU88
 395              		.loc 1 100 21 is_stmt 0 view .LVU89
 396 010c 054B     		ldr	r3, .L29
 397              		.loc 1 100 130 view .LVU90
 398 010e 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 399 0112 012B     		cmp	r3, #1
 400 0114 02D0     		beq	.L28
 401              		.loc 1 100 130 discriminator 2 view .LVU91
 402 0116 044B     		ldr	r3, .L29+4
 101:BLDC.c        **** }
 403              		.loc 1 101 1 discriminator 2 view .LVU92
 404 0118 5868     		ldr	r0, [r3, #4]
 405 011a 7047     		bx	lr
 406              	.L28:
 100:BLDC.c        **** 	return (motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP) ? tmc4671_readInt(DEFAULT_MC, TMC4
 407              		.loc 1 100 68 discriminator 1 view .LVU93
 408 011c 2121     		movs	r1, #33
 409 011e 0020     		movs	r0, #0
 410 0120 FFF7FEBF 		b	tmc4671_readInt
 411              	.LVL25:
 412              	.L30:
 413              		.align	2
 414              	.L29:
 415 0124 00000000 		.word	motorConfig
 416 0128 00000000 		.word	.LANCHOR1
 417              		.cfi_endproc
 418              	.LFE5:
 420              		.align	1
 421              		.p2align 2,,3
 422              		.global	bldc_setTargetVelocity
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 427              	bldc_setTargetVelocity:
 428              	.LVL26:
 429              	.LFB6:
 102:BLDC.c        **** 
 103:BLDC.c        **** /* set target velocity [rpm] (x{>0:CW | 0:Stop | <0: CCW} */
 104:BLDC.c        **** void bldc_setTargetVelocity(int velocity)
 105:BLDC.c        **** {
 430              		.loc 1 105 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 106:BLDC.c        **** 	if (motorConfig.commutationMode == COMM_MODE_FOC_DISABLED)
 434              		.loc 1 106 2 view .LVU95
 105:BLDC.c        **** 	if (motorConfig.commutationMode == COMM_MODE_FOC_DISABLED)
 435              		.loc 1 105 1 is_stmt 0 view .LVU96
 436 012c 08B5     		push	{r3, lr}
 437              	.LCFI10:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 3, -8
 440              		.cfi_offset 14, -4
 441              		.loc 1 106 17 view .LVU97
 442 012e 104B     		ldr	r3, .L38
 443              		.loc 1 106 5 view .LVU98
 444 0130 93F86A20 		ldrb	r2, [r3, #106]	@ zero_extendqisi2
 445 0134 3AB1     		cbz	r2, .L31
 446              	.LVL27:
 447              	.LBB24:
 448              	.LBI24:
 104:BLDC.c        **** {
 449              		.loc 1 104 6 is_stmt 1 view .LVU99
 450              	.LBB25:
 107:BLDC.c        **** 		return;
 108:BLDC.c        **** 
 109:BLDC.c        **** 	if ((velocity >= -MAX_VELOCITY) && (velocity <= MAX_VELOCITY))
 451              		.loc 1 109 2 view .LVU100
 452              		.loc 1 109 5 is_stmt 0 view .LVU101
 453 0136 0F49     		ldr	r1, .L38+4
 454              		.loc 1 109 34 view .LVU102
 455 0138 00F54332 		add	r2, r0, #199680
 456 013c 02F5A072 		add	r2, r2, #320
 457              		.loc 1 109 5 view .LVU103
 458 0140 8A42     		cmp	r2, r1
 459 0142 0346     		mov	r3, r0
 460 0144 00D9     		bls	.L37
 461              	.LVL28:
 462              	.L31:
 463              		.loc 1 109 5 view .LVU104
 464              	.LBE25:
 465              	.LBE24:
 110:BLDC.c        **** 	{
 111:BLDC.c        **** 		gDesiredVelocity = velocity;
 112:BLDC.c        **** 
 113:BLDC.c        **** 		// switch to velocity motion mode
 114:BLDC.c        **** 		bldc_switchToMotionMode(VELOCITY_MODE);
 115:BLDC.c        **** 	}
 116:BLDC.c        **** }
 466              		.loc 1 116 1 view .LVU105
 467 0146 08BD     		pop	{r3, pc}
 468              	.LVL29:
 469              	.L37:
 470              	.LBB34:
 471              	.LBB32:
 111:BLDC.c        **** 
 472              		.loc 1 111 3 is_stmt 1 view .LVU106
 111:BLDC.c        **** 
 473              		.loc 1 111 20 is_stmt 0 view .LVU107
 474 0148 0B4A     		ldr	r2, .L38+8
 475              	.LBB26:
 476              	.LBB27:
  43:BLDC.c        **** 
 477              		.loc 1 43 2 view .LVU108
 478 014a 4FF49E40 		mov	r0, #20224
 479              	.LVL30:
  43:BLDC.c        **** 
 480              		.loc 1 43 2 view .LVU109
 481              	.LBE27:
 482              	.LBE26:
 111:BLDC.c        **** 
 483              		.loc 1 111 20 view .LVU110
 484 014e 5360     		str	r3, [r2, #4]
 114:BLDC.c        **** 	}
 485              		.loc 1 114 3 is_stmt 1 view .LVU111
 486              	.LVL31:
 487              	.LBB30:
 488              	.LBI26:
  41:BLDC.c        **** {
 489              		.loc 1 41 6 view .LVU112
 490              	.LBB28:
  43:BLDC.c        **** 
 491              		.loc 1 43 2 view .LVU113
 492 0150 FFF7FEFF 		bl	flags_clearStatusFlag
 493              	.LVL32:
  45:BLDC.c        **** 	{
 494              		.loc 1 45 2 view .LVU114
  58:BLDC.c        **** 			gMotionMode = VELOCITY_MODE;
 495              		.loc 1 58 4 view .LVU115
 496 0154 4FF40070 		mov	r0, #512
 497 0158 FFF7FEFF 		bl	flags_setStatusFlag
 498              	.LVL33:
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
 499              		.loc 1 59 4 view .LVU116
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
 500              		.loc 1 59 16 is_stmt 0 view .LVU117
 501 015c 4FF40072 		mov	r2, #512
 502 0160 064B     		ldr	r3, .L38+12
  60:BLDC.c        **** 			break;
 503              		.loc 1 60 4 view .LVU118
 504 0162 0221     		movs	r1, #2
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
 505              		.loc 1 59 16 view .LVU119
 506 0164 1A60     		str	r2, [r3]
  60:BLDC.c        **** 			break;
 507              		.loc 1 60 4 is_stmt 1 view .LVU120
 508 0166 0020     		movs	r0, #0
 509              	.LBE28:
 510              	.LBE30:
 511              	.LBE32:
 512              	.LBE34:
 513              		.loc 1 116 1 is_stmt 0 view .LVU121
 514 0168 BDE80840 		pop	{r3, lr}
 515              	.LCFI11:
 516              		.cfi_restore 14
 517              		.cfi_restore 3
 518              		.cfi_def_cfa_offset 0
 519              	.LBB35:
 520              	.LBB33:
 521              	.LBB31:
 522              	.LBB29:
  60:BLDC.c        **** 			break;
 523              		.loc 1 60 4 view .LVU122
 524 016c FFF7FEBF 		b	tmc4671_switchToMotionMode
 525              	.LVL34:
 526              	.L39:
 527              		.align	2
 528              	.L38:
 529 0170 00000000 		.word	motorConfig
 530 0174 801A0600 		.word	400000
 531 0178 00000000 		.word	.LANCHOR1
 532 017c 00000000 		.word	.LANCHOR0
 533              	.LBE29:
 534              	.LBE31:
 535              	.LBE33:
 536              	.LBE35:
 537              		.cfi_endproc
 538              	.LFE6:
 540              		.align	1
 541              		.p2align 2,,3
 542              		.global	bldc_getRampGeneratorVelocity
 543              		.syntax unified
 544              		.thumb
 545              		.thumb_func
 547              	bldc_getRampGeneratorVelocity:
 548              	.LFB7:
 117:BLDC.c        **** 
 118:BLDC.c        **** /* actual ramp generator velocity */
 119:BLDC.c        **** int bldc_getRampGeneratorVelocity()
 120:BLDC.c        **** {
 549              		.loc 1 120 1 is_stmt 1 view -0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 121:BLDC.c        **** 	if (motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP)
 554              		.loc 1 121 2 view .LVU124
 555              		.loc 1 121 17 is_stmt 0 view .LVU125
 556 0180 054B     		ldr	r3, .L43
 557              		.loc 1 121 5 view .LVU126
 558 0182 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 559 0186 012B     		cmp	r3, #1
 560 0188 02D0     		beq	.L42
 122:BLDC.c        **** 		return tmc4671_readInt(DEFAULT_MC, TMC4671_OPENLOOP_VELOCITY_ACTUAL);
 123:BLDC.c        **** 	else
 124:BLDC.c        **** 		return rampGenerator.rampVelocity;
 561              		.loc 1 124 3 is_stmt 1 view .LVU127
 562              		.loc 1 124 23 is_stmt 0 view .LVU128
 563 018a 044B     		ldr	r3, .L43+4
 125:BLDC.c        **** }
 564              		.loc 1 125 1 view .LVU129
 565 018c 1869     		ldr	r0, [r3, #16]
 566 018e 7047     		bx	lr
 567              	.L42:
 122:BLDC.c        **** 		return tmc4671_readInt(DEFAULT_MC, TMC4671_OPENLOOP_VELOCITY_ACTUAL);
 568              		.loc 1 122 3 is_stmt 1 view .LVU130
 122:BLDC.c        **** 		return tmc4671_readInt(DEFAULT_MC, TMC4671_OPENLOOP_VELOCITY_ACTUAL);
 569              		.loc 1 122 10 is_stmt 0 view .LVU131
 570 0190 2221     		movs	r1, #34
 571 0192 0020     		movs	r0, #0
 572 0194 FFF7FEBF 		b	tmc4671_readInt
 573              	.LVL35:
 574              	.L44:
 575              		.align	2
 576              	.L43:
 577 0198 00000000 		.word	motorConfig
 578 019c 00000000 		.word	rampGenerator
 579              		.cfi_endproc
 580              	.LFE7:
 582              		.align	1
 583              		.p2align 2,,3
 584              		.global	bldc_getActualVelocity
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 589              	bldc_getActualVelocity:
 590              	.LFB8:
 126:BLDC.c        **** 
 127:BLDC.c        **** /* actual velocity in rpm */
 128:BLDC.c        **** int bldc_getActualVelocity()
 129:BLDC.c        **** {
 591              		.loc 1 129 1 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 130:BLDC.c        **** 	return tmc4671_readInt(DEFAULT_MC, (motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP) ? TMC4
 596              		.loc 1 130 2 view .LVU133
 597              		.loc 1 130 49 is_stmt 0 view .LVU134
 598 01a0 044B     		ldr	r3, .L48
 599              		.loc 1 130 9 view .LVU135
 600 01a2 0020     		movs	r0, #0
 601 01a4 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 602 01a8 012B     		cmp	r3, #1
 603 01aa 0CBF     		ite	eq
 604 01ac 2221     		moveq	r1, #34
 605 01ae 6A21     		movne	r1, #106
 606 01b0 FFF7FEBF 		b	tmc4671_readInt
 607              	.LVL36:
 608              	.L49:
 609              		.align	2
 610              	.L48:
 611 01b4 00000000 		.word	motorConfig
 612              		.cfi_endproc
 613              	.LFE8:
 615              		.align	1
 616              		.p2align 2,,3
 617              		.global	bldc_getMaxVelocity
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 622              	bldc_getMaxVelocity:
 623              	.LFB9:
 131:BLDC.c        **** }
 132:BLDC.c        **** 
 133:BLDC.c        **** int bldc_getMaxVelocity()
 134:BLDC.c        **** {
 624              		.loc 1 134 1 is_stmt 1 view -0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 0
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 135:BLDC.c        **** 	return motorConfig.maxPositioningSpeed;
 629              		.loc 1 135 2 view .LVU137
 630              		.loc 1 135 20 is_stmt 0 view .LVU138
 631 01b8 014B     		ldr	r3, .L51
 136:BLDC.c        **** }
 632              		.loc 1 136 1 view .LVU139
 633 01ba 986D     		ldr	r0, [r3, #88]
 634 01bc 7047     		bx	lr
 635              	.L52:
 636 01be 00BF     		.align	2
 637              	.L51:
 638 01c0 00000000 		.word	motorConfig
 639              		.cfi_endproc
 640              	.LFE9:
 642              		.align	1
 643              		.p2align 2,,3
 644              		.global	bldc_setMaxVelocity
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 649              	bldc_setMaxVelocity:
 650              	.LVL37:
 651              	.LFB10:
 137:BLDC.c        **** 
 138:BLDC.c        **** bool bldc_setMaxVelocity(int maxVelocity)
 139:BLDC.c        **** {
 652              		.loc 1 139 1 is_stmt 1 view -0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 140:BLDC.c        **** 	if((maxVelocity >= 0) && (maxVelocity <= MAX_VELOCITY))
 656              		.loc 1 140 2 view .LVU141
 657              		.loc 1 140 4 is_stmt 0 view .LVU142
 658 01c4 084B     		ldr	r3, .L61
 659 01c6 9842     		cmp	r0, r3
 660 01c8 01D9     		bls	.L60
 141:BLDC.c        **** 	{
 142:BLDC.c        **** 		motorConfig.maxPositioningSpeed = maxVelocity;
 143:BLDC.c        **** 		rampGenerator.maxVelocity = maxVelocity;
 144:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_PID_VELOCITY_LIMIT, maxVelocity);
 145:BLDC.c        **** 		return true;
 146:BLDC.c        **** 	}
 147:BLDC.c        **** 	return false;
 661              		.loc 1 147 9 view .LVU143
 662 01ca 0020     		movs	r0, #0
 663              	.LVL38:
 148:BLDC.c        **** }
 664              		.loc 1 148 1 view .LVU144
 665 01cc 7047     		bx	lr
 666              	.LVL39:
 667              	.L60:
 142:BLDC.c        **** 		rampGenerator.maxVelocity = maxVelocity;
 668              		.loc 1 142 3 is_stmt 1 view .LVU145
 139:BLDC.c        **** 	if((maxVelocity >= 0) && (maxVelocity <= MAX_VELOCITY))
 669              		.loc 1 139 1 is_stmt 0 view .LVU146
 670 01ce 10B5     		push	{r4, lr}
 671              	.LCFI12:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 4, -8
 674              		.cfi_offset 14, -4
 143:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_PID_VELOCITY_LIMIT, maxVelocity);
 675              		.loc 1 143 29 view .LVU147
 676 01d0 064B     		ldr	r3, .L61+4
 142:BLDC.c        **** 		rampGenerator.maxVelocity = maxVelocity;
 677              		.loc 1 142 35 view .LVU148
 678 01d2 074C     		ldr	r4, .L61+8
 144:BLDC.c        **** 		return true;
 679              		.loc 1 144 3 view .LVU149
 680 01d4 0246     		mov	r2, r0
 142:BLDC.c        **** 		rampGenerator.maxVelocity = maxVelocity;
 681              		.loc 1 142 35 view .LVU150
 682 01d6 A065     		str	r0, [r4, #88]
 143:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_PID_VELOCITY_LIMIT, maxVelocity);
 683              		.loc 1 143 3 is_stmt 1 view .LVU151
 143:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_PID_VELOCITY_LIMIT, maxVelocity);
 684              		.loc 1 143 29 is_stmt 0 view .LVU152
 685 01d8 1860     		str	r0, [r3]
 144:BLDC.c        **** 		return true;
 686              		.loc 1 144 3 is_stmt 1 view .LVU153
 687 01da 6021     		movs	r1, #96
 688 01dc 0020     		movs	r0, #0
 689              	.LVL40:
 144:BLDC.c        **** 		return true;
 690              		.loc 1 144 3 is_stmt 0 view .LVU154
 691 01de FFF7FEFF 		bl	tmc4671_writeInt
 692              	.LVL41:
 145:BLDC.c        **** 	}
 693              		.loc 1 145 3 is_stmt 1 view .LVU155
 145:BLDC.c        **** 	}
 694              		.loc 1 145 10 is_stmt 0 view .LVU156
 695 01e2 0120     		movs	r0, #1
 696              		.loc 1 148 1 view .LVU157
 697 01e4 10BD     		pop	{r4, pc}
 698              	.L62:
 699 01e6 00BF     		.align	2
 700              	.L61:
 701 01e8 400D0300 		.word	200000
 702 01ec 00000000 		.word	rampGenerator
 703 01f0 00000000 		.word	motorConfig
 704              		.cfi_endproc
 705              	.LFE10:
 707              		.align	1
 708              		.p2align 2,,3
 709              		.global	bldc_setAcceleration
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 714              	bldc_setAcceleration:
 715              	.LVL42:
 716              	.LFB11:
 149:BLDC.c        **** 
 150:BLDC.c        **** bool bldc_setAcceleration(int acceleration)
 151:BLDC.c        **** {
 717              		.loc 1 151 1 is_stmt 1 view -0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 152:BLDC.c        **** 	if((acceleration >= 0) && (acceleration <= MAX_ACCELERATION))
 721              		.loc 1 152 2 view .LVU159
 722              		.loc 1 152 4 is_stmt 0 view .LVU160
 723 01f4 084B     		ldr	r3, .L71
 724 01f6 9842     		cmp	r0, r3
 725 01f8 01D9     		bls	.L70
 153:BLDC.c        **** 	{
 154:BLDC.c        **** 		motorConfig.acceleration = acceleration;
 155:BLDC.c        **** 		rampGenerator.acceleration = acceleration;
 156:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_OPENLOOP_ACCELERATION, acceleration);
 157:BLDC.c        **** 		return true;
 158:BLDC.c        **** 	}
 159:BLDC.c        **** 	return false;
 726              		.loc 1 159 9 view .LVU161
 727 01fa 0020     		movs	r0, #0
 728              	.LVL43:
 160:BLDC.c        **** }
 729              		.loc 1 160 1 view .LVU162
 730 01fc 7047     		bx	lr
 731              	.LVL44:
 732              	.L70:
 154:BLDC.c        **** 		rampGenerator.acceleration = acceleration;
 733              		.loc 1 154 3 is_stmt 1 view .LVU163
 151:BLDC.c        **** 	if((acceleration >= 0) && (acceleration <= MAX_ACCELERATION))
 734              		.loc 1 151 1 is_stmt 0 view .LVU164
 735 01fe 10B5     		push	{r4, lr}
 736              	.LCFI13:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 4, -8
 739              		.cfi_offset 14, -4
 155:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_OPENLOOP_ACCELERATION, acceleration);
 740              		.loc 1 155 30 view .LVU165
 741 0200 064B     		ldr	r3, .L71+4
 154:BLDC.c        **** 		rampGenerator.acceleration = acceleration;
 742              		.loc 1 154 28 view .LVU166
 743 0202 074C     		ldr	r4, .L71+8
 156:BLDC.c        **** 		return true;
 744              		.loc 1 156 3 view .LVU167
 745 0204 0246     		mov	r2, r0
 154:BLDC.c        **** 		rampGenerator.acceleration = acceleration;
 746              		.loc 1 154 28 view .LVU168
 747 0206 E065     		str	r0, [r4, #92]
 155:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_OPENLOOP_ACCELERATION, acceleration);
 748              		.loc 1 155 3 is_stmt 1 view .LVU169
 155:BLDC.c        **** 		tmc4671_writeInt(DEFAULT_MC, TMC4671_OPENLOOP_ACCELERATION, acceleration);
 749              		.loc 1 155 30 is_stmt 0 view .LVU170
 750 0208 5861     		str	r0, [r3, #20]
 156:BLDC.c        **** 		return true;
 751              		.loc 1 156 3 is_stmt 1 view .LVU171
 752 020a 2021     		movs	r1, #32
 753 020c 0020     		movs	r0, #0
 754              	.LVL45:
 156:BLDC.c        **** 		return true;
 755              		.loc 1 156 3 is_stmt 0 view .LVU172
 756 020e FFF7FEFF 		bl	tmc4671_writeInt
 757              	.LVL46:
 157:BLDC.c        **** 	}
 758              		.loc 1 157 3 is_stmt 1 view .LVU173
 157:BLDC.c        **** 	}
 759              		.loc 1 157 10 is_stmt 0 view .LVU174
 760 0212 0120     		movs	r0, #1
 761              		.loc 1 160 1 view .LVU175
 762 0214 10BD     		pop	{r4, pc}
 763              	.L72:
 764 0216 00BF     		.align	2
 765              	.L71:
 766 0218 A0860100 		.word	100000
 767 021c 00000000 		.word	rampGenerator
 768 0220 00000000 		.word	motorConfig
 769              		.cfi_endproc
 770              	.LFE11:
 772              		.align	1
 773              		.p2align 2,,3
 774              		.global	bldc_setRampEnabled
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 779              	bldc_setRampEnabled:
 780              	.LVL47:
 781              	.LFB12:
 161:BLDC.c        **** 
 162:BLDC.c        **** bool bldc_setRampEnabled(int enableRamp)
 163:BLDC.c        **** {
 782              		.loc 1 163 1 is_stmt 1 view -0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 164:BLDC.c        **** 	if((enableRamp == 0) || (enableRamp == 1))
 787              		.loc 1 164 2 view .LVU177
 788              		.loc 1 164 4 is_stmt 0 view .LVU178
 789 0224 0128     		cmp	r0, #1
 790 0226 01D9     		bls	.L76
 165:BLDC.c        **** 	{
 166:BLDC.c        **** 		motorConfig.useVelocityRamp = enableRamp;
 167:BLDC.c        **** 		rampGenerator.rampEnabled = enableRamp;
 168:BLDC.c        **** 		return true;
 169:BLDC.c        **** 	}
 170:BLDC.c        **** 	return false;
 791              		.loc 1 170 9 view .LVU179
 792 0228 0020     		movs	r0, #0
 793              	.LVL48:
 171:BLDC.c        **** }
 794              		.loc 1 171 1 view .LVU180
 795 022a 7047     		bx	lr
 796              	.LVL49:
 797              	.L76:
 166:BLDC.c        **** 		rampGenerator.rampEnabled = enableRamp;
 798              		.loc 1 166 3 is_stmt 1 view .LVU181
 166:BLDC.c        **** 		rampGenerator.rampEnabled = enableRamp;
 799              		.loc 1 166 31 is_stmt 0 view .LVU182
 800 022c 0449     		ldr	r1, .L77
 167:BLDC.c        **** 		return true;
 801              		.loc 1 167 29 view .LVU183
 802 022e 054A     		ldr	r2, .L77+4
 166:BLDC.c        **** 		rampGenerator.rampEnabled = enableRamp;
 803              		.loc 1 166 31 view .LVU184
 804 0230 C3B2     		uxtb	r3, r0
 805 0232 81F87B30 		strb	r3, [r1, #123]
 167:BLDC.c        **** 		return true;
 806              		.loc 1 167 3 is_stmt 1 view .LVU185
 168:BLDC.c        **** 	}
 807              		.loc 1 168 10 is_stmt 0 view .LVU186
 808 0236 0120     		movs	r0, #1
 809              	.LVL50:
 167:BLDC.c        **** 		return true;
 810              		.loc 1 167 29 view .LVU187
 811 0238 82F82430 		strb	r3, [r2, #36]
 168:BLDC.c        **** 	}
 812              		.loc 1 168 3 is_stmt 1 view .LVU188
 168:BLDC.c        **** 	}
 813              		.loc 1 168 10 is_stmt 0 view .LVU189
 814 023c 7047     		bx	lr
 815              	.L78:
 816 023e 00BF     		.align	2
 817              	.L77:
 818 0240 00000000 		.word	motorConfig
 819 0244 00000000 		.word	rampGenerator
 820              		.cfi_endproc
 821              	.LFE12:
 823              		.align	1
 824              		.p2align 2,,3
 825              		.global	bldc_checkSupplyVoltage
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 830              	bldc_checkSupplyVoltage:
 831              	.LFB13:
 172:BLDC.c        **** 
 173:BLDC.c        **** /* observe over-/under-voltage and disable driver if necessary */
 174:BLDC.c        **** void bldc_checkSupplyVoltage()
 175:BLDC.c        **** {
 832              		.loc 1 175 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 176:BLDC.c        **** 	// update actual voltage [100mV]
 177:BLDC.c        **** 	gActualSupplyVoltage = (VOLTAGE_FACTOR_SUPPLY*tmcm_getModuleSpecificADCValue(ADC_SUPPLY_VOLTAGE))/
 836              		.loc 1 177 2 view .LVU191
 175:BLDC.c        **** 	// update actual voltage [100mV]
 837              		.loc 1 175 1 is_stmt 0 view .LVU192
 838 0248 08B5     		push	{r3, lr}
 839              	.LCFI14:
 840              		.cfi_def_cfa_offset 8
 841              		.cfi_offset 3, -8
 842              		.cfi_offset 14, -4
 843              		.loc 1 177 48 view .LVU193
 844 024a 214B     		ldr	r3, .L87
 845 024c 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 846 024e FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 847              	.LVL51:
 848              		.loc 1 177 47 view .LVU194
 849 0252 4FF4397C 		mov	ip, #740
 850 0256 0CFB00F0 		mul	r0, ip, r0
 851              		.loc 1 177 99 view .LVU195
 852 025a 1E4B     		ldr	r3, .L87+4
 178:BLDC.c        **** 
 179:BLDC.c        **** 	if (gActualSupplyVoltage >= MAX_SUPPLY_VOLTAGE)
 853              		.loc 1 179 5 view .LVU196
 854 025c 1E4A     		ldr	r2, .L87+8
 177:BLDC.c        **** 
 855              		.loc 1 177 99 view .LVU197
 856 025e A3FB00C3 		umull	ip, r3, r3, r0
 857 0262 A0EB030C 		sub	ip, r0, r3
 177:BLDC.c        **** 
 858              		.loc 1 177 23 view .LVU198
 859 0266 1D49     		ldr	r1, .L87+12
 177:BLDC.c        **** 
 860              		.loc 1 177 99 view .LVU199
 861 0268 03EB5C03 		add	r3, r3, ip, lsr #1
 862 026c DB0A     		lsrs	r3, r3, #11
 863              		.loc 1 179 5 view .LVU200
 864 026e 9042     		cmp	r0, r2
 177:BLDC.c        **** 
 865              		.loc 1 177 23 view .LVU201
 866 0270 8B60     		str	r3, [r1, #8]
 867              		.loc 1 179 2 is_stmt 1 view .LVU202
 868              		.loc 1 179 5 is_stmt 0 view .LVU203
 869 0272 1FD2     		bcs	.L84
 180:BLDC.c        **** 	{
 181:BLDC.c        **** 		flags_setStatusFlag(OVERVOLTAGE);
 182:BLDC.c        **** 	}
 183:BLDC.c        **** 	else if (gActualSupplyVoltage <= MIN_SUPPLY_VOLTAGE)
 870              		.loc 1 183 7 is_stmt 1 view .LVU204
 871              		.loc 1 183 10 is_stmt 0 view .LVU205
 872 0274 1A4A     		ldr	r2, .L87+16
 873 0276 9042     		cmp	r0, r2
 874 0278 02D9     		bls	.L85
 184:BLDC.c        **** 	{
 185:BLDC.c        **** 		flags_setStatusFlag(UNDERVOLTAGE);
 186:BLDC.c        **** 		bldc_switchToMotionMode(STOP_MODE);
 187:BLDC.c        **** 		tmcm_disableDriver();
 188:BLDC.c        **** 		flags_clearStatusFlag(OVERVOLTAGE);
 189:BLDC.c        **** 	}
 190:BLDC.c        **** 	else if (gActualSupplyVoltage > ON__SUPPLY_VOLTAGE)
 875              		.loc 1 190 7 is_stmt 1 view .LVU206
 876              		.loc 1 190 10 is_stmt 0 view .LVU207
 877 027a 8C2B     		cmp	r3, #140
 878 027c 1FDC     		bgt	.L86
 191:BLDC.c        **** 	{
 192:BLDC.c        **** 		flags_clearStatusFlag(OVERVOLTAGE);
 193:BLDC.c        **** 		flags_clearStatusFlag(UNDERVOLTAGE);
 194:BLDC.c        **** 	}
 195:BLDC.c        **** }
 879              		.loc 1 195 1 view .LVU208
 880 027e 08BD     		pop	{r3, pc}
 881              	.L85:
 882              	.LBB40:
 883              	.LBI40:
 174:BLDC.c        **** {
 884              		.loc 1 174 6 is_stmt 1 view .LVU209
 885              	.LBB41:
 185:BLDC.c        **** 		bldc_switchToMotionMode(STOP_MODE);
 886              		.loc 1 185 3 view .LVU210
 887 0280 0220     		movs	r0, #2
 888 0282 FFF7FEFF 		bl	flags_setStatusFlag
 889              	.LVL52:
 186:BLDC.c        **** 		tmcm_disableDriver();
 890              		.loc 1 186 3 view .LVU211
 891              	.LBB42:
 892              	.LBI42:
  41:BLDC.c        **** {
 893              		.loc 1 41 6 view .LVU212
 894              	.LBB43:
  43:BLDC.c        **** 
 895              		.loc 1 43 2 view .LVU213
 896 0286 4FF49E40 		mov	r0, #20224
 897 028a FFF7FEFF 		bl	flags_clearStatusFlag
 898              	.LVL53:
  45:BLDC.c        **** 	{
 899              		.loc 1 45 2 view .LVU214
  48:BLDC.c        **** 			gMotionMode = STOP_MODE;
 900              		.loc 1 48 4 view .LVU215
 901 028e 4FF48070 		mov	r0, #256
 902 0292 FFF7FEFF 		bl	flags_setStatusFlag
 903              	.LVL54:
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 904              		.loc 1 49 4 view .LVU216
  50:BLDC.c        **** 			break;
 905              		.loc 1 50 4 is_stmt 0 view .LVU217
 906 0296 0021     		movs	r1, #0
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 907              		.loc 1 49 16 view .LVU218
 908 0298 4FF48072 		mov	r2, #256
 909 029c 114B     		ldr	r3, .L87+20
  50:BLDC.c        **** 			break;
 910              		.loc 1 50 4 view .LVU219
 911 029e 0846     		mov	r0, r1
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 912              		.loc 1 49 16 view .LVU220
 913 02a0 1A60     		str	r2, [r3]
  50:BLDC.c        **** 			break;
 914              		.loc 1 50 4 is_stmt 1 view .LVU221
 915 02a2 FFF7FEFF 		bl	tmc4671_switchToMotionMode
 916              	.LVL55:
  51:BLDC.c        **** 		case TORQUE_MODE:
 917              		.loc 1 51 4 view .LVU222
  51:BLDC.c        **** 		case TORQUE_MODE:
 918              		.loc 1 51 4 is_stmt 0 view .LVU223
 919              	.LBE43:
 920              	.LBE42:
 187:BLDC.c        **** 		flags_clearStatusFlag(OVERVOLTAGE);
 921              		.loc 1 187 3 is_stmt 1 view .LVU224
 922 02a6 FFF7FEFF 		bl	tmcm_disableDriver
 923              	.LVL56:
 188:BLDC.c        **** 	}
 924              		.loc 1 188 3 view .LVU225
 925              	.LBE41:
 926              	.LBE40:
 927              		.loc 1 195 1 is_stmt 0 view .LVU226
 928 02aa BDE80840 		pop	{r3, lr}
 929              	.LCFI15:
 930              		.cfi_remember_state
 931              		.cfi_restore 14
 932              		.cfi_restore 3
 933              		.cfi_def_cfa_offset 0
 934              	.LBB45:
 935              	.LBB44:
 188:BLDC.c        **** 	}
 936              		.loc 1 188 3 view .LVU227
 937 02ae 0420     		movs	r0, #4
 938 02b0 FFF7FEBF 		b	flags_clearStatusFlag
 939              	.LVL57:
 940              	.L84:
 941              	.LCFI16:
 942              		.cfi_restore_state
 943              	.LBE44:
 944              	.LBE45:
 181:BLDC.c        **** 	}
 945              		.loc 1 181 3 is_stmt 1 view .LVU228
 946 02b4 0420     		movs	r0, #4
 947              		.loc 1 195 1 is_stmt 0 view .LVU229
 948 02b6 BDE80840 		pop	{r3, lr}
 949              	.LCFI17:
 950              		.cfi_remember_state
 951              		.cfi_restore 14
 952              		.cfi_restore 3
 953              		.cfi_def_cfa_offset 0
 181:BLDC.c        **** 	}
 954              		.loc 1 181 3 view .LVU230
 955 02ba FFF7FEBF 		b	flags_setStatusFlag
 956              	.LVL58:
 957              	.L86:
 958              	.LCFI18:
 959              		.cfi_restore_state
 192:BLDC.c        **** 		flags_clearStatusFlag(UNDERVOLTAGE);
 960              		.loc 1 192 3 is_stmt 1 view .LVU231
 961 02be 0420     		movs	r0, #4
 962 02c0 FFF7FEFF 		bl	flags_clearStatusFlag
 963              	.LVL59:
 193:BLDC.c        **** 	}
 964              		.loc 1 193 3 view .LVU232
 965              		.loc 1 195 1 is_stmt 0 view .LVU233
 966 02c4 BDE80840 		pop	{r3, lr}
 967              	.LCFI19:
 968              		.cfi_restore 14
 969              		.cfi_restore 3
 970              		.cfi_def_cfa_offset 0
 193:BLDC.c        **** 	}
 971              		.loc 1 193 3 view .LVU234
 972 02c8 0220     		movs	r0, #2
 973 02ca FFF7FEBF 		b	flags_clearStatusFlag
 974              	.LVL60:
 975              	.L88:
 976 02ce 00BF     		.align	2
 977              	.L87:
 978 02d0 00000000 		.word	ADC_SUPPLY_VOLTAGE
 979 02d4 01011000 		.word	1048833
 980 02d8 D0FD2200 		.word	2293200
 981 02dc 00000000 		.word	.LANCHOR1
 982 02e0 868F0700 		.word	495494
 983 02e4 00000000 		.word	.LANCHOR0
 984              		.cfi_endproc
 985              	.LFE13:
 987              		.align	1
 988              		.p2align 2,,3
 989              		.global	bldc_getSupplyVoltage
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 994              	bldc_getSupplyVoltage:
 995              	.LFB14:
 196:BLDC.c        **** 
 197:BLDC.c        **** u32 bldc_getSupplyVoltage()
 198:BLDC.c        **** {
 996              		.loc 1 198 1 is_stmt 1 view -0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              		@ link register save eliminated.
 199:BLDC.c        **** 	return gActualSupplyVoltage;
 1001              		.loc 1 199 2 view .LVU236
 1002              		.loc 1 199 9 is_stmt 0 view .LVU237
 1003 02e8 014B     		ldr	r3, .L90
 200:BLDC.c        **** }
 1004              		.loc 1 200 1 view .LVU238
 1005 02ea 9868     		ldr	r0, [r3, #8]
 1006 02ec 7047     		bx	lr
 1007              	.L91:
 1008 02ee 00BF     		.align	2
 1009              	.L90:
 1010 02f0 00000000 		.word	.LANCHOR1
 1011              		.cfi_endproc
 1012              	.LFE14:
 1014              		.align	1
 1015              		.p2align 2,,3
 1016              		.global	bldc_checkInput12V
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1021              	bldc_checkInput12V:
 1022              	.LFB15:
 201:BLDC.c        **** 
 202:BLDC.c        **** void bldc_checkInput12V()
 203:BLDC.c        **** {
 1023              		.loc 1 203 1 is_stmt 1 view -0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 204:BLDC.c        **** 	// update actual voltage [100mV]
 205:BLDC.c        **** 	gActualInput12V = (VOLTAGE_FACTOR_12V*tmcm_getModuleSpecificADCValue(ADC_VOLTAGE_12V))/4095;
 1027              		.loc 1 205 2 view .LVU240
 203:BLDC.c        **** 	// update actual voltage [100mV]
 1028              		.loc 1 203 1 is_stmt 0 view .LVU241
 1029 02f4 08B5     		push	{r3, lr}
 1030              	.LCFI20:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 3, -8
 1033              		.cfi_offset 14, -4
 1034              		.loc 1 205 40 view .LVU242
 1035 02f6 084B     		ldr	r3, .L94
 1036 02f8 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1037 02fa FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 1038              	.LVL61:
 1039              		.loc 1 205 39 view .LVU243
 1040 02fe 8A21     		movs	r1, #138
 1041 0300 01FB00F0 		mul	r0, r1, r0
 1042              		.loc 1 205 88 view .LVU244
 1043 0304 054B     		ldr	r3, .L94+4
 1044              		.loc 1 205 18 view .LVU245
 1045 0306 064A     		ldr	r2, .L94+8
 1046              		.loc 1 205 88 view .LVU246
 1047 0308 A3FB0013 		umull	r1, r3, r3, r0
 1048 030c C01A     		subs	r0, r0, r3
 1049 030e 03EB5003 		add	r3, r3, r0, lsr #1
 1050 0312 DB0A     		lsrs	r3, r3, #11
 1051              		.loc 1 205 18 view .LVU247
 1052 0314 D360     		str	r3, [r2, #12]
 206:BLDC.c        **** }
 1053              		.loc 1 206 1 view .LVU248
 1054 0316 08BD     		pop	{r3, pc}
 1055              	.L95:
 1056              		.align	2
 1057              	.L94:
 1058 0318 00000000 		.word	ADC_VOLTAGE_12V
 1059 031c 01011000 		.word	1048833
 1060 0320 00000000 		.word	.LANCHOR1
 1061              		.cfi_endproc
 1062              	.LFE15:
 1064              		.align	1
 1065              		.p2align 2,,3
 1066              		.global	bldc_getInput12V
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1071              	bldc_getInput12V:
 1072              	.LFB16:
 207:BLDC.c        **** 
 208:BLDC.c        **** u32 bldc_getInput12V()
 209:BLDC.c        **** {
 1073              		.loc 1 209 1 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 210:BLDC.c        **** 	return gActualInput12V;
 1078              		.loc 1 210 2 view .LVU250
 1079              		.loc 1 210 9 is_stmt 0 view .LVU251
 1080 0324 014B     		ldr	r3, .L97
 211:BLDC.c        **** }
 1081              		.loc 1 211 1 view .LVU252
 1082 0326 D868     		ldr	r0, [r3, #12]
 1083 0328 7047     		bx	lr
 1084              	.L98:
 1085 032a 00BF     		.align	2
 1086              	.L97:
 1087 032c 00000000 		.word	.LANCHOR1
 1088              		.cfi_endproc
 1089              	.LFE16:
 1091              		.align	1
 1092              		.p2align 2,,3
 1093              		.global	bldc_checkInput6V
 1094              		.syntax unified
 1095              		.thumb
 1096              		.thumb_func
 1098              	bldc_checkInput6V:
 1099              	.LFB17:
 212:BLDC.c        **** 
 213:BLDC.c        **** void bldc_checkInput6V()
 214:BLDC.c        **** {
 1100              		.loc 1 214 1 is_stmt 1 view -0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 215:BLDC.c        **** 	// update actual voltage [100mV]
 216:BLDC.c        **** 	gActualInput6V = (VOLTAGE_FACTOR_6V*tmcm_getModuleSpecificADCValue(ADC_VOLTAGE_6V))/4095;
 1104              		.loc 1 216 2 view .LVU254
 214:BLDC.c        **** 	// update actual voltage [100mV]
 1105              		.loc 1 214 1 is_stmt 0 view .LVU255
 1106 0330 08B5     		push	{r3, lr}
 1107              	.LCFI21:
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 3, -8
 1110              		.cfi_offset 14, -4
 1111              		.loc 1 216 38 view .LVU256
 1112 0332 084B     		ldr	r3, .L101
 1113 0334 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1114 0336 FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 1115              	.LVL62:
 1116              		.loc 1 216 85 view .LVU257
 1117 033a 074B     		ldr	r3, .L101+4
 1118              		.loc 1 216 37 view .LVU258
 1119 033c C0EB4010 		rsb	r0, r0, r0, lsl #5
 1120 0340 4000     		lsls	r0, r0, #1
 1121              		.loc 1 216 85 view .LVU259
 1122 0342 A3FB0013 		umull	r1, r3, r3, r0
 1123 0346 C01A     		subs	r0, r0, r3
 1124              		.loc 1 216 17 view .LVU260
 1125 0348 044A     		ldr	r2, .L101+8
 1126              		.loc 1 216 85 view .LVU261
 1127 034a 03EB5000 		add	r0, r3, r0, lsr #1
 1128 034e C00A     		lsrs	r0, r0, #11
 1129              		.loc 1 216 17 view .LVU262
 1130 0350 1061     		str	r0, [r2, #16]
 217:BLDC.c        **** }
 1131              		.loc 1 217 1 view .LVU263
 1132 0352 08BD     		pop	{r3, pc}
 1133              	.L102:
 1134              		.align	2
 1135              	.L101:
 1136 0354 00000000 		.word	ADC_VOLTAGE_6V
 1137 0358 01011000 		.word	1048833
 1138 035c 00000000 		.word	.LANCHOR1
 1139              		.cfi_endproc
 1140              	.LFE17:
 1142              		.align	1
 1143              		.p2align 2,,3
 1144              		.global	bldc_getInput6V
 1145              		.syntax unified
 1146              		.thumb
 1147              		.thumb_func
 1149              	bldc_getInput6V:
 1150              	.LFB18:
 218:BLDC.c        **** 
 219:BLDC.c        **** u32 bldc_getInput6V()
 220:BLDC.c        **** {
 1151              		.loc 1 220 1 is_stmt 1 view -0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 221:BLDC.c        **** 	return gActualInput6V;
 1156              		.loc 1 221 2 view .LVU265
 1157              		.loc 1 221 9 is_stmt 0 view .LVU266
 1158 0360 014B     		ldr	r3, .L104
 222:BLDC.c        **** }
 1159              		.loc 1 222 1 view .LVU267
 1160 0362 1869     		ldr	r0, [r3, #16]
 1161 0364 7047     		bx	lr
 1162              	.L105:
 1163 0366 00BF     		.align	2
 1164              	.L104:
 1165 0368 00000000 		.word	.LANCHOR1
 1166              		.cfi_endproc
 1167              	.LFE18:
 1169              		.align	1
 1170              		.p2align 2,,3
 1171              		.global	bldc_checkInput5V
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1176              	bldc_checkInput5V:
 1177              	.LFB19:
 223:BLDC.c        **** 
 224:BLDC.c        **** void bldc_checkInput5V()
 225:BLDC.c        **** {
 1178              		.loc 1 225 1 is_stmt 1 view -0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 226:BLDC.c        **** 	// update actual voltage [100mV]
 227:BLDC.c        **** 	gActualInput5V = (VOLTAGE_FACTOR_5V*tmcm_getModuleSpecificADCValue(ADC_VOLTAGE_5V))/4095;
 1182              		.loc 1 227 2 view .LVU269
 225:BLDC.c        **** 	// update actual voltage [100mV]
 1183              		.loc 1 225 1 is_stmt 0 view .LVU270
 1184 036c 08B5     		push	{r3, lr}
 1185              	.LCFI22:
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 3, -8
 1188              		.cfi_offset 14, -4
 1189              		.loc 1 227 38 view .LVU271
 1190 036e 084B     		ldr	r3, .L108
 1191 0370 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1192 0372 FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 1193              	.LVL63:
 1194              		.loc 1 227 85 view .LVU272
 1195 0376 074B     		ldr	r3, .L108+4
 1196              		.loc 1 227 37 view .LVU273
 1197 0378 C0EB4010 		rsb	r0, r0, r0, lsl #5
 1198 037c 4000     		lsls	r0, r0, #1
 1199              		.loc 1 227 85 view .LVU274
 1200 037e A3FB0013 		umull	r1, r3, r3, r0
 1201 0382 C01A     		subs	r0, r0, r3
 1202              		.loc 1 227 17 view .LVU275
 1203 0384 044A     		ldr	r2, .L108+8
 1204              		.loc 1 227 85 view .LVU276
 1205 0386 03EB5000 		add	r0, r3, r0, lsr #1
 1206 038a C00A     		lsrs	r0, r0, #11
 1207              		.loc 1 227 17 view .LVU277
 1208 038c 5061     		str	r0, [r2, #20]
 228:BLDC.c        **** }
 1209              		.loc 1 228 1 view .LVU278
 1210 038e 08BD     		pop	{r3, pc}
 1211              	.L109:
 1212              		.align	2
 1213              	.L108:
 1214 0390 00000000 		.word	ADC_VOLTAGE_5V
 1215 0394 01011000 		.word	1048833
 1216 0398 00000000 		.word	.LANCHOR1
 1217              		.cfi_endproc
 1218              	.LFE19:
 1220              		.align	1
 1221              		.p2align 2,,3
 1222              		.global	bldc_getInput5V
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1227              	bldc_getInput5V:
 1228              	.LFB20:
 229:BLDC.c        **** 
 230:BLDC.c        **** u32 bldc_getInput5V()
 231:BLDC.c        **** {
 1229              		.loc 1 231 1 is_stmt 1 view -0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
 232:BLDC.c        **** 	return gActualInput5V;
 1234              		.loc 1 232 2 view .LVU280
 1235              		.loc 1 232 9 is_stmt 0 view .LVU281
 1236 039c 014B     		ldr	r3, .L111
 233:BLDC.c        **** }
 1237              		.loc 1 233 1 view .LVU282
 1238 039e 5869     		ldr	r0, [r3, #20]
 1239 03a0 7047     		bx	lr
 1240              	.L112:
 1241 03a2 00BF     		.align	2
 1242              	.L111:
 1243 03a4 00000000 		.word	.LANCHOR1
 1244              		.cfi_endproc
 1245              	.LFE20:
 1247              		.global	__aeabi_ui2d
 1248              		.global	__aeabi_dmul
 1249              		.global	__aeabi_ddiv
 1250              		.global	__aeabi_d2f
 1251              		.global	__aeabi_f2d
 1252              		.global	__aeabi_dsub
 1253              		.global	__aeabi_dadd
 1254              		.global	__aeabi_f2iz
 1255              		.align	1
 1256              		.p2align 2,,3
 1257              		.global	bldc_checkMotorTemperature
 1258              		.syntax unified
 1259              		.thumb
 1260              		.thumb_func
 1262              	bldc_checkMotorTemperature:
 1263              	.LFB21:
 234:BLDC.c        **** 
 235:BLDC.c        **** /* monitor the motor temperature in centigrade and turn off the motor on over temperature */
 236:BLDC.c        **** void bldc_checkMotorTemperature()
 237:BLDC.c        **** {
 1264              		.loc 1 237 1 is_stmt 1 view -0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 0
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
 238:BLDC.c        **** 	float vTherm = tmcm_getModuleSpecificADCValue(ADC_MOT_TEMP)*3.3 / 4095.0;
 1268              		.loc 1 238 2 view .LVU284
 237:BLDC.c        **** 	float vTherm = tmcm_getModuleSpecificADCValue(ADC_MOT_TEMP)*3.3 / 4095.0;
 1269              		.loc 1 237 1 is_stmt 0 view .LVU285
 1270 03a8 38B5     		push	{r3, r4, r5, lr}
 1271              	.LCFI23:
 1272              		.cfi_def_cfa_offset 16
 1273              		.cfi_offset 3, -16
 1274              		.cfi_offset 4, -12
 1275              		.cfi_offset 5, -8
 1276              		.cfi_offset 14, -4
 1277              		.loc 1 238 17 view .LVU286
 1278 03aa 4F4B     		ldr	r3, .L121+48
 1279 03ac 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1280 03ae FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 1281              	.LVL64:
 239:BLDC.c        **** 	float rNTC = (vTherm)/((3.3-vTherm)/10.0);
 1282              		.loc 1 239 2 is_stmt 1 view .LVU287
 238:BLDC.c        **** 	float vTherm = tmcm_getModuleSpecificADCValue(ADC_MOT_TEMP)*3.3 / 4095.0;
 1283              		.loc 1 238 61 is_stmt 0 view .LVU288
 1284 03b2 FFF7FEFF 		bl	__aeabi_ui2d
 1285              	.LVL65:
 238:BLDC.c        **** 	float vTherm = tmcm_getModuleSpecificADCValue(ADC_MOT_TEMP)*3.3 / 4095.0;
 1286              		.loc 1 238 61 view .LVU289
 1287 03b6 40A3     		adr	r3, .L121
 1288 03b8 D3E90023 		ldrd	r2, [r3]
 1289 03bc FFF7FEFF 		bl	__aeabi_dmul
 1290              	.LVL66:
 238:BLDC.c        **** 	float vTherm = tmcm_getModuleSpecificADCValue(ADC_MOT_TEMP)*3.3 / 4095.0;
 1291              		.loc 1 238 66 view .LVU290
 1292 03c0 3FA3     		adr	r3, .L121+8
 1293 03c2 D3E90023 		ldrd	r2, [r3]
 1294 03c6 FFF7FEFF 		bl	__aeabi_ddiv
 1295              	.LVL67:
 238:BLDC.c        **** 	float vTherm = tmcm_getModuleSpecificADCValue(ADC_MOT_TEMP)*3.3 / 4095.0;
 1296              		.loc 1 238 8 view .LVU291
 1297 03ca FFF7FEFF 		bl	__aeabi_d2f
 1298              	.LVL68:
 1299              		.loc 1 239 23 view .LVU292
 1300 03ce FFF7FEFF 		bl	__aeabi_f2d
 1301              	.LVL69:
 1302 03d2 0446     		mov	r4, r0
 1303 03d4 0D46     		mov	r5, r1
 1304              		.loc 1 239 29 view .LVU293
 1305 03d6 38A1     		adr	r1, .L121
 1306 03d8 D1E90001 		ldrd	r0, [r1]
 1307              	.LVL70:
 240:BLDC.c        **** 	float b = 3455.0;
 1308              		.loc 1 240 2 is_stmt 1 view .LVU294
 241:BLDC.c        **** 	float temp = (b * 298.16)/(b + (log(rNTC/10.0)*298.16))-273.16;
 1309              		.loc 1 241 2 view .LVU295
 239:BLDC.c        **** 	float rNTC = (vTherm)/((3.3-vTherm)/10.0);
 1310              		.loc 1 239 29 is_stmt 0 view .LVU296
 1311 03dc 2246     		mov	r2, r4
 1312 03de 2B46     		mov	r3, r5
 1313 03e0 FFF7FEFF 		bl	__aeabi_dsub
 1314              	.LVL71:
 239:BLDC.c        **** 	float rNTC = (vTherm)/((3.3-vTherm)/10.0);
 1315              		.loc 1 239 37 view .LVU297
 1316 03e4 0022     		movs	r2, #0
 1317 03e6 414B     		ldr	r3, .L121+52
 1318 03e8 FFF7FEFF 		bl	__aeabi_ddiv
 1319              	.LVL72:
 1320 03ec 0246     		mov	r2, r0
 1321 03ee 0B46     		mov	r3, r1
 239:BLDC.c        **** 	float rNTC = (vTherm)/((3.3-vTherm)/10.0);
 1322              		.loc 1 239 23 view .LVU298
 1323 03f0 2046     		mov	r0, r4
 1324 03f2 2946     		mov	r1, r5
 1325 03f4 FFF7FEFF 		bl	__aeabi_ddiv
 1326              	.LVL73:
 239:BLDC.c        **** 	float rNTC = (vTherm)/((3.3-vTherm)/10.0);
 1327              		.loc 1 239 8 view .LVU299
 1328 03f8 FFF7FEFF 		bl	__aeabi_d2f
 1329              	.LVL74:
 1330              		.loc 1 241 34 view .LVU300
 1331 03fc FFF7FEFF 		bl	__aeabi_f2d
 1332              	.LVL75:
 1333 0400 0022     		movs	r2, #0
 1334 0402 3A4B     		ldr	r3, .L121+52
 1335 0404 FFF7FEFF 		bl	__aeabi_ddiv
 1336              	.LVL76:
 1337 0408 FFF7FEFF 		bl	log
 1338              	.LVL77:
 242:BLDC.c        **** 	gActualMotorTemperature = temp;
 1339              		.loc 1 242 2 is_stmt 1 view .LVU301
 241:BLDC.c        **** 	float temp = (b * 298.16)/(b + (log(rNTC/10.0)*298.16))-273.16;
 1340              		.loc 1 241 48 is_stmt 0 view .LVU302
 1341 040c 2EA3     		adr	r3, .L121+16
 1342 040e D3E90023 		ldrd	r2, [r3]
 1343 0412 FFF7FEFF 		bl	__aeabi_dmul
 1344              	.LVL78:
 241:BLDC.c        **** 	float temp = (b * 298.16)/(b + (log(rNTC/10.0)*298.16))-273.16;
 1345              		.loc 1 241 31 view .LVU303
 1346 0416 2EA3     		adr	r3, .L121+24
 1347 0418 D3E90023 		ldrd	r2, [r3]
 1348 041c FFF7FEFF 		bl	__aeabi_dadd
 1349              	.LVL79:
 1350 0420 0246     		mov	r2, r0
 1351 0422 0B46     		mov	r3, r1
 241:BLDC.c        **** 	float temp = (b * 298.16)/(b + (log(rNTC/10.0)*298.16))-273.16;
 1352              		.loc 1 241 27 view .LVU304
 1353 0424 2CA1     		adr	r1, .L121+32
 1354 0426 D1E90001 		ldrd	r0, [r1]
 1355 042a FFF7FEFF 		bl	__aeabi_ddiv
 1356              	.LVL80:
 241:BLDC.c        **** 	float temp = (b * 298.16)/(b + (log(rNTC/10.0)*298.16))-273.16;
 1357              		.loc 1 241 57 view .LVU305
 1358 042e 2CA3     		adr	r3, .L121+40
 1359 0430 D3E90023 		ldrd	r2, [r3]
 1360 0434 FFF7FEFF 		bl	__aeabi_dsub
 1361              	.LVL81:
 241:BLDC.c        **** 	float temp = (b * 298.16)/(b + (log(rNTC/10.0)*298.16))-273.16;
 1362              		.loc 1 241 8 view .LVU306
 1363 0438 FFF7FEFF 		bl	__aeabi_d2f
 1364              	.LVL82:
 1365              		.loc 1 242 26 view .LVU307
 1366 043c FFF7FEFF 		bl	__aeabi_f2iz
 1367              	.LVL83:
 1368 0440 2B4B     		ldr	r3, .L121+56
 243:BLDC.c        **** 
 244:BLDC.c        **** 	if(gActualMotorTemperature >= MAX_CRITICAL_TEMP)
 1369              		.loc 1 244 4 view .LVU308
 1370 0442 6D28     		cmp	r0, #109
 242:BLDC.c        **** 	gActualMotorTemperature = temp;
 1371              		.loc 1 242 26 view .LVU309
 1372 0444 9861     		str	r0, [r3, #24]
 1373              		.loc 1 244 2 is_stmt 1 view .LVU310
 1374              		.loc 1 244 4 is_stmt 0 view .LVU311
 1375 0446 1DDC     		bgt	.L119
 245:BLDC.c        **** 	{
 246:BLDC.c        **** 		flags_setStatusFlag(OVERTEMPERATURE);
 247:BLDC.c        **** 
 248:BLDC.c        **** 		// hold module in stop mode to suppress regulation
 249:BLDC.c        **** 		bldc_switchToMotionMode(STOP_MODE);
 250:BLDC.c        **** 		tmcm_disableDriver();
 251:BLDC.c        **** 	}
 252:BLDC.c        **** 	else if(gActualMotorTemperature <= MIN_CRITICAL_TEMP)
 1376              		.loc 1 252 7 is_stmt 1 view .LVU312
 1377              		.loc 1 252 9 is_stmt 0 view .LVU313
 1378 0448 6428     		cmp	r0, #100
 1379 044a 00DD     		ble	.L120
 1380              	.L113:
 253:BLDC.c        **** 	{
 254:BLDC.c        **** 		flags_clearStatusFlag(OVERTEMPERATURE);
 255:BLDC.c        **** 		if(!tmcm_getDriverState() && !flags_getErrorFlags() && !flags_isStatusFlagSet(FREERUNNING) && !fl
 256:BLDC.c        **** 			tmcm_enableDriver();
 257:BLDC.c        **** 	}
 258:BLDC.c        **** }
 1381              		.loc 1 258 1 view .LVU314
 1382 044c 38BD     		pop	{r3, r4, r5, pc}
 1383              	.LVL84:
 1384              	.L120:
 254:BLDC.c        **** 		if(!tmcm_getDriverState() && !flags_getErrorFlags() && !flags_isStatusFlagSet(FREERUNNING) && !fl
 1385              		.loc 1 254 3 is_stmt 1 view .LVU315
 1386 044e 0820     		movs	r0, #8
 1387 0450 FFF7FEFF 		bl	flags_clearStatusFlag
 1388              	.LVL85:
 255:BLDC.c        **** 			tmcm_enableDriver();
 1389              		.loc 1 255 3 view .LVU316
 255:BLDC.c        **** 			tmcm_enableDriver();
 1390              		.loc 1 255 7 is_stmt 0 view .LVU317
 1391 0454 FFF7FEFF 		bl	tmcm_getDriverState
 1392              	.LVL86:
 255:BLDC.c        **** 			tmcm_enableDriver();
 1393              		.loc 1 255 5 view .LVU318
 1394 0458 0028     		cmp	r0, #0
 1395 045a F7D1     		bne	.L113
 255:BLDC.c        **** 			tmcm_enableDriver();
 1396              		.loc 1 255 33 discriminator 1 view .LVU319
 1397 045c FFF7FEFF 		bl	flags_getErrorFlags
 1398              	.LVL87:
 255:BLDC.c        **** 			tmcm_enableDriver();
 1399              		.loc 1 255 29 discriminator 1 view .LVU320
 1400 0460 0028     		cmp	r0, #0
 1401 0462 F3D1     		bne	.L113
 255:BLDC.c        **** 			tmcm_enableDriver();
 1402              		.loc 1 255 59 discriminator 2 view .LVU321
 1403 0464 4FF40050 		mov	r0, #8192
 1404 0468 FFF7FEFF 		bl	flags_isStatusFlagSet
 1405              	.LVL88:
 255:BLDC.c        **** 			tmcm_enableDriver();
 1406              		.loc 1 255 55 discriminator 2 view .LVU322
 1407 046c 0028     		cmp	r0, #0
 1408 046e EDD1     		bne	.L113
 255:BLDC.c        **** 			tmcm_enableDriver();
 1409              		.loc 1 255 98 discriminator 3 view .LVU323
 1410 0470 4FF48070 		mov	r0, #256
 1411 0474 FFF7FEFF 		bl	flags_isStatusFlagSet
 1412              	.LVL89:
 255:BLDC.c        **** 			tmcm_enableDriver();
 1413              		.loc 1 255 94 discriminator 3 view .LVU324
 1414 0478 0028     		cmp	r0, #0
 1415 047a E7D1     		bne	.L113
 256:BLDC.c        **** 	}
 1416              		.loc 1 256 4 is_stmt 1 view .LVU325
 1417              		.loc 1 258 1 is_stmt 0 view .LVU326
 1418 047c BDE83840 		pop	{r3, r4, r5, lr}
 1419              	.LCFI24:
 1420              		.cfi_remember_state
 1421              		.cfi_restore 14
 1422              		.cfi_restore 5
 1423              		.cfi_restore 4
 1424              		.cfi_restore 3
 1425              		.cfi_def_cfa_offset 0
 1426              	.LVL90:
 256:BLDC.c        **** 	}
 1427              		.loc 1 256 4 view .LVU327
 1428 0480 FFF7FEBF 		b	tmcm_enableDriver
 1429              	.LVL91:
 1430              	.L119:
 1431              	.LCFI25:
 1432              		.cfi_restore_state
 246:BLDC.c        **** 
 1433              		.loc 1 246 3 is_stmt 1 view .LVU328
 1434 0484 0820     		movs	r0, #8
 1435 0486 FFF7FEFF 		bl	flags_setStatusFlag
 1436              	.LVL92:
 249:BLDC.c        **** 		tmcm_disableDriver();
 1437              		.loc 1 249 3 view .LVU329
 1438              	.LBB48:
 1439              	.LBI48:
  41:BLDC.c        **** {
 1440              		.loc 1 41 6 view .LVU330
 1441              	.LBB49:
  43:BLDC.c        **** 
 1442              		.loc 1 43 2 view .LVU331
 1443 048a 4FF49E40 		mov	r0, #20224
 1444 048e FFF7FEFF 		bl	flags_clearStatusFlag
 1445              	.LVL93:
  45:BLDC.c        **** 	{
 1446              		.loc 1 45 2 view .LVU332
  48:BLDC.c        **** 			gMotionMode = STOP_MODE;
 1447              		.loc 1 48 4 view .LVU333
 1448 0492 4FF48070 		mov	r0, #256
 1449 0496 FFF7FEFF 		bl	flags_setStatusFlag
 1450              	.LVL94:
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 1451              		.loc 1 49 4 view .LVU334
  50:BLDC.c        **** 			break;
 1452              		.loc 1 50 4 is_stmt 0 view .LVU335
 1453 049a 0021     		movs	r1, #0
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 1454              		.loc 1 49 16 view .LVU336
 1455 049c 4FF48072 		mov	r2, #256
 1456 04a0 144B     		ldr	r3, .L121+60
  50:BLDC.c        **** 			break;
 1457              		.loc 1 50 4 view .LVU337
 1458 04a2 0846     		mov	r0, r1
  49:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_STOPPED);
 1459              		.loc 1 49 16 view .LVU338
 1460 04a4 1A60     		str	r2, [r3]
  50:BLDC.c        **** 			break;
 1461              		.loc 1 50 4 is_stmt 1 view .LVU339
 1462 04a6 FFF7FEFF 		bl	tmc4671_switchToMotionMode
 1463              	.LVL95:
  51:BLDC.c        **** 		case TORQUE_MODE:
 1464              		.loc 1 51 4 view .LVU340
  51:BLDC.c        **** 		case TORQUE_MODE:
 1465              		.loc 1 51 4 is_stmt 0 view .LVU341
 1466              	.LBE49:
 1467              	.LBE48:
 250:BLDC.c        **** 	}
 1468              		.loc 1 250 3 is_stmt 1 view .LVU342
 1469              		.loc 1 258 1 is_stmt 0 view .LVU343
 1470 04aa BDE83840 		pop	{r3, r4, r5, lr}
 1471              	.LCFI26:
 1472              		.cfi_restore 14
 1473              		.cfi_restore 5
 1474              		.cfi_restore 4
 1475              		.cfi_restore 3
 1476              		.cfi_def_cfa_offset 0
 1477              	.LVL96:
 250:BLDC.c        **** 	}
 1478              		.loc 1 250 3 view .LVU344
 1479 04ae FFF7FEBF 		b	tmcm_disableDriver
 1480              	.LVL97:
 1481              	.L122:
 1482 04b2 00BFAFF3 		.align	3
 1482      0080
 1483              	.L121:
 1484 04b8 66666666 		.word	1717986918
 1485 04bc 66660A40 		.word	1074423398
 1486 04c0 00000000 		.word	0
 1487 04c4 00FEAF40 		.word	1085275648
 1488 04c8 C3F5285C 		.word	1546188227
 1489 04cc 8FA27240 		.word	1081254543
 1490 04d0 00000000 		.word	0
 1491 04d4 00FEAA40 		.word	1084947968
 1492 04d8 9A999999 		.word	-1717986918
 1493 04dc FD6F2F41 		.word	1093627901
 1494 04e0 C3F5285C 		.word	1546188227
 1495 04e4 8F127140 		.word	1081152143
 1496 04e8 00000000 		.word	ADC_MOT_TEMP
 1497 04ec 00002440 		.word	1076101120
 1498 04f0 00000000 		.word	.LANCHOR1
 1499 04f4 00000000 		.word	.LANCHOR0
 1500              		.cfi_endproc
 1501              	.LFE21:
 1503              		.align	1
 1504              		.p2align 2,,3
 1505              		.global	bldc_getMotorTemperature
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1510              	bldc_getMotorTemperature:
 1511              	.LFB22:
 259:BLDC.c        **** 
 260:BLDC.c        **** int bldc_getMotorTemperature()
 261:BLDC.c        **** {
 1512              		.loc 1 261 1 is_stmt 1 view -0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              		@ link register save eliminated.
 262:BLDC.c        **** 	return gActualMotorTemperature;
 1517              		.loc 1 262 2 view .LVU346
 1518              		.loc 1 262 9 is_stmt 0 view .LVU347
 1519 04f8 014B     		ldr	r3, .L124
 263:BLDC.c        **** }
 1520              		.loc 1 263 1 view .LVU348
 1521 04fa 9869     		ldr	r0, [r3, #24]
 1522 04fc 7047     		bx	lr
 1523              	.L125:
 1524 04fe 00BF     		.align	2
 1525              	.L124:
 1526 0500 00000000 		.word	.LANCHOR1
 1527              		.cfi_endproc
 1528              	.LFE22:
 1530              		.align	1
 1531              		.p2align 2,,3
 1532              		.global	bldc_checkCommutationMode
 1533              		.syntax unified
 1534              		.thumb
 1535              		.thumb_func
 1537              	bldc_checkCommutationMode:
 1538              	.LFB23:
 264:BLDC.c        **** 
 265:BLDC.c        **** /* check new requested commutation mode*/
 266:BLDC.c        **** void bldc_checkCommutationMode()
 267:BLDC.c        **** {
 1539              		.loc 1 267 1 is_stmt 1 view -0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 0
 1542              		@ frame_needed = 0, uses_anonymous_args = 0
 268:BLDC.c        **** 	if(gLastSetCommutationMode != motorConfig.commutationMode)
 1543              		.loc 1 268 2 view .LVU350
 267:BLDC.c        **** 	if(gLastSetCommutationMode != motorConfig.commutationMode)
 1544              		.loc 1 267 1 is_stmt 0 view .LVU351
 1545 0504 70B5     		push	{r4, r5, r6, lr}
 1546              	.LCFI27:
 1547              		.cfi_def_cfa_offset 16
 1548              		.cfi_offset 4, -16
 1549              		.cfi_offset 5, -12
 1550              		.cfi_offset 6, -8
 1551              		.cfi_offset 14, -4
 1552              		.loc 1 268 43 view .LVU352
 1553 0506 214E     		ldr	r6, .L135
 1554              		.loc 1 268 29 view .LVU353
 1555 0508 214D     		ldr	r5, .L135+4
 1556              		.loc 1 268 43 view .LVU354
 1557 050a 96F86A40 		ldrb	r4, [r6, #106]	@ zero_extendqisi2
 1558              		.loc 1 268 4 view .LVU355
 1559 050e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1560 0510 A342     		cmp	r3, r4
 1561 0512 17D0     		beq	.L126
 269:BLDC.c        **** 	{
 270:BLDC.c        **** 		// switch to new mode
 271:BLDC.c        **** 		switch(motorConfig.commutationMode)
 1562              		.loc 1 271 3 is_stmt 1 view .LVU356
 1563 0514 012C     		cmp	r4, #1
 1564 0516 27D0     		beq	.L128
 1565 0518 15D8     		bhi	.L134
 272:BLDC.c        **** 		{
 273:BLDC.c        **** 			case COMM_MODE_FOC_DISABLED:
 274:BLDC.c        **** 				flags_clearStatusFlag(MODULE_INITIALIZED);
 1566              		.loc 1 274 5 view .LVU357
 1567 051a 4FF40040 		mov	r0, #32768
 1568 051e FFF7FEFF 		bl	flags_clearStatusFlag
 1569              	.LVL98:
 275:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_UQ_UD_EXT, 0);
 1570              		.loc 1 275 5 view .LVU358
 1571 0522 0022     		movs	r2, #0
 1572 0524 2421     		movs	r1, #36
 1573 0526 1046     		mov	r0, r2
 1574 0528 FFF7FEFF 		bl	tmc4671_writeInt
 1575              	.LVL99:
 276:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_PHI_E_SELECTION, TMC4671_PHI_E_EXTERNAL);
 1576              		.loc 1 276 5 view .LVU359
 1577 052c 0122     		movs	r2, #1
 1578 052e 5221     		movs	r1, #82
 1579 0530 0020     		movs	r0, #0
 1580 0532 FFF7FEFF 		bl	tmc4671_writeInt
 1581              	.LVL100:
 277:BLDC.c        **** 				tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_UQ_UD_EXT);
 1582              		.loc 1 277 5 view .LVU360
 1583 0536 0821     		movs	r1, #8
 1584 0538 0020     		movs	r0, #0
 1585 053a FFF7FEFF 		bl	tmc4671_switchToMotionMode
 1586              	.LVL101:
 278:BLDC.c        **** 				break;
 1587              		.loc 1 278 5 view .LVU361
 279:BLDC.c        **** 			case COMM_MODE_FOC_OPEN_LOOP:
 280:BLDC.c        **** 				flags_clearStatusFlag(MODULE_INITIALIZED);
 281:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_PHI_E_SELECTION, TMC4671_PHI_E_OPEN_LOOP);
 282:BLDC.c        **** 				tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 283:BLDC.c        **** 				break;
 284:BLDC.c        **** 			case COMM_MODE_FOC_DIGITAL_HALL:
 285:BLDC.c        **** 			case COMM_MODE_FOC_DIGITAL_HALL_PEDAL_ASSIST:
 286:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_VELOCITY_SELECTION, TMC4671_VELOCITY_PHI_M_HAL);
 287:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_PHI_E_SELECTION, TMC4671_PHI_E_HALL);
 288:BLDC.c        **** 				break;
 289:BLDC.c        **** 		}
 290:BLDC.c        **** 		gLastSetCommutationMode = motorConfig.commutationMode;
 1588              		.loc 1 290 40 is_stmt 0 view .LVU362
 1589 053e 96F86A40 		ldrb	r4, [r6, #106]	@ zero_extendqisi2
 1590              	.L130:
 1591              		.loc 1 290 3 is_stmt 1 view .LVU363
 1592              		.loc 1 290 27 is_stmt 0 view .LVU364
 1593 0542 2C71     		strb	r4, [r5, #4]
 1594              	.L126:
 291:BLDC.c        **** 	}
 292:BLDC.c        **** }
 1595              		.loc 1 292 1 view .LVU365
 1596 0544 70BD     		pop	{r4, r5, r6, pc}
 1597              	.L134:
 271:BLDC.c        **** 		{
 1598              		.loc 1 271 3 view .LVU366
 1599 0546 A31E     		subs	r3, r4, #2
 1600 0548 012B     		cmp	r3, #1
 1601 054a FAD8     		bhi	.L130
 286:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_PHI_E_SELECTION, TMC4671_PHI_E_HALL);
 1602              		.loc 1 286 5 is_stmt 1 view .LVU367
 1603 054c 0C22     		movs	r2, #12
 1604 054e 5021     		movs	r1, #80
 1605 0550 0020     		movs	r0, #0
 1606 0552 FFF7FEFF 		bl	tmc4671_writeInt
 1607              	.LVL102:
 287:BLDC.c        **** 				break;
 1608              		.loc 1 287 5 view .LVU368
 1609 0556 0522     		movs	r2, #5
 1610 0558 5221     		movs	r1, #82
 1611 055a 0020     		movs	r0, #0
 1612 055c FFF7FEFF 		bl	tmc4671_writeInt
 1613              	.LVL103:
 288:BLDC.c        **** 		}
 1614              		.loc 1 288 5 view .LVU369
 290:BLDC.c        **** 	}
 1615              		.loc 1 290 40 is_stmt 0 view .LVU370
 1616 0560 96F86A40 		ldrb	r4, [r6, #106]	@ zero_extendqisi2
 290:BLDC.c        **** 	}
 1617              		.loc 1 290 3 is_stmt 1 view .LVU371
 290:BLDC.c        **** 	}
 1618              		.loc 1 290 27 is_stmt 0 view .LVU372
 1619 0564 2C71     		strb	r4, [r5, #4]
 1620 0566 EDE7     		b	.L126
 1621              	.L128:
 280:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_PHI_E_SELECTION, TMC4671_PHI_E_OPEN_LOOP);
 1622              		.loc 1 280 5 is_stmt 1 view .LVU373
 1623 0568 4FF40040 		mov	r0, #32768
 1624 056c FFF7FEFF 		bl	flags_clearStatusFlag
 1625              	.LVL104:
 281:BLDC.c        **** 				tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 1626              		.loc 1 281 5 view .LVU374
 1627 0570 0222     		movs	r2, #2
 1628 0572 5221     		movs	r1, #82
 1629 0574 0020     		movs	r0, #0
 1630 0576 FFF7FEFF 		bl	tmc4671_writeInt
 1631              	.LVL105:
 282:BLDC.c        **** 				break;
 1632              		.loc 1 282 5 view .LVU375
 1633 057a 2146     		mov	r1, r4
 1634 057c 0020     		movs	r0, #0
 1635 057e FFF7FEFF 		bl	tmc4671_switchToMotionMode
 1636              	.LVL106:
 283:BLDC.c        **** 			case COMM_MODE_FOC_DIGITAL_HALL:
 1637              		.loc 1 283 5 view .LVU376
 290:BLDC.c        **** 	}
 1638              		.loc 1 290 40 is_stmt 0 view .LVU377
 1639 0582 96F86A40 		ldrb	r4, [r6, #106]	@ zero_extendqisi2
 290:BLDC.c        **** 	}
 1640              		.loc 1 290 3 is_stmt 1 view .LVU378
 290:BLDC.c        **** 	}
 1641              		.loc 1 290 27 is_stmt 0 view .LVU379
 1642 0586 2C71     		strb	r4, [r5, #4]
 1643 0588 DCE7     		b	.L126
 1644              	.L136:
 1645 058a 00BF     		.align	2
 1646              	.L135:
 1647 058c 00000000 		.word	motorConfig
 1648 0590 00000000 		.word	.LANCHOR0
 1649              		.cfi_endproc
 1650              	.LFE23:
 1652              		.align	1
 1653              		.p2align 2,,3
 1654              		.global	bldc_stopMotor
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1659              	bldc_stopMotor:
 1660              	.LFB24:
 293:BLDC.c        **** 
 294:BLDC.c        **** void bldc_stopMotor()
 295:BLDC.c        **** {
 1661              		.loc 1 295 1 is_stmt 1 view -0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 296:BLDC.c        **** 	if (motorConfig.commutationMode == COMM_MODE_FOC_DIGITAL_HALL || motorConfig.commutationMode == CO
 1665              		.loc 1 296 2 view .LVU381
 295:BLDC.c        **** 	if (motorConfig.commutationMode == COMM_MODE_FOC_DIGITAL_HALL || motorConfig.commutationMode == CO
 1666              		.loc 1 295 1 is_stmt 0 view .LVU382
 1667 0594 10B5     		push	{r4, lr}
 1668              	.LCFI28:
 1669              		.cfi_def_cfa_offset 8
 1670              		.cfi_offset 4, -8
 1671              		.cfi_offset 14, -4
 1672              		.loc 1 296 17 view .LVU383
 1673 0596 194B     		ldr	r3, .L142
 1674 0598 93F86A30 		ldrb	r3, [r3, #106]	@ zero_extendqisi2
 1675              		.loc 1 296 5 view .LVU384
 1676 059c 9A1E     		subs	r2, r3, #2
 1677 059e 012A     		cmp	r2, #1
 1678 05a0 16D9     		bls	.L141
 297:BLDC.c        **** 		bldc_setTargetMotorCurrent(0);
 298:BLDC.c        **** 	else
 299:BLDC.c        **** 		bldc_setTargetVelocity(0);
 1679              		.loc 1 299 3 is_stmt 1 view .LVU385
 1680              	.LVL107:
 1681              	.LBB60:
 1682              	.LBI60:
 104:BLDC.c        **** {
 1683              		.loc 1 104 6 view .LVU386
 1684              	.LBB61:
 106:BLDC.c        **** 		return;
 1685              		.loc 1 106 2 view .LVU387
 106:BLDC.c        **** 		return;
 1686              		.loc 1 106 5 is_stmt 0 view .LVU388
 1687 05a2 A3B1     		cbz	r3, .L137
 1688              	.LVL108:
 1689              	.LBB62:
 1690              	.LBI62:
 104:BLDC.c        **** {
 1691              		.loc 1 104 6 is_stmt 1 view .LVU389
 1692              	.LBB63:
 109:BLDC.c        **** 	{
 1693              		.loc 1 109 2 view .LVU390
 111:BLDC.c        **** 
 1694              		.loc 1 111 3 view .LVU391
 111:BLDC.c        **** 
 1695              		.loc 1 111 20 is_stmt 0 view .LVU392
 1696 05a4 0024     		movs	r4, #0
 1697 05a6 164B     		ldr	r3, .L142+4
 1698              	.LBB64:
 1699              	.LBB65:
  43:BLDC.c        **** 
 1700              		.loc 1 43 2 view .LVU393
 1701 05a8 4FF49E40 		mov	r0, #20224
 1702              	.LBE65:
 1703              	.LBE64:
 111:BLDC.c        **** 
 1704              		.loc 1 111 20 view .LVU394
 1705 05ac 5C60     		str	r4, [r3, #4]
 114:BLDC.c        **** 	}
 1706              		.loc 1 114 3 is_stmt 1 view .LVU395
 1707              	.LVL109:
 1708              	.LBB68:
 1709              	.LBI64:
  41:BLDC.c        **** {
 1710              		.loc 1 41 6 view .LVU396
 1711              	.LBB66:
  43:BLDC.c        **** 
 1712              		.loc 1 43 2 view .LVU397
 1713 05ae FFF7FEFF 		bl	flags_clearStatusFlag
 1714              	.LVL110:
  45:BLDC.c        **** 	{
 1715              		.loc 1 45 2 view .LVU398
  58:BLDC.c        **** 			gMotionMode = VELOCITY_MODE;
 1716              		.loc 1 58 4 view .LVU399
 1717 05b2 4FF40070 		mov	r0, #512
 1718 05b6 FFF7FEFF 		bl	flags_setStatusFlag
 1719              	.LVL111:
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
 1720              		.loc 1 59 4 view .LVU400
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
 1721              		.loc 1 59 16 is_stmt 0 view .LVU401
 1722 05ba 4FF40072 		mov	r2, #512
 1723 05be 114B     		ldr	r3, .L142+8
  60:BLDC.c        **** 			break;
 1724              		.loc 1 60 4 view .LVU402
 1725 05c0 2046     		mov	r0, r4
 1726              	.LBE66:
 1727              	.LBE68:
 1728              	.LBE63:
 1729              	.LBE62:
 1730              	.LBE61:
 1731              	.LBE60:
 300:BLDC.c        **** }
 1732              		.loc 1 300 1 view .LVU403
 1733 05c2 BDE81040 		pop	{r4, lr}
 1734              	.LCFI29:
 1735              		.cfi_remember_state
 1736              		.cfi_restore 14
 1737              		.cfi_restore 4
 1738              		.cfi_def_cfa_offset 0
 1739              	.LBB73:
 1740              	.LBB72:
 1741              	.LBB71:
 1742              	.LBB70:
 1743              	.LBB69:
 1744              	.LBB67:
  60:BLDC.c        **** 			break;
 1745              		.loc 1 60 4 view .LVU404
 1746 05c6 0221     		movs	r1, #2
  59:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_VELOCITY);
 1747              		.loc 1 59 16 view .LVU405
 1748 05c8 1A60     		str	r2, [r3]
  60:BLDC.c        **** 			break;
 1749              		.loc 1 60 4 is_stmt 1 view .LVU406
 1750 05ca FFF7FEBF 		b	tmc4671_switchToMotionMode
 1751              	.LVL112:
 1752              	.L137:
 1753              	.LCFI30:
 1754              		.cfi_restore_state
  60:BLDC.c        **** 			break;
 1755              		.loc 1 60 4 is_stmt 0 view .LVU407
 1756              	.LBE67:
 1757              	.LBE69:
 1758              	.LBE70:
 1759              	.LBE71:
 1760              	.LBE72:
 1761              	.LBE73:
 1762              		.loc 1 300 1 view .LVU408
 1763 05ce 10BD     		pop	{r4, pc}
 1764              	.LVL113:
 1765              	.L141:
 297:BLDC.c        **** 	else
 1766              		.loc 1 297 3 is_stmt 1 view .LVU409
 1767              	.LBB74:
 1768              	.LBI74:
  83:BLDC.c        **** {
 1769              		.loc 1 83 6 view .LVU410
 1770              	.LBB75:
  85:BLDC.c        **** 	  ||(motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP))
 1771              		.loc 1 85 2 view .LVU411
  89:BLDC.c        **** 	{
 1772              		.loc 1 89 2 view .LVU412
  91:BLDC.c        **** 
 1773              		.loc 1 91 3 view .LVU413
  91:BLDC.c        **** 
 1774              		.loc 1 91 17 is_stmt 0 view .LVU414
 1775 05d0 0024     		movs	r4, #0
 1776 05d2 0B4B     		ldr	r3, .L142+4
 1777              	.LBB76:
 1778              	.LBB77:
  43:BLDC.c        **** 
 1779              		.loc 1 43 2 view .LVU415
 1780 05d4 4FF49E40 		mov	r0, #20224
 1781              	.LBE77:
 1782              	.LBE76:
  91:BLDC.c        **** 
 1783              		.loc 1 91 17 view .LVU416
 1784 05d8 1C60     		str	r4, [r3]
  94:BLDC.c        **** 	}
 1785              		.loc 1 94 3 is_stmt 1 view .LVU417
 1786              	.LVL114:
 1787              	.LBB80:
 1788              	.LBI76:
  41:BLDC.c        **** {
 1789              		.loc 1 41 6 view .LVU418
 1790              	.LBB78:
  43:BLDC.c        **** 
 1791              		.loc 1 43 2 view .LVU419
 1792 05da FFF7FEFF 		bl	flags_clearStatusFlag
 1793              	.LVL115:
  45:BLDC.c        **** 	{
 1794              		.loc 1 45 2 view .LVU420
  53:BLDC.c        **** 			gMotionMode = TORQUE_MODE;
 1795              		.loc 1 53 4 view .LVU421
 1796 05de 4FF40060 		mov	r0, #2048
 1797 05e2 FFF7FEFF 		bl	flags_setStatusFlag
 1798              	.LVL116:
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 1799              		.loc 1 54 4 view .LVU422
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 1800              		.loc 1 54 16 is_stmt 0 view .LVU423
 1801 05e6 4FF40062 		mov	r2, #2048
 1802 05ea 064B     		ldr	r3, .L142+8
  55:BLDC.c        **** 			break;
 1803              		.loc 1 55 4 view .LVU424
 1804 05ec 2046     		mov	r0, r4
 1805              	.LBE78:
 1806              	.LBE80:
 1807              	.LBE75:
 1808              	.LBE74:
 1809              		.loc 1 300 1 view .LVU425
 1810 05ee BDE81040 		pop	{r4, lr}
 1811              	.LCFI31:
 1812              		.cfi_restore 14
 1813              		.cfi_restore 4
 1814              		.cfi_def_cfa_offset 0
 1815              	.LBB83:
 1816              	.LBB82:
 1817              	.LBB81:
 1818              	.LBB79:
  55:BLDC.c        **** 			break;
 1819              		.loc 1 55 4 view .LVU426
 1820 05f2 0121     		movs	r1, #1
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 1821              		.loc 1 54 16 view .LVU427
 1822 05f4 1A60     		str	r2, [r3]
  55:BLDC.c        **** 			break;
 1823              		.loc 1 55 4 is_stmt 1 view .LVU428
 1824 05f6 FFF7FEBF 		b	tmc4671_switchToMotionMode
 1825              	.LVL117:
 1826              	.L143:
 1827 05fa 00BF     		.align	2
 1828              	.L142:
 1829 05fc 00000000 		.word	motorConfig
 1830 0600 00000000 		.word	.LANCHOR1
 1831 0604 00000000 		.word	.LANCHOR0
 1832              	.LBE79:
 1833              	.LBE81:
 1834              	.LBE82:
 1835              	.LBE83:
 1836              		.cfi_endproc
 1837              	.LFE24:
 1839              		.align	1
 1840              		.p2align 2,,3
 1841              		.global	updateRampTargetTorque
 1842              		.syntax unified
 1843              		.thumb
 1844              		.thumb_func
 1846              	updateRampTargetTorque:
 1847              	.LVL118:
 1848              	.LFB25:
 301:BLDC.c        **** 
 302:BLDC.c        **** int updateRampTargetTorque(int actualTargetTorque, int desiredTorque)
 303:BLDC.c        **** {
 1849              		.loc 1 303 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 304:BLDC.c        **** 	if((motorConfig.positiveMotoringRampTime == 0) || (motorConfig.negativeMotoringRampTime == 0))
 1853              		.loc 1 304 2 view .LVU430
 303:BLDC.c        **** 	if((motorConfig.positiveMotoringRampTime == 0) || (motorConfig.negativeMotoringRampTime == 0))
 1854              		.loc 1 303 1 is_stmt 0 view .LVU431
 1855 0608 38B5     		push	{r3, r4, r5, lr}
 1856              	.LCFI32:
 1857              		.cfi_def_cfa_offset 16
 1858              		.cfi_offset 3, -16
 1859              		.cfi_offset 4, -12
 1860              		.cfi_offset 5, -8
 1861              		.cfi_offset 14, -4
 1862              		.loc 1 304 17 view .LVU432
 1863 060a 164D     		ldr	r5, .L159
 303:BLDC.c        **** 	if((motorConfig.positiveMotoringRampTime == 0) || (motorConfig.negativeMotoringRampTime == 0))
 1864              		.loc 1 303 1 view .LVU433
 1865 060c 0446     		mov	r4, r0
 1866              		.loc 1 304 17 view .LVU434
 1867 060e EB8A     		ldrh	r3, [r5, #22]
 303:BLDC.c        **** 	if((motorConfig.positiveMotoringRampTime == 0) || (motorConfig.negativeMotoringRampTime == 0))
 1868              		.loc 1 303 1 view .LVU435
 1869 0610 0846     		mov	r0, r1
 1870              	.LVL119:
 1871              		.loc 1 304 4 view .LVU436
 1872 0612 0BB1     		cbz	r3, .L145
 1873              		.loc 1 304 64 discriminator 1 view .LVU437
 1874 0614 2A8B     		ldrh	r2, [r5, #24]
 1875              		.loc 1 304 49 discriminator 1 view .LVU438
 1876 0616 02B9     		cbnz	r2, .L156
 1877              	.L145:
 1878              	.LVL120:
 305:BLDC.c        **** 	{
 306:BLDC.c        **** 		actualTargetTorque = desiredTorque;
 307:BLDC.c        **** 	}
 308:BLDC.c        **** 	else if(actualTargetTorque < desiredTorque)		// increase torque
 309:BLDC.c        **** 	{
 310:BLDC.c        **** 		actualTargetTorque += motorConfig.positiveMotoringRampTime/(1000);				// divide with pre-factor
 311:BLDC.c        **** 		actualTargetTorque = MIN(actualTargetTorque, (int)motorConfig.maximumCurrent); 	// limit target t
 312:BLDC.c        **** 	}
 313:BLDC.c        **** 	else if(actualTargetTorque > desiredTorque)  	// decrease torque
 314:BLDC.c        **** 	{
 315:BLDC.c        **** 		actualTargetTorque -= motorConfig.negativeMotoringRampTime/(1000);				// divide with pre-factor
 316:BLDC.c        **** 		actualTargetTorque = (sensor_wheelVelocity()>= motorConfig.maximumSpeed*10/2) ? MAX(actualTargetT
 317:BLDC.c        **** 	}
 318:BLDC.c        **** 	return actualTargetTorque;
 1879              		.loc 1 318 2 is_stmt 1 view .LVU439
 319:BLDC.c        **** }
 1880              		.loc 1 319 1 is_stmt 0 view .LVU440
 1881 0618 38BD     		pop	{r3, r4, r5, pc}
 1882              	.LVL121:
 1883              	.L156:
 308:BLDC.c        **** 	{
 1884              		.loc 1 308 7 is_stmt 1 view .LVU441
 308:BLDC.c        **** 	{
 1885              		.loc 1 308 9 is_stmt 0 view .LVU442
 1886 061a 8C42     		cmp	r4, r1
 1887 061c 02DB     		blt	.L157
 313:BLDC.c        **** 	{
 1888              		.loc 1 313 7 is_stmt 1 view .LVU443
 313:BLDC.c        **** 	{
 1889              		.loc 1 313 9 is_stmt 0 view .LVU444
 1890 061e 0BDC     		bgt	.L158
 1891 0620 2046     		mov	r0, r4
 1892              	.LVL122:
 318:BLDC.c        **** }
 1893              		.loc 1 318 2 is_stmt 1 view .LVU445
 1894              		.loc 1 319 1 is_stmt 0 view .LVU446
 1895 0622 38BD     		pop	{r3, r4, r5, pc}
 1896              	.LVL123:
 1897              	.L157:
 310:BLDC.c        **** 		actualTargetTorque = MIN(actualTargetTorque, (int)motorConfig.maximumCurrent); 	// limit target t
 1898              		.loc 1 310 3 is_stmt 1 view .LVU447
 310:BLDC.c        **** 		actualTargetTorque = MIN(actualTargetTorque, (int)motorConfig.maximumCurrent); 	// limit target t
 1899              		.loc 1 310 61 is_stmt 0 view .LVU448
 1900 0624 1048     		ldr	r0, .L159+4
 1901              	.LVL124:
 311:BLDC.c        **** 	}
 1902              		.loc 1 311 22 view .LVU449
 1903 0626 A96B     		ldr	r1, [r5, #56]
 1904              	.LVL125:
 310:BLDC.c        **** 		actualTargetTorque = MIN(actualTargetTorque, (int)motorConfig.maximumCurrent); 	// limit target t
 1905              		.loc 1 310 61 view .LVU450
 1906 0628 A0FB0323 		umull	r2, r3, r0, r3
 310:BLDC.c        **** 		actualTargetTorque = MIN(actualTargetTorque, (int)motorConfig.maximumCurrent); 	// limit target t
 1907              		.loc 1 310 22 view .LVU451
 1908 062c 04EB9310 		add	r0, r4, r3, lsr #6
 1909              	.LVL126:
 311:BLDC.c        **** 	}
 1910              		.loc 1 311 3 is_stmt 1 view .LVU452
 311:BLDC.c        **** 	}
 1911              		.loc 1 311 22 is_stmt 0 view .LVU453
 1912 0630 8842     		cmp	r0, r1
 1913 0632 A8BF     		it	ge
 1914 0634 0846     		movge	r0, r1
 1915              	.LVL127:
 318:BLDC.c        **** }
 1916              		.loc 1 318 2 is_stmt 1 view .LVU454
 1917              		.loc 1 319 1 is_stmt 0 view .LVU455
 1918 0636 38BD     		pop	{r3, r4, r5, pc}
 1919              	.LVL128:
 1920              	.L158:
 315:BLDC.c        **** 		actualTargetTorque = (sensor_wheelVelocity()>= motorConfig.maximumSpeed*10/2) ? MAX(actualTargetT
 1921              		.loc 1 315 3 is_stmt 1 view .LVU456
 315:BLDC.c        **** 		actualTargetTorque = (sensor_wheelVelocity()>= motorConfig.maximumSpeed*10/2) ? MAX(actualTargetT
 1922              		.loc 1 315 61 is_stmt 0 view .LVU457
 1923 0638 0B48     		ldr	r0, .L159+4
 1924              	.LVL129:
 315:BLDC.c        **** 		actualTargetTorque = (sensor_wheelVelocity()>= motorConfig.maximumSpeed*10/2) ? MAX(actualTargetT
 1925              		.loc 1 315 61 view .LVU458
 1926 063a A0FB0230 		umull	r3, r0, r0, r2
 315:BLDC.c        **** 		actualTargetTorque = (sensor_wheelVelocity()>= motorConfig.maximumSpeed*10/2) ? MAX(actualTargetT
 1927              		.loc 1 315 22 view .LVU459
 1928 063e A4EB9014 		sub	r4, r4, r0, lsr #6
 1929              	.LVL130:
 316:BLDC.c        **** 	}
 1930              		.loc 1 316 3 is_stmt 1 view .LVU460
 316:BLDC.c        **** 	}
 1931              		.loc 1 316 25 is_stmt 0 view .LVU461
 1932 0642 FFF7FEFF 		bl	sensor_wheelVelocity
 1933              	.LVL131:
 316:BLDC.c        **** 	}
 1934              		.loc 1 316 61 view .LVU462
 1935 0646 EB8E     		ldrh	r3, [r5, #54]
 316:BLDC.c        **** 	}
 1936              		.loc 1 316 77 view .LVU463
 1937 0648 03EB8303 		add	r3, r3, r3, lsl #2
 316:BLDC.c        **** 	}
 1938              		.loc 1 316 110 view .LVU464
 1939 064c 9842     		cmp	r0, r3
 1940 064e 02DB     		blt	.L147
 316:BLDC.c        **** 	}
 1941              		.loc 1 316 110 discriminator 1 view .LVU465
 1942 0650 24EAE470 		bic	r0, r4, r4, asr #31
 1943              	.LVL132:
 318:BLDC.c        **** }
 1944              		.loc 1 318 2 is_stmt 1 discriminator 1 view .LVU466
 1945              		.loc 1 319 1 is_stmt 0 discriminator 1 view .LVU467
 1946 0654 38BD     		pop	{r3, r4, r5, pc}
 1947              	.LVL133:
 1948              	.L147:
 316:BLDC.c        **** 	}
 1949              		.loc 1 316 112 discriminator 2 view .LVU468
 1950 0656 B5F84A00 		ldrh	r0, [r5, #74]
 316:BLDC.c        **** 	}
 1951              		.loc 1 316 110 discriminator 2 view .LVU469
 1952 065a A042     		cmp	r0, r4
 1953 065c B8BF     		it	lt
 1954 065e 2046     		movlt	r0, r4
 1955              	.LVL134:
 318:BLDC.c        **** }
 1956              		.loc 1 318 2 is_stmt 1 discriminator 2 view .LVU470
 1957              		.loc 1 319 1 is_stmt 0 discriminator 2 view .LVU471
 1958 0660 38BD     		pop	{r3, r4, r5, pc}
 1959              	.L160:
 1960 0662 00BF     		.align	2
 1961              	.L159:
 1962 0664 00000000 		.word	motorConfig
 1963 0668 D34D6210 		.word	274877907
 1964              		.cfi_endproc
 1965              	.LFE25:
 1967              		.align	1
 1968              		.p2align 2,,3
 1969              		.global	bldc_processBLDC
 1970              		.syntax unified
 1971              		.thumb
 1972              		.thumb_func
 1974              	bldc_processBLDC:
 1975              	.LFB26:
 320:BLDC.c        **** 
 321:BLDC.c        **** /* main regulation function */
 322:BLDC.c        **** void bldc_processBLDC()
 323:BLDC.c        **** {
 1976              		.loc 1 323 1 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 324:BLDC.c        **** 	// for timing debugging purposes only
 325:BLDC.c        **** 	static u32 lastSystick = 0;
 1980              		.loc 1 325 2 view .LVU473
 326:BLDC.c        **** 	static u32 lastSecCheckTime = 0;
 1981              		.loc 1 326 2 view .LVU474
 327:BLDC.c        **** 	static u32 last50MSecCheckTime = 0;
 1982              		.loc 1 327 2 view .LVU475
 328:BLDC.c        **** 	static u32 last90MSecCheckTime = 0;
 1983              		.loc 1 328 2 view .LVU476
 329:BLDC.c        **** 
 330:BLDC.c        **** 	u32 newSystick = systick_getTimer();
 1984              		.loc 1 330 2 view .LVU477
 323:BLDC.c        **** 	// for timing debugging purposes only
 1985              		.loc 1 323 1 is_stmt 0 view .LVU478
 1986 066c F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1987              	.LCFI33:
 1988              		.cfi_def_cfa_offset 24
 1989              		.cfi_offset 3, -24
 1990              		.cfi_offset 4, -20
 1991              		.cfi_offset 5, -16
 1992              		.cfi_offset 6, -12
 1993              		.cfi_offset 7, -8
 1994              		.cfi_offset 14, -4
 1995              		.loc 1 330 19 view .LVU479
 1996 066e FFF7FEFF 		bl	systick_getTimer
 1997              	.LVL135:
 331:BLDC.c        **** 
 332:BLDC.c        **** 	// 1ms "timer"
 333:BLDC.c        **** 	if (lastSystick != newSystick)
 1998              		.loc 1 333 18 view .LVU480
 1999 0672 784D     		ldr	r5, .L185
 330:BLDC.c        **** 
 2000              		.loc 1 330 19 view .LVU481
 2001 0674 0446     		mov	r4, r0
 2002              	.LVL136:
 2003              		.loc 1 333 2 is_stmt 1 view .LVU482
 2004              		.loc 1 333 5 is_stmt 0 view .LVU483
 2005 0676 EB69     		ldr	r3, [r5, #28]
 2006 0678 8342     		cmp	r3, r0
 2007 067a 1CD1     		bne	.L177
 2008              	.LVL137:
 2009              	.L162:
 334:BLDC.c        **** 	{
 335:BLDC.c        **** 		bldc_checkCommutationMode();
 336:BLDC.c        **** 		systemInfo_incCurrentLoopCounter();
 337:BLDC.c        **** 		systemInfo_incVelocityLoopCounter();
 338:BLDC.c        **** 
 339:BLDC.c        **** 		led_periodicJob();
 340:BLDC.c        **** 		rear_led_periodicJob();
 341:BLDC.c        **** 
 342:BLDC.c        **** 		// todo: use the next line to start the LEV by Power-On-Button:
 343:BLDC.c        **** 		//button_periodicJob();
 344:BLDC.c        **** 
 345:BLDC.c        **** 		sensor_brakeDetection();
 346:BLDC.c        **** 
 347:BLDC.c        **** 		//  ===== analog information handling =====
 348:BLDC.c        **** 		sensor_updatePedalTorque();
 349:BLDC.c        **** 		sensor_computePedalTorqMinMax();
 350:BLDC.c        **** 
 351:BLDC.c        **** 		// ===== digital information handling =====
 352:BLDC.c        **** 		sensor_updatePedalCounter();
 353:BLDC.c        **** 		sensor_updateWheelCounter();
 354:BLDC.c        **** 		sensor_updateWheelVelocity();
 355:BLDC.c        **** 		sensor_updateActualTorqueLimit_Gain();
 356:BLDC.c        **** 
 357:BLDC.c        **** 		if (motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP)
 358:BLDC.c        **** 		{
 359:BLDC.c        **** 			// update target velocity
 360:BLDC.c        **** 			rampGenerator.targetVelocity = gDesiredVelocity;
 361:BLDC.c        **** 			tmc_linearRamp_computeRampVelocity(&rampGenerator);
 362:BLDC.c        **** 
 363:BLDC.c        **** 			// use flux instead of torque
 364:BLDC.c        **** 			tmc4671_setTargetTorque_mA(DEFAULT_MC, motorConfig.dualShuntFactor, 0);
 365:BLDC.c        **** 			tmc4671_setTargetFlux_mA(DEFAULT_MC, motorConfig.dualShuntFactor, (rampGenerator.rampVelocity ==
 366:BLDC.c        **** 
 367:BLDC.c        **** 			// set open loop velocity
 368:BLDC.c        **** 			tmc4671_writeInt(DEFAULT_MC, TMC4671_OPENLOOP_VELOCITY_TARGET, rampGenerator.rampVelocity);
 369:BLDC.c        **** 		}
 370:BLDC.c        **** 		else if (motorConfig.commutationMode == COMM_MODE_FOC_DIGITAL_HALL)
 371:BLDC.c        **** 		{
 372:BLDC.c        **** 			// reset flux value
 373:BLDC.c        **** 			tmc4671_setTargetFlux_mA(DEFAULT_MC, motorConfig.dualShuntFactor, 0);
 374:BLDC.c        **** 
 375:BLDC.c        **** 			if (gMotionMode == TORQUE_MODE)
 376:BLDC.c        **** 			{
 377:BLDC.c        **** 				// set new target torque
 378:BLDC.c        **** 				tmc4671_setTargetTorque_mA(DEFAULT_MC, motorConfig.dualShuntFactor, gTargetTorque);
 379:BLDC.c        **** 			}
 380:BLDC.c        **** 			else if (gMotionMode == VELOCITY_MODE)
 381:BLDC.c        **** 			{
 382:BLDC.c        **** 				// update target velocity
 383:BLDC.c        **** 				rampGenerator.targetVelocity = gDesiredVelocity;
 384:BLDC.c        **** 				tmc_linearRamp_computeRampVelocity(&rampGenerator);
 385:BLDC.c        **** 
 386:BLDC.c        **** 				// set new target velocity
 387:BLDC.c        **** 				tmc4671_writeInt(DEFAULT_MC, TMC4671_PID_VELOCITY_TARGET, rampGenerator.rampVelocity);
 388:BLDC.c        **** 			}
 389:BLDC.c        **** 		}
 390:BLDC.c        **** 		else if (motorConfig.commutationMode == COMM_MODE_FOC_DIGITAL_HALL_PEDAL_ASSIST)
 391:BLDC.c        **** 		{
 392:BLDC.c        **** 			s32 pedalTargetTorque = sensor_motorAssistance();
 393:BLDC.c        **** 			debug_setTestVar1(pedalTargetTorque);
 394:BLDC.c        **** 			gRampTargetTorque = updateRampTargetTorque(gRampTargetTorque, pedalTargetTorque);
 395:BLDC.c        **** 
 396:BLDC.c        **** 			// reset flux value
 397:BLDC.c        **** 			tmc4671_setTargetFlux_mA(DEFAULT_MC, motorConfig.dualShuntFactor, 0);
 398:BLDC.c        **** 
 399:BLDC.c        **** 			gRampTargetTorque = sensor_cutOffDistance(gRampTargetTorque);
 400:BLDC.c        **** 			gRampTargetTorque = button_batterySaving(gRampTargetTorque);
 401:BLDC.c        **** 
 402:BLDC.c        **** 			bldc_setTargetMotorCurrent(gRampTargetTorque);
 403:BLDC.c        **** 
 404:BLDC.c        **** 			// debug_setTestVar6(cutOffDistance);
 405:BLDC.c        **** 			// debug_setTestVar7(cutOffTime);
 406:BLDC.c        **** 		}
 407:BLDC.c        **** 
 408:BLDC.c        **** 		sensor_updateMotorVelocity();
 409:BLDC.c        **** 
 410:BLDC.c        **** 		// check supply voltage
 411:BLDC.c        **** 		bldc_checkSupplyVoltage();
 412:BLDC.c        **** 		bldc_checkInput12V();
 413:BLDC.c        **** 		bldc_checkInput6V();
 414:BLDC.c        **** 		bldc_checkInput5V();
 415:BLDC.c        **** 
 416:BLDC.c        **** 		// update check time
 417:BLDC.c        **** 		lastSystick = newSystick;
 418:BLDC.c        **** 	}
 419:BLDC.c        **** 
 420:BLDC.c        **** 	// 50ms "timer"
 421:BLDC.c        **** 	if (abs(newSystick-last50MSecCheckTime) >= 50)
 2010              		.loc 1 421 2 is_stmt 1 view .LVU484
 2011              		.loc 1 421 20 is_stmt 0 view .LVU485
 2012 067c 6B6A     		ldr	r3, [r5, #36]
 2013 067e E31A     		subs	r3, r4, r3
 2014              		.loc 1 421 6 view .LVU486
 2015 0680 002B     		cmp	r3, #0
 2016 0682 B8BF     		it	lt
 2017 0684 5B42     		rsblt	r3, r3, #0
 2018              		.loc 1 421 5 view .LVU487
 2019 0686 312B     		cmp	r3, #49
 2020 0688 6DDC     		bgt	.L178
 2021              	.L170:
 422:BLDC.c        **** 	{
 423:BLDC.c        **** 		sensor_mapSpeedTorque();
 424:BLDC.c        **** 
 425:BLDC.c        **** 		// update check time
 426:BLDC.c        **** 		last50MSecCheckTime = newSystick;
 427:BLDC.c        **** 	}
 428:BLDC.c        **** 
 429:BLDC.c        **** 	//90ms "timer"
 430:BLDC.c        **** 	if (abs(newSystick-last90MSecCheckTime) >= 90)
 2022              		.loc 1 430 2 is_stmt 1 view .LVU488
 2023              		.loc 1 430 20 is_stmt 0 view .LVU489
 2024 068a AB6A     		ldr	r3, [r5, #40]
 2025 068c E31A     		subs	r3, r4, r3
 2026              		.loc 1 430 6 view .LVU490
 2027 068e 002B     		cmp	r3, #0
 2028 0690 B8BF     		it	lt
 2029 0692 5B42     		rsblt	r3, r3, #0
 2030              		.loc 1 430 5 view .LVU491
 2031 0694 592B     		cmp	r3, #89
 2032 0696 62DC     		bgt	.L179
 2033              	.L171:
 431:BLDC.c        **** 	{
 432:BLDC.c        **** 		// update velocities
 433:BLDC.c        **** 		sensor_updatePedalVelocity();
 434:BLDC.c        **** 
 435:BLDC.c        **** 		// update check time
 436:BLDC.c        **** 		last90MSecCheckTime = newSystick;
 437:BLDC.c        **** 	}
 438:BLDC.c        **** 
 439:BLDC.c        **** 	// 1s "timer"
 440:BLDC.c        **** 	if (abs(newSystick-lastSecCheckTime) >= 1000)
 2034              		.loc 1 440 2 is_stmt 1 view .LVU492
 2035              		.loc 1 440 20 is_stmt 0 view .LVU493
 2036 0698 EB6A     		ldr	r3, [r5, #44]
 2037 069a E31A     		subs	r3, r4, r3
 2038              		.loc 1 440 6 view .LVU494
 2039 069c 002B     		cmp	r3, #0
 2040 069e B8BF     		it	lt
 2041 06a0 5B42     		rsblt	r3, r3, #0
 2042              		.loc 1 440 5 view .LVU495
 2043 06a2 B3F57A7F 		cmp	r3, #1000
 2044 06a6 00DA     		bge	.L180
 441:BLDC.c        **** 	{
 442:BLDC.c        **** 		// check motor temperature every second
 443:BLDC.c        **** 		bldc_checkMotorTemperature();
 444:BLDC.c        **** 
 445:BLDC.c        **** 		button_autoDeactivation();
 446:BLDC.c        **** 
 447:BLDC.c        **** 		// update check time
 448:BLDC.c        **** 		lastSecCheckTime = newSystick;
 449:BLDC.c        **** 	}
 450:BLDC.c        **** }
 2045              		.loc 1 450 1 view .LVU496
 2046 06a8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2047              	.LVL138:
 2048              	.L180:
 443:BLDC.c        **** 
 2049              		.loc 1 443 3 is_stmt 1 view .LVU497
 2050 06aa FFF7FEFF 		bl	bldc_checkMotorTemperature
 2051              	.LVL139:
 445:BLDC.c        **** 
 2052              		.loc 1 445 3 view .LVU498
 2053 06ae FFF7FEFF 		bl	button_autoDeactivation
 2054              	.LVL140:
 448:BLDC.c        **** 	}
 2055              		.loc 1 448 3 view .LVU499
 448:BLDC.c        **** 	}
 2056              		.loc 1 448 20 is_stmt 0 view .LVU500
 2057 06b2 EC62     		str	r4, [r5, #44]
 2058              		.loc 1 450 1 view .LVU501
 2059 06b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2060              	.LVL141:
 2061              	.L177:
 335:BLDC.c        **** 		systemInfo_incCurrentLoopCounter();
 2062              		.loc 1 335 3 is_stmt 1 view .LVU502
 357:BLDC.c        **** 		{
 2063              		.loc 1 357 18 is_stmt 0 view .LVU503
 2064 06b6 684E     		ldr	r6, .L185+4
 335:BLDC.c        **** 		systemInfo_incCurrentLoopCounter();
 2065              		.loc 1 335 3 view .LVU504
 2066 06b8 FFF7FEFF 		bl	bldc_checkCommutationMode
 2067              	.LVL142:
 336:BLDC.c        **** 		systemInfo_incVelocityLoopCounter();
 2068              		.loc 1 336 3 is_stmt 1 view .LVU505
 2069 06bc FFF7FEFF 		bl	systemInfo_incCurrentLoopCounter
 2070              	.LVL143:
 337:BLDC.c        **** 
 2071              		.loc 1 337 3 view .LVU506
 2072 06c0 FFF7FEFF 		bl	systemInfo_incVelocityLoopCounter
 2073              	.LVL144:
 339:BLDC.c        **** 		rear_led_periodicJob();
 2074              		.loc 1 339 3 view .LVU507
 2075 06c4 FFF7FEFF 		bl	led_periodicJob
 2076              	.LVL145:
 340:BLDC.c        **** 
 2077              		.loc 1 340 3 view .LVU508
 2078 06c8 FFF7FEFF 		bl	rear_led_periodicJob
 2079              	.LVL146:
 345:BLDC.c        **** 
 2080              		.loc 1 345 3 view .LVU509
 2081 06cc FFF7FEFF 		bl	sensor_brakeDetection
 2082              	.LVL147:
 348:BLDC.c        **** 		sensor_computePedalTorqMinMax();
 2083              		.loc 1 348 3 view .LVU510
 2084 06d0 FFF7FEFF 		bl	sensor_updatePedalTorque
 2085              	.LVL148:
 349:BLDC.c        **** 
 2086              		.loc 1 349 3 view .LVU511
 2087 06d4 FFF7FEFF 		bl	sensor_computePedalTorqMinMax
 2088              	.LVL149:
 352:BLDC.c        **** 		sensor_updateWheelCounter();
 2089              		.loc 1 352 3 view .LVU512
 2090 06d8 FFF7FEFF 		bl	sensor_updatePedalCounter
 2091              	.LVL150:
 353:BLDC.c        **** 		sensor_updateWheelVelocity();
 2092              		.loc 1 353 3 view .LVU513
 2093 06dc FFF7FEFF 		bl	sensor_updateWheelCounter
 2094              	.LVL151:
 354:BLDC.c        **** 		sensor_updateActualTorqueLimit_Gain();
 2095              		.loc 1 354 3 view .LVU514
 2096 06e0 FFF7FEFF 		bl	sensor_updateWheelVelocity
 2097              	.LVL152:
 355:BLDC.c        **** 
 2098              		.loc 1 355 3 view .LVU515
 2099 06e4 FFF7FEFF 		bl	sensor_updateActualTorqueLimit_Gain
 2100              	.LVL153:
 357:BLDC.c        **** 		{
 2101              		.loc 1 357 3 view .LVU516
 357:BLDC.c        **** 		{
 2102              		.loc 1 357 18 is_stmt 0 view .LVU517
 2103 06e8 96F86A30 		ldrb	r3, [r6, #106]	@ zero_extendqisi2
 357:BLDC.c        **** 		{
 2104              		.loc 1 357 6 view .LVU518
 2105 06ec 012B     		cmp	r3, #1
 2106 06ee 3ED0     		beq	.L181
 370:BLDC.c        **** 		{
 2107              		.loc 1 370 8 is_stmt 1 view .LVU519
 370:BLDC.c        **** 		{
 2108              		.loc 1 370 11 is_stmt 0 view .LVU520
 2109 06f0 022B     		cmp	r3, #2
 2110 06f2 56D0     		beq	.L182
 390:BLDC.c        **** 		{
 2111              		.loc 1 390 8 is_stmt 1 view .LVU521
 390:BLDC.c        **** 		{
 2112              		.loc 1 390 11 is_stmt 0 view .LVU522
 2113 06f4 032B     		cmp	r3, #3
 2114 06f6 6ED0     		beq	.L183
 2115              	.L165:
 408:BLDC.c        **** 
 2116              		.loc 1 408 3 is_stmt 1 view .LVU523
 2117 06f8 FFF7FEFF 		bl	sensor_updateMotorVelocity
 2118              	.LVL154:
 411:BLDC.c        **** 		bldc_checkInput12V();
 2119              		.loc 1 411 3 view .LVU524
 2120 06fc FFF7FEFF 		bl	bldc_checkSupplyVoltage
 2121              	.LVL155:
 412:BLDC.c        **** 		bldc_checkInput6V();
 2122              		.loc 1 412 3 view .LVU525
 2123              	.LBB95:
 2124              	.LBI95:
 202:BLDC.c        **** {
 2125              		.loc 1 202 6 view .LVU526
 2126              	.LBB96:
 205:BLDC.c        **** }
 2127              		.loc 1 205 2 view .LVU527
 205:BLDC.c        **** }
 2128              		.loc 1 205 40 is_stmt 0 view .LVU528
 2129 0700 564B     		ldr	r3, .L185+8
 205:BLDC.c        **** }
 2130              		.loc 1 205 88 view .LVU529
 2131 0702 574E     		ldr	r6, .L185+12
 205:BLDC.c        **** }
 2132              		.loc 1 205 40 view .LVU530
 2133 0704 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2134 0706 FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 2135              	.LVL156:
 205:BLDC.c        **** }
 2136              		.loc 1 205 39 view .LVU531
 2137 070a 8A23     		movs	r3, #138
 205:BLDC.c        **** }
 2138              		.loc 1 205 40 view .LVU532
 2139 070c 0246     		mov	r2, r0
 205:BLDC.c        **** }
 2140              		.loc 1 205 39 view .LVU533
 2141 070e 03FB02F2 		mul	r2, r3, r2
 2142              	.LBE96:
 2143              	.LBE95:
 2144              	.LBB98:
 2145              	.LBB99:
 216:BLDC.c        **** }
 2146              		.loc 1 216 38 view .LVU534
 2147 0712 5449     		ldr	r1, .L185+16
 2148 0714 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2149              	.LBE99:
 2150              	.LBE98:
 2151              	.LBB103:
 2152              	.LBB97:
 205:BLDC.c        **** }
 2153              		.loc 1 205 88 view .LVU535
 2154 0716 A6FB0213 		umull	r1, r3, r6, r2
 2155 071a D21A     		subs	r2, r2, r3
 2156 071c 03EB5203 		add	r3, r3, r2, lsr #1
 2157 0720 DB0A     		lsrs	r3, r3, #11
 205:BLDC.c        **** }
 2158              		.loc 1 205 18 view .LVU536
 2159 0722 EB60     		str	r3, [r5, #12]
 2160              	.LBE97:
 2161              	.LBE103:
 413:BLDC.c        **** 		bldc_checkInput5V();
 2162              		.loc 1 413 3 is_stmt 1 view .LVU537
 2163              	.LBB104:
 2164              	.LBI98:
 213:BLDC.c        **** {
 2165              		.loc 1 213 6 view .LVU538
 2166              	.LBB100:
 216:BLDC.c        **** }
 2167              		.loc 1 216 2 view .LVU539
 216:BLDC.c        **** }
 2168              		.loc 1 216 38 is_stmt 0 view .LVU540
 2169 0724 FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 2170              	.LVL157:
 2171 0728 0346     		mov	r3, r0
 2172              	.LBE100:
 2173              	.LBE104:
 2174              	.LBB105:
 2175              	.LBB106:
 227:BLDC.c        **** }
 2176              		.loc 1 227 38 view .LVU541
 2177 072a 4F4A     		ldr	r2, .L185+20
 2178              	.LBE106:
 2179              	.LBE105:
 2180              	.LBB110:
 2181              	.LBB101:
 216:BLDC.c        **** }
 2182              		.loc 1 216 37 view .LVU542
 2183 072c C3EB4313 		rsb	r3, r3, r3, lsl #5
 2184 0730 5B00     		lsls	r3, r3, #1
 2185              	.LBE101:
 2186              	.LBE110:
 2187              	.LBB111:
 2188              	.LBB107:
 227:BLDC.c        **** }
 2189              		.loc 1 227 38 view .LVU543
 2190 0732 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 2191              	.LBE107:
 2192              	.LBE111:
 2193              	.LBB112:
 2194              	.LBB102:
 216:BLDC.c        **** }
 2195              		.loc 1 216 85 view .LVU544
 2196 0734 A6FB0312 		umull	r1, r2, r6, r3
 2197 0738 9B1A     		subs	r3, r3, r2
 2198 073a 02EB5303 		add	r3, r2, r3, lsr #1
 2199 073e DB0A     		lsrs	r3, r3, #11
 216:BLDC.c        **** }
 2200              		.loc 1 216 17 view .LVU545
 2201 0740 2B61     		str	r3, [r5, #16]
 2202              	.LBE102:
 2203              	.LBE112:
 414:BLDC.c        **** 
 2204              		.loc 1 414 3 is_stmt 1 view .LVU546
 2205              	.LBB113:
 2206              	.LBI105:
 224:BLDC.c        **** {
 2207              		.loc 1 224 6 view .LVU547
 2208              	.LBB108:
 227:BLDC.c        **** }
 2209              		.loc 1 227 2 view .LVU548
 227:BLDC.c        **** }
 2210              		.loc 1 227 38 is_stmt 0 view .LVU549
 2211 0742 FFF7FEFF 		bl	tmcm_getModuleSpecificADCValue
 2212              	.LVL158:
 227:BLDC.c        **** }
 2213              		.loc 1 227 37 view .LVU550
 2214 0746 C0EB4010 		rsb	r0, r0, r0, lsl #5
 2215 074a 4000     		lsls	r0, r0, #1
 227:BLDC.c        **** }
 2216              		.loc 1 227 85 view .LVU551
 2217 074c A6FB0036 		umull	r3, r6, r6, r0
 2218 0750 801B     		subs	r0, r0, r6
 2219 0752 06EB5006 		add	r6, r6, r0, lsr #1
 2220 0756 F60A     		lsrs	r6, r6, #11
 2221              	.LBE108:
 2222              	.LBE113:
 417:BLDC.c        **** 	}
 2223              		.loc 1 417 15 view .LVU552
 2224 0758 EC61     		str	r4, [r5, #28]
 2225              	.LBB114:
 2226              	.LBB109:
 227:BLDC.c        **** }
 2227              		.loc 1 227 17 view .LVU553
 2228 075a 6E61     		str	r6, [r5, #20]
 2229              	.LBE109:
 2230              	.LBE114:
 417:BLDC.c        **** 	}
 2231              		.loc 1 417 3 is_stmt 1 view .LVU554
 2232 075c 8EE7     		b	.L162
 2233              	.L179:
 433:BLDC.c        **** 
 2234              		.loc 1 433 3 view .LVU555
 2235 075e FFF7FEFF 		bl	sensor_updatePedalVelocity
 2236              	.LVL159:
 436:BLDC.c        **** 	}
 2237              		.loc 1 436 3 view .LVU556
 436:BLDC.c        **** 	}
 2238              		.loc 1 436 23 is_stmt 0 view .LVU557
 2239 0762 AC62     		str	r4, [r5, #40]
 2240 0764 98E7     		b	.L171
 2241              	.L178:
 423:BLDC.c        **** 
 2242              		.loc 1 423 3 is_stmt 1 view .LVU558
 2243 0766 FFF7FEFF 		bl	sensor_mapSpeedTorque
 2244              	.LVL160:
 426:BLDC.c        **** 	}
 2245              		.loc 1 426 3 view .LVU559
 426:BLDC.c        **** 	}
 2246              		.loc 1 426 23 is_stmt 0 view .LVU560
 2247 076a 6C62     		str	r4, [r5, #36]
 2248 076c 8DE7     		b	.L170
 2249              	.L181:
 360:BLDC.c        **** 			tmc_linearRamp_computeRampVelocity(&rampGenerator);
 2250              		.loc 1 360 4 is_stmt 1 view .LVU561
 360:BLDC.c        **** 			tmc_linearRamp_computeRampVelocity(&rampGenerator);
 2251              		.loc 1 360 33 is_stmt 0 view .LVU562
 2252 076e 3F4F     		ldr	r7, .L185+24
 2253 0770 6B68     		ldr	r3, [r5, #4]
 361:BLDC.c        **** 
 2254              		.loc 1 361 4 view .LVU563
 2255 0772 3846     		mov	r0, r7
 360:BLDC.c        **** 			tmc_linearRamp_computeRampVelocity(&rampGenerator);
 2256              		.loc 1 360 33 view .LVU564
 2257 0774 FB60     		str	r3, [r7, #12]
 361:BLDC.c        **** 
 2258              		.loc 1 361 4 is_stmt 1 view .LVU565
 2259 0776 FFF7FEFF 		bl	tmc_linearRamp_computeRampVelocity
 2260              	.LVL161:
 364:BLDC.c        **** 			tmc4671_setTargetFlux_mA(DEFAULT_MC, motorConfig.dualShuntFactor, (rampGenerator.rampVelocity ==
 2261              		.loc 1 364 4 view .LVU566
 2262 077a 0022     		movs	r2, #0
 2263 077c B6F86810 		ldrh	r1, [r6, #104]
 2264 0780 1046     		mov	r0, r2
 2265 0782 FFF7FEFF 		bl	tmc4671_setTargetTorque_mA
 2266              	.LVL162:
 365:BLDC.c        **** 
 2267              		.loc 1 365 4 view .LVU567
 365:BLDC.c        **** 
 2268              		.loc 1 365 84 is_stmt 0 view .LVU568
 2269 0786 3A69     		ldr	r2, [r7, #16]
 365:BLDC.c        **** 
 2270              		.loc 1 365 4 view .LVU569
 2271 0788 B6F86810 		ldrh	r1, [r6, #104]
 2272 078c 02B1     		cbz	r2, .L164
 365:BLDC.c        **** 
 2273              		.loc 1 365 4 discriminator 1 view .LVU570
 2274 078e 326E     		ldr	r2, [r6, #96]
 2275              	.L164:
 365:BLDC.c        **** 
 2276              		.loc 1 365 4 discriminator 4 view .LVU571
 2277 0790 0020     		movs	r0, #0
 2278 0792 FFF7FEFF 		bl	tmc4671_setTargetFlux_mA
 2279              	.LVL163:
 368:BLDC.c        **** 		}
 2280              		.loc 1 368 4 is_stmt 1 discriminator 4 view .LVU572
 2281 0796 2121     		movs	r1, #33
 2282 0798 0020     		movs	r0, #0
 2283 079a 3A69     		ldr	r2, [r7, #16]
 2284 079c FFF7FEFF 		bl	tmc4671_writeInt
 2285              	.LVL164:
 2286 07a0 AAE7     		b	.L165
 2287              	.L182:
 373:BLDC.c        **** 
 2288              		.loc 1 373 4 view .LVU573
 2289 07a2 0022     		movs	r2, #0
 2290 07a4 B6F86810 		ldrh	r1, [r6, #104]
 2291 07a8 1046     		mov	r0, r2
 2292 07aa FFF7FEFF 		bl	tmc4671_setTargetFlux_mA
 2293              	.LVL165:
 375:BLDC.c        **** 			{
 2294              		.loc 1 375 4 view .LVU574
 375:BLDC.c        **** 			{
 2295              		.loc 1 375 20 is_stmt 0 view .LVU575
 2296 07ae 304B     		ldr	r3, .L185+28
 2297 07b0 1B68     		ldr	r3, [r3]
 375:BLDC.c        **** 			{
 2298              		.loc 1 375 7 view .LVU576
 2299 07b2 B3F5006F 		cmp	r3, #2048
 2300 07b6 45D0     		beq	.L184
 380:BLDC.c        **** 			{
 2301              		.loc 1 380 9 is_stmt 1 view .LVU577
 380:BLDC.c        **** 			{
 2302              		.loc 1 380 12 is_stmt 0 view .LVU578
 2303 07b8 B3F5007F 		cmp	r3, #512
 2304 07bc 9CD1     		bne	.L165
 383:BLDC.c        **** 				tmc_linearRamp_computeRampVelocity(&rampGenerator);
 2305              		.loc 1 383 5 is_stmt 1 view .LVU579
 383:BLDC.c        **** 				tmc_linearRamp_computeRampVelocity(&rampGenerator);
 2306              		.loc 1 383 34 is_stmt 0 view .LVU580
 2307 07be 2B4E     		ldr	r6, .L185+24
 2308 07c0 6B68     		ldr	r3, [r5, #4]
 384:BLDC.c        **** 
 2309              		.loc 1 384 5 view .LVU581
 2310 07c2 3046     		mov	r0, r6
 383:BLDC.c        **** 				tmc_linearRamp_computeRampVelocity(&rampGenerator);
 2311              		.loc 1 383 34 view .LVU582
 2312 07c4 F360     		str	r3, [r6, #12]
 384:BLDC.c        **** 
 2313              		.loc 1 384 5 is_stmt 1 view .LVU583
 2314 07c6 FFF7FEFF 		bl	tmc_linearRamp_computeRampVelocity
 2315              	.LVL166:
 387:BLDC.c        **** 			}
 2316              		.loc 1 387 5 view .LVU584
 2317 07ca 6621     		movs	r1, #102
 2318 07cc 0020     		movs	r0, #0
 2319 07ce 3269     		ldr	r2, [r6, #16]
 2320 07d0 FFF7FEFF 		bl	tmc4671_writeInt
 2321              	.LVL167:
 2322 07d4 90E7     		b	.L165
 2323              	.L183:
 2324              	.LBB115:
 392:BLDC.c        **** 			debug_setTestVar1(pedalTargetTorque);
 2325              		.loc 1 392 4 view .LVU585
 392:BLDC.c        **** 			debug_setTestVar1(pedalTargetTorque);
 2326              		.loc 1 392 28 is_stmt 0 view .LVU586
 2327 07d6 FFF7FEFF 		bl	sensor_motorAssistance
 2328              	.LVL168:
 2329 07da 0746     		mov	r7, r0
 2330              	.LVL169:
 393:BLDC.c        **** 			gRampTargetTorque = updateRampTargetTorque(gRampTargetTorque, pedalTargetTorque);
 2331              		.loc 1 393 4 is_stmt 1 view .LVU587
 2332 07dc FFF7FEFF 		bl	debug_setTestVar1
 2333              	.LVL170:
 394:BLDC.c        **** 
 2334              		.loc 1 394 4 view .LVU588
 394:BLDC.c        **** 
 2335              		.loc 1 394 24 is_stmt 0 view .LVU589
 2336 07e0 3946     		mov	r1, r7
 2337 07e2 286A     		ldr	r0, [r5, #32]
 2338 07e4 FFF7FEFF 		bl	updateRampTargetTorque
 2339              	.LVL171:
 397:BLDC.c        **** 
 2340              		.loc 1 397 4 view .LVU590
 2341 07e8 0022     		movs	r2, #0
 2342 07ea B6F86810 		ldrh	r1, [r6, #104]
 394:BLDC.c        **** 
 2343              		.loc 1 394 22 view .LVU591
 2344 07ee 2862     		str	r0, [r5, #32]
 397:BLDC.c        **** 
 2345              		.loc 1 397 4 is_stmt 1 view .LVU592
 2346 07f0 1046     		mov	r0, r2
 2347 07f2 FFF7FEFF 		bl	tmc4671_setTargetFlux_mA
 2348              	.LVL172:
 399:BLDC.c        **** 			gRampTargetTorque = button_batterySaving(gRampTargetTorque);
 2349              		.loc 1 399 4 view .LVU593
 399:BLDC.c        **** 			gRampTargetTorque = button_batterySaving(gRampTargetTorque);
 2350              		.loc 1 399 24 is_stmt 0 view .LVU594
 2351 07f6 286A     		ldr	r0, [r5, #32]
 2352 07f8 FFF7FEFF 		bl	sensor_cutOffDistance
 2353              	.LVL173:
 399:BLDC.c        **** 			gRampTargetTorque = button_batterySaving(gRampTargetTorque);
 2354              		.loc 1 399 22 view .LVU595
 2355 07fc 2862     		str	r0, [r5, #32]
 400:BLDC.c        **** 
 2356              		.loc 1 400 4 is_stmt 1 view .LVU596
 400:BLDC.c        **** 
 2357              		.loc 1 400 24 is_stmt 0 view .LVU597
 2358 07fe FFF7FEFF 		bl	button_batterySaving
 2359              	.LVL174:
 2360              	.LBB116:
 2361              	.LBB117:
  85:BLDC.c        **** 	  ||(motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP))
 2362              		.loc 1 85 5 view .LVU598
 2363 0802 96F86A20 		ldrb	r2, [r6, #106]	@ zero_extendqisi2
 2364              	.LBE117:
 2365              	.LBE116:
 400:BLDC.c        **** 
 2366              		.loc 1 400 24 view .LVU599
 2367 0806 0346     		mov	r3, r0
 2368              	.LBB124:
 2369              	.LBB122:
  85:BLDC.c        **** 	  ||(motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP))
 2370              		.loc 1 85 5 view .LVU600
 2371 0808 012A     		cmp	r2, #1
 2372              	.LBE122:
 2373              	.LBE124:
 400:BLDC.c        **** 
 2374              		.loc 1 400 22 view .LVU601
 2375 080a 2862     		str	r0, [r5, #32]
 402:BLDC.c        **** 
 2376              		.loc 1 402 4 is_stmt 1 view .LVU602
 2377              	.LVL175:
 2378              	.LBB125:
 2379              	.LBI116:
  83:BLDC.c        **** {
 2380              		.loc 1 83 6 view .LVU603
 2381              	.LBB123:
  85:BLDC.c        **** 	  ||(motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP))
 2382              		.loc 1 85 2 view .LVU604
  85:BLDC.c        **** 	  ||(motorConfig.commutationMode == COMM_MODE_FOC_OPEN_LOOP))
 2383              		.loc 1 85 5 is_stmt 0 view .LVU605
 2384 080c 7FF674AF 		bls	.L165
  89:BLDC.c        **** 	{
 2385              		.loc 1 89 2 is_stmt 1 view .LVU606
  89:BLDC.c        **** 	{
 2386              		.loc 1 89 4 is_stmt 0 view .LVU607
 2387 0810 4EF66021 		movw	r1, #60000
  89:BLDC.c        **** 	{
 2388              		.loc 1 89 36 view .LVU608
 2389 0814 00F5EA42 		add	r2, r0, #29952
 2390 0818 3032     		adds	r2, r2, #48
  89:BLDC.c        **** 	{
 2391              		.loc 1 89 4 view .LVU609
 2392 081a 8A42     		cmp	r2, r1
 2393 081c 3FF66CAF 		bhi	.L165
  91:BLDC.c        **** 
 2394              		.loc 1 91 3 is_stmt 1 view .LVU610
 2395              	.LBB118:
 2396              	.LBB119:
  43:BLDC.c        **** 
 2397              		.loc 1 43 2 is_stmt 0 view .LVU611
 2398 0820 4FF49E40 		mov	r0, #20224
 2399              	.LVL176:
  43:BLDC.c        **** 
 2400              		.loc 1 43 2 view .LVU612
 2401              	.LBE119:
 2402              	.LBE118:
  91:BLDC.c        **** 
 2403              		.loc 1 91 17 view .LVU613
 2404 0824 2B60     		str	r3, [r5]
  94:BLDC.c        **** 	}
 2405              		.loc 1 94 3 is_stmt 1 view .LVU614
 2406              	.LVL177:
 2407              	.LBB121:
 2408              	.LBI118:
  41:BLDC.c        **** {
 2409              		.loc 1 41 6 view .LVU615
 2410              	.LBB120:
  43:BLDC.c        **** 
 2411              		.loc 1 43 2 view .LVU616
 2412 0826 FFF7FEFF 		bl	flags_clearStatusFlag
 2413              	.LVL178:
  45:BLDC.c        **** 	{
 2414              		.loc 1 45 2 view .LVU617
  53:BLDC.c        **** 			gMotionMode = TORQUE_MODE;
 2415              		.loc 1 53 4 view .LVU618
 2416 082a 4FF40060 		mov	r0, #2048
 2417 082e FFF7FEFF 		bl	flags_setStatusFlag
 2418              	.LVL179:
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 2419              		.loc 1 54 4 view .LVU619
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 2420              		.loc 1 54 16 is_stmt 0 view .LVU620
 2421 0832 4FF40062 		mov	r2, #2048
 2422 0836 0E4B     		ldr	r3, .L185+28
  55:BLDC.c        **** 			break;
 2423              		.loc 1 55 4 view .LVU621
 2424 0838 0121     		movs	r1, #1
 2425 083a 0020     		movs	r0, #0
  54:BLDC.c        **** 			tmc4671_switchToMotionMode(DEFAULT_MC, TMC4671_MOTION_MODE_TORQUE);
 2426              		.loc 1 54 16 view .LVU622
 2427 083c 1A60     		str	r2, [r3]
  55:BLDC.c        **** 			break;
 2428              		.loc 1 55 4 is_stmt 1 view .LVU623
 2429 083e FFF7FEFF 		bl	tmc4671_switchToMotionMode
 2430              	.LVL180:
  56:BLDC.c        **** 		case VELOCITY_MODE:
 2431              		.loc 1 56 4 view .LVU624
 2432 0842 59E7     		b	.L165
 2433              	.LVL181:
 2434              	.L184:
  56:BLDC.c        **** 		case VELOCITY_MODE:
 2435              		.loc 1 56 4 is_stmt 0 view .LVU625
 2436              	.LBE120:
 2437              	.LBE121:
 2438              	.LBE123:
 2439              	.LBE125:
 2440              	.LBE115:
 378:BLDC.c        **** 			}
 2441              		.loc 1 378 5 is_stmt 1 view .LVU626
 2442 0844 0020     		movs	r0, #0
 2443 0846 2A68     		ldr	r2, [r5]
 2444 0848 B6F86810 		ldrh	r1, [r6, #104]
 2445 084c FFF7FEFF 		bl	tmc4671_setTargetTorque_mA
 2446              	.LVL182:
 2447 0850 52E7     		b	.L165
 2448              	.L186:
 2449 0852 00BF     		.align	2
 2450              	.L185:
 2451 0854 00000000 		.word	.LANCHOR1
 2452 0858 00000000 		.word	motorConfig
 2453 085c 00000000 		.word	ADC_VOLTAGE_12V
 2454 0860 01011000 		.word	1048833
 2455 0864 00000000 		.word	ADC_VOLTAGE_6V
 2456 0868 00000000 		.word	ADC_VOLTAGE_5V
 2457 086c 00000000 		.word	rampGenerator
 2458 0870 00000000 		.word	.LANCHOR0
 2459              		.cfi_endproc
 2460              	.LFE26:
 2462              		.align	1
 2463              		.p2align 2,,3
 2464              		.global	bldc_rampTargetTorque
 2465              		.syntax unified
 2466              		.thumb
 2467              		.thumb_func
 2469              	bldc_rampTargetTorque:
 2470              	.LFB27:
 451:BLDC.c        **** 
 452:BLDC.c        **** s32 bldc_rampTargetTorque()
 453:BLDC.c        **** {
 2471              		.loc 1 453 1 view -0
 2472              		.cfi_startproc
 2473              		@ args = 0, pretend = 0, frame = 0
 2474              		@ frame_needed = 0, uses_anonymous_args = 0
 2475              		@ link register save eliminated.
 454:BLDC.c        **** 	return gRampTargetTorque;
 2476              		.loc 1 454 2 view .LVU628
 2477              		.loc 1 454 9 is_stmt 0 view .LVU629
 2478 0874 014B     		ldr	r3, .L188
 455:BLDC.c        **** }
 2479              		.loc 1 455 1 view .LVU630
 2480 0876 186A     		ldr	r0, [r3, #32]
 2481 0878 7047     		bx	lr
 2482              	.L189:
 2483 087a 00BF     		.align	2
 2484              	.L188:
 2485 087c 00000000 		.word	.LANCHOR1
 2486              		.cfi_endproc
 2487              	.LFE27:
 2489              		.align	1
 2490              		.p2align 2,,3
 2491              		.global	bldc_getMotorPolePairs
 2492              		.syntax unified
 2493              		.thumb
 2494              		.thumb_func
 2496              	bldc_getMotorPolePairs:
 2497              	.LFB28:
 456:BLDC.c        **** 
 457:BLDC.c        **** u8 bldc_getMotorPolePairs()
 458:BLDC.c        **** {
 2498              		.loc 1 458 1 is_stmt 1 view -0
 2499              		.cfi_startproc
 2500              		@ args = 0, pretend = 0, frame = 0
 2501              		@ frame_needed = 0, uses_anonymous_args = 0
 459:BLDC.c        **** 	motorConfig.polePairs = tmc4671_getPolePairs(DEFAULT_MC);
 2502              		.loc 1 459 2 view .LVU632
 458:BLDC.c        **** 	motorConfig.polePairs = tmc4671_getPolePairs(DEFAULT_MC);
 2503              		.loc 1 458 1 is_stmt 0 view .LVU633
 2504 0880 08B5     		push	{r3, lr}
 2505              	.LCFI34:
 2506              		.cfi_def_cfa_offset 8
 2507              		.cfi_offset 3, -8
 2508              		.cfi_offset 14, -4
 2509              		.loc 1 459 26 view .LVU634
 2510 0882 0020     		movs	r0, #0
 2511 0884 FFF7FEFF 		bl	tmc4671_getPolePairs
 2512              	.LVL183:
 2513              		.loc 1 459 24 view .LVU635
 2514 0888 014B     		ldr	r3, .L192
 2515 088a 83F83C00 		strb	r0, [r3, #60]
 460:BLDC.c        **** 	return motorConfig.polePairs;
 2516              		.loc 1 460 2 is_stmt 1 view .LVU636
 461:BLDC.c        **** }
 2517              		.loc 1 461 1 is_stmt 0 view .LVU637
 2518 088e 08BD     		pop	{r3, pc}
 2519              	.L193:
 2520              		.align	2
 2521              	.L192:
 2522 0890 00000000 		.word	motorConfig
 2523              		.cfi_endproc
 2524              	.LFE28:
 2526              		.align	1
 2527              		.p2align 2,,3
 2528              		.global	bldc_setCommutationMode
 2529              		.syntax unified
 2530              		.thumb
 2531              		.thumb_func
 2533              	bldc_setCommutationMode:
 2534              	.LVL184:
 2535              	.LFB29:
 462:BLDC.c        **** 
 463:BLDC.c        **** bool bldc_setCommutationMode(u8 mode)
 464:BLDC.c        **** {
 2536              		.loc 1 464 1 is_stmt 1 view -0
 2537              		.cfi_startproc
 2538              		@ args = 0, pretend = 0, frame = 0
 2539              		@ frame_needed = 0, uses_anonymous_args = 0
 2540              		@ link register save eliminated.
 465:BLDC.c        **** 	if (mode <= 3)
 2541              		.loc 1 465 2 view .LVU639
 464:BLDC.c        **** 	if (mode <= 3)
 2542              		.loc 1 464 1 is_stmt 0 view .LVU640
 2543 0894 0346     		mov	r3, r0
 2544              		.loc 1 465 5 view .LVU641
 2545 0896 0328     		cmp	r0, #3
 466:BLDC.c        **** 	{
 467:BLDC.c        **** 		motorConfig.commutationMode = mode;
 2546              		.loc 1 467 3 is_stmt 1 view .LVU642
 2547              		.loc 1 467 31 is_stmt 0 view .LVU643
 2548 0898 9DBF     		ittte	ls
 2549 089a 034A     		ldrls	r2, .L197
 468:BLDC.c        **** 		return true;
 2550              		.loc 1 468 10 view .LVU644
 2551 089c 0120     		movls	r0, #1
 2552              	.LVL185:
 467:BLDC.c        **** 		return true;
 2553              		.loc 1 467 31 view .LVU645
 2554 089e 82F86A30 		strbls	r3, [r2, #106]
 2555              		.loc 1 468 3 is_stmt 1 view .LVU646
 469:BLDC.c        **** 	}
 470:BLDC.c        **** 	return false;
 2556              		.loc 1 470 9 is_stmt 0 view .LVU647
 2557 08a2 0020     		movhi	r0, #0
 471:BLDC.c        **** }
 2558              		.loc 1 471 1 view .LVU648
 2559 08a4 7047     		bx	lr
 2560              	.L198:
 2561 08a6 00BF     		.align	2
 2562              	.L197:
 2563 08a8 00000000 		.word	motorConfig
 2564              		.cfi_endproc
 2565              	.LFE29:
 2567              		.align	1
 2568              		.p2align 2,,3
 2569              		.global	bldc_getCommutationMode
 2570              		.syntax unified
 2571              		.thumb
 2572              		.thumb_func
 2574              	bldc_getCommutationMode:
 2575              	.LFB30:
 472:BLDC.c        **** 
 473:BLDC.c        **** u8 bldc_getCommutationMode()
 474:BLDC.c        **** {
 2576              		.loc 1 474 1 is_stmt 1 view -0
 2577              		.cfi_startproc
 2578              		@ args = 0, pretend = 0, frame = 0
 2579              		@ frame_needed = 0, uses_anonymous_args = 0
 2580              		@ link register save eliminated.
 475:BLDC.c        **** 	return motorConfig.commutationMode;
 2581              		.loc 1 475 2 view .LVU650
 2582              		.loc 1 475 20 is_stmt 0 view .LVU651
 2583 08ac 014B     		ldr	r3, .L200
 476:BLDC.c        **** }
 2584              		.loc 1 476 1 view .LVU652
 2585 08ae 93F86A00 		ldrb	r0, [r3, #106]	@ zero_extendqisi2
 2586 08b2 7047     		bx	lr
 2587              	.L201:
 2588              		.align	2
 2589              	.L200:
 2590 08b4 00000000 		.word	motorConfig
 2591              		.cfi_endproc
 2592              	.LFE30:
 2594              		.align	1
 2595              		.p2align 2,,3
 2596              		.global	bldc_getOpenLoopAngle
 2597              		.syntax unified
 2598              		.thumb
 2599              		.thumb_func
 2601              	bldc_getOpenLoopAngle:
 2602              	.LFB31:
 477:BLDC.c        **** 
 478:BLDC.c        **** s16 bldc_getOpenLoopAngle()
 479:BLDC.c        **** {
 2603              		.loc 1 479 1 is_stmt 1 view -0
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 0
 2606              		@ frame_needed = 0, uses_anonymous_args = 0
 480:BLDC.c        **** 	return FIELD_GET(tmc4671_readInt(DEFAULT_MC, TMC4671_OPENLOOP_PHI), TMC4671_OPENLOOP_PHI_MASK, TMC
 2607              		.loc 1 480 2 view .LVU654
 2608              		.loc 1 480 9 is_stmt 0 view .LVU655
 2609 08b8 2321     		movs	r1, #35
 479:BLDC.c        **** 	return FIELD_GET(tmc4671_readInt(DEFAULT_MC, TMC4671_OPENLOOP_PHI), TMC4671_OPENLOOP_PHI_MASK, TMC
 2610              		.loc 1 479 1 view .LVU656
 2611 08ba 08B5     		push	{r3, lr}
 2612              	.LCFI35:
 2613              		.cfi_def_cfa_offset 8
 2614              		.cfi_offset 3, -8
 2615              		.cfi_offset 14, -4
 2616              		.loc 1 480 9 view .LVU657
 2617 08bc 0020     		movs	r0, #0
 2618 08be FFF7FEFF 		bl	tmc4671_readInt
 2619              	.LVL186:
 481:BLDC.c        **** }
 2620              		.loc 1 481 1 view .LVU658
 2621 08c2 00B2     		sxth	r0, r0
 2622 08c4 08BD     		pop	{r3, pc}
 2623              		.cfi_endproc
 2624              	.LFE31:
 2626              		.align	1
 2627 08c6 00BF     		.p2align 2,,3
 2628              		.global	bldc_getEncoderAngle
 2629              		.syntax unified
 2630              		.thumb
 2631              		.thumb_func
 2633              	bldc_getEncoderAngle:
 2634              	.LFB32:
 482:BLDC.c        **** 
 483:BLDC.c        **** s16 bldc_getEncoderAngle()
 484:BLDC.c        **** {
 2635              		.loc 1 484 1 is_stmt 1 view -0
 2636              		.cfi_startproc
 2637              		@ args = 0, pretend = 0, frame = 0
 2638              		@ frame_needed = 0, uses_anonymous_args = 0
 485:BLDC.c        **** 	return FIELD_GET(tmc4671_readInt(DEFAULT_MC, TMC4671_ABN_DECODER_PHI_E_PHI_M), TMC4671_ABN_DECODER
 2639              		.loc 1 485 2 view .LVU660
 2640              		.loc 1 485 9 is_stmt 0 view .LVU661
 2641 08c8 2A21     		movs	r1, #42
 484:BLDC.c        **** 	return FIELD_GET(tmc4671_readInt(DEFAULT_MC, TMC4671_ABN_DECODER_PHI_E_PHI_M), TMC4671_ABN_DECODER
 2642              		.loc 1 484 1 view .LVU662
 2643 08ca 08B5     		push	{r3, lr}
 2644              	.LCFI36:
 2645              		.cfi_def_cfa_offset 8
 2646              		.cfi_offset 3, -8
 2647              		.cfi_offset 14, -4
 2648              		.loc 1 485 9 view .LVU663
 2649 08cc 0020     		movs	r0, #0
 2650 08ce FFF7FEFF 		bl	tmc4671_readInt
 2651              	.LVL187:
 486:BLDC.c        **** }
 2652              		.loc 1 486 1 view .LVU664
 2653 08d2 0014     		asrs	r0, r0, #16
 2654 08d4 08BD     		pop	{r3, pc}
 2655              		.cfi_endproc
 2656              	.LFE32:
 2658              		.align	1
 2659 08d6 00BF     		.p2align 2,,3
 2660              		.global	bldc_getDigitalHallAngle
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
 2665              	bldc_getDigitalHallAngle:
 2666              	.LFB33:
 487:BLDC.c        **** 
 488:BLDC.c        **** s16 bldc_getDigitalHallAngle()
 489:BLDC.c        **** {
 2667              		.loc 1 489 1 is_stmt 1 view -0
 2668              		.cfi_startproc
 2669              		@ args = 0, pretend = 0, frame = 0
 2670              		@ frame_needed = 0, uses_anonymous_args = 0
 490:BLDC.c        **** 	return FIELD_GET(tmc4671_readInt(DEFAULT_MC, TMC4671_HALL_PHI_E_INTERPOLATED_PHI_E), TMC4671_HALL_
 2671              		.loc 1 490 2 view .LVU666
 2672              		.loc 1 490 9 is_stmt 0 view .LVU667
 2673 08d8 3921     		movs	r1, #57
 489:BLDC.c        **** 	return FIELD_GET(tmc4671_readInt(DEFAULT_MC, TMC4671_HALL_PHI_E_INTERPOLATED_PHI_E), TMC4671_HALL_
 2674              		.loc 1 489 1 view .LVU668
 2675 08da 08B5     		push	{r3, lr}
 2676              	.LCFI37:
 2677              		.cfi_def_cfa_offset 8
 2678              		.cfi_offset 3, -8
 2679              		.cfi_offset 14, -4
 2680              		.loc 1 490 9 view .LVU669
 2681 08dc 0020     		movs	r0, #0
 2682 08de FFF7FEFF 		bl	tmc4671_readInt
 2683              	.LVL188:
 491:BLDC.c        **** }
 2684              		.loc 1 491 1 view .LVU670
 2685 08e2 00B2     		sxth	r0, r0
 2686 08e4 08BD     		pop	{r3, pc}
 2687              		.cfi_endproc
 2688              	.LFE33:
 2690              		.align	1
 2691 08e6 00BF     		.p2align 2,,3
 2692              		.global	bldc_setDualShuntFactor
 2693              		.syntax unified
 2694              		.thumb
 2695              		.thumb_func
 2697              	bldc_setDualShuntFactor:
 2698              	.LVL189:
 2699              	.LFB34:
 492:BLDC.c        **** 
 493:BLDC.c        **** // ADC configuration
 494:BLDC.c        **** bool bldc_setDualShuntFactor(u16 factor)
 495:BLDC.c        **** {
 2700              		.loc 1 495 1 is_stmt 1 view -0
 2701              		.cfi_startproc
 2702              		@ args = 0, pretend = 0, frame = 0
 2703              		@ frame_needed = 0, uses_anonymous_args = 0
 2704              		@ link register save eliminated.
 496:BLDC.c        **** 	motorConfig.dualShuntFactor = factor;
 2705              		.loc 1 496 2 view .LVU672
 495:BLDC.c        **** 	motorConfig.dualShuntFactor = factor;
 2706              		.loc 1 495 1 is_stmt 0 view .LVU673
 2707 08e8 0246     		mov	r2, r0
 2708              		.loc 1 496 30 view .LVU674
 2709 08ea 024B     		ldr	r3, .L209
 497:BLDC.c        **** 	return true;
 498:BLDC.c        **** }
 2710              		.loc 1 498 1 view .LVU675
 2711 08ec 0120     		movs	r0, #1
 2712              	.LVL190:
 496:BLDC.c        **** 	return true;
 2713              		.loc 1 496 30 view .LVU676
 2714 08ee A3F86820 		strh	r2, [r3, #104]	@ movhi
 497:BLDC.c        **** 	return true;
 2715              		.loc 1 497 2 is_stmt 1 view .LVU677
 2716              		.loc 1 498 1 is_stmt 0 view .LVU678
 2717 08f2 7047     		bx	lr
 2718              	.L210:
 2719              		.align	2
 2720              	.L209:
 2721 08f4 00000000 		.word	motorConfig
 2722              		.cfi_endproc
 2723              	.LFE34:
 2725              		.align	1
 2726              		.p2align 2,,3
 2727              		.global	bldc_getDualShuntFactor
 2728              		.syntax unified
 2729              		.thumb
 2730              		.thumb_func
 2732              	bldc_getDualShuntFactor:
 2733              	.LFB35:
 499:BLDC.c        **** 
 500:BLDC.c        **** u16 bldc_getDualShuntFactor()
 501:BLDC.c        **** {
 2734              		.loc 1 501 1 is_stmt 1 view -0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 0
 2737              		@ frame_needed = 0, uses_anonymous_args = 0
 2738              		@ link register save eliminated.
 502:BLDC.c        **** 	return motorConfig.dualShuntFactor;
 2739              		.loc 1 502 2 view .LVU680
 2740              		.loc 1 502 20 is_stmt 0 view .LVU681
 2741 08f8 014B     		ldr	r3, .L212
 503:BLDC.c        **** }
 2742              		.loc 1 503 1 view .LVU682
 2743 08fa B3F86800 		ldrh	r0, [r3, #104]
 2744 08fe 7047     		bx	lr
 2745              	.L213:
 2746              		.align	2
 2747              	.L212:
 2748 0900 00000000 		.word	motorConfig
 2749              		.cfi_endproc
 2750              	.LFE35:
 2752              		.align	1
 2753              		.p2align 2,,3
 2754              		.global	bldc_getAdcI0Offset
 2755              		.syntax unified
 2756              		.thumb
 2757              		.thumb_func
 2759              	bldc_getAdcI0Offset:
 2760              	.LFB36:
 504:BLDC.c        **** 
 505:BLDC.c        **** int bldc_getAdcI0Offset()
 506:BLDC.c        **** {
 2761              		.loc 1 506 1 is_stmt 1 view -0
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 0
 2764              		@ frame_needed = 0, uses_anonymous_args = 0
 507:BLDC.c        **** 	motorConfig.adc_I0_offset = tmc4671_getAdcI0Offset(DEFAULT_MC);
 2765              		.loc 1 507 2 view .LVU684
 506:BLDC.c        **** 	motorConfig.adc_I0_offset = tmc4671_getAdcI0Offset(DEFAULT_MC);
 2766              		.loc 1 506 1 is_stmt 0 view .LVU685
 2767 0904 08B5     		push	{r3, lr}
 2768              	.LCFI38:
 2769              		.cfi_def_cfa_offset 8
 2770              		.cfi_offset 3, -8
 2771              		.cfi_offset 14, -4
 2772              		.loc 1 507 30 view .LVU686
 2773 0906 0020     		movs	r0, #0
 2774 0908 FFF7FEFF 		bl	tmc4671_getAdcI0Offset
 2775              	.LVL191:
 2776              		.loc 1 507 28 view .LVU687
 2777 090c 014B     		ldr	r3, .L216
 2778 090e A3F86400 		strh	r0, [r3, #100]	@ movhi
 508:BLDC.c        **** 	return motorConfig.adc_I0_offset;
 2779              		.loc 1 508 2 is_stmt 1 view .LVU688
 509:BLDC.c        **** }
 2780              		.loc 1 509 1 is_stmt 0 view .LVU689
 2781 0912 08BD     		pop	{r3, pc}
 2782              	.L217:
 2783              		.align	2
 2784              	.L216:
 2785 0914 00000000 		.word	motorConfig
 2786              		.cfi_endproc
 2787              	.LFE36:
 2789              		.align	1
 2790              		.p2align 2,,3
 2791              		.global	bldc_setAdcI0Offset
 2792              		.syntax unified
 2793              		.thumb
 2794              		.thumb_func
 2796              	bldc_setAdcI0Offset:
 2797              	.LVL192:
 2798              	.LFB37:
 510:BLDC.c        **** 
 511:BLDC.c        **** bool bldc_setAdcI0Offset(int offset)
 512:BLDC.c        **** {
 2799              		.loc 1 512 1 is_stmt 1 view -0
 2800              		.cfi_startproc
 2801              		@ args = 0, pretend = 0, frame = 0
 2802              		@ frame_needed = 0, uses_anonymous_args = 0
 513:BLDC.c        **** 	if(offset >= 0 && offset < 65536)
 2803              		.loc 1 513 2 view .LVU691
 2804              		.loc 1 513 4 is_stmt 0 view .LVU692
 2805 0918 B0F5803F 		cmp	r0, #65536
 2806 091c 01D3     		bcc	.L225
 514:BLDC.c        **** 	{
 515:BLDC.c        **** 		motorConfig.adc_I0_offset = offset;
 516:BLDC.c        **** 		tmc4671_setAdcI0Offset(DEFAULT_MC, motorConfig.adc_I0_offset);
 517:BLDC.c        **** 		return true;
 518:BLDC.c        **** 	}
 519:BLDC.c        **** 	return false;
 2807              		.loc 1 519 9 view .LVU693
 2808 091e 0020     		movs	r0, #0
 2809              	.LVL193:
 520:BLDC.c        **** }
 2810              		.loc 1 520 1 view .LVU694
 2811 0920 7047     		bx	lr
 2812              	.LVL194:
 2813              	.L225:
 515:BLDC.c        **** 		tmc4671_setAdcI0Offset(DEFAULT_MC, motorConfig.adc_I0_offset);
 2814              		.loc 1 515 3 is_stmt 1 view .LVU695
 512:BLDC.c        **** 	if(offset >= 0 && offset < 65536)
 2815              		.loc 1 512 1 is_stmt 0 view .LVU696
 2816 0922 08B5     		push	{r3, lr}
 2817              	.LCFI39:
 2818              		.cfi_def_cfa_offset 8
 2819              		.cfi_offset 3, -8
 2820              		.cfi_offset 14, -4
 515:BLDC.c        **** 		tmc4671_setAdcI0Offset(DEFAULT_MC, motorConfig.adc_I0_offset);
 2821              		.loc 1 515 29 view .LVU697
 2822 0924 044B     		ldr	r3, .L226
 2823 0926 81B2     		uxth	r1, r0
 516:BLDC.c        **** 		return true;
 2824              		.loc 1 516 3 view .LVU698
 2825 0928 0020     		movs	r0, #0
 2826              	.LVL195:
 515:BLDC.c        **** 		tmc4671_setAdcI0Offset(DEFAULT_MC, motorConfig.adc_I0_offset);
 2827              		.loc 1 515 29 view .LVU699
 2828 092a A3F86410 		strh	r1, [r3, #100]	@ movhi
 516:BLDC.c        **** 		return true;
 2829              		.loc 1 516 3 is_stmt 1 view .LVU700
 2830 092e FFF7FEFF 		bl	tmc4671_setAdcI0Offset
 2831              	.LVL196:
 517:BLDC.c        **** 	}
 2832              		.loc 1 517 3 view .LVU701
 517:BLDC.c        **** 	}
 2833              		.loc 1 517 10 is_stmt 0 view .LVU702
 2834 0932 0120     		movs	r0, #1
 2835              		.loc 1 520 1 view .LVU703
 2836 0934 08BD     		pop	{r3, pc}
 2837              	.L227:
 2838 0936 00BF     		.align	2
 2839              	.L226:
 2840 0938 00000000 		.word	motorConfig
 2841              		.cfi_endproc
 2842              	.LFE37:
 2844              		.align	1
 2845              		.p2align 2,,3
 2846              		.global	bldc_getAdcI1Offset
 2847              		.syntax unified
 2848              		.thumb
 2849              		.thumb_func
 2851              	bldc_getAdcI1Offset:
 2852              	.LFB38:
 521:BLDC.c        **** 
 522:BLDC.c        **** int bldc_getAdcI1Offset()
 523:BLDC.c        **** {
 2853              		.loc 1 523 1 is_stmt 1 view -0
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 0
 2856              		@ frame_needed = 0, uses_anonymous_args = 0
 524:BLDC.c        **** 	motorConfig.adc_I1_offset = tmc4671_getAdcI1Offset(DEFAULT_MC);
 2857              		.loc 1 524 2 view .LVU705
 523:BLDC.c        **** 	motorConfig.adc_I1_offset = tmc4671_getAdcI1Offset(DEFAULT_MC);
 2858              		.loc 1 523 1 is_stmt 0 view .LVU706
 2859 093c 08B5     		push	{r3, lr}
 2860              	.LCFI40:
 2861              		.cfi_def_cfa_offset 8
 2862              		.cfi_offset 3, -8
 2863              		.cfi_offset 14, -4
 2864              		.loc 1 524 30 view .LVU707
 2865 093e 0020     		movs	r0, #0
 2866 0940 FFF7FEFF 		bl	tmc4671_getAdcI1Offset
 2867              	.LVL197:
 2868              		.loc 1 524 28 view .LVU708
 2869 0944 014B     		ldr	r3, .L230
 2870 0946 A3F86600 		strh	r0, [r3, #102]	@ movhi
 525:BLDC.c        **** 	return motorConfig.adc_I1_offset;
 2871              		.loc 1 525 2 is_stmt 1 view .LVU709
 526:BLDC.c        **** }
 2872              		.loc 1 526 1 is_stmt 0 view .LVU710
 2873 094a 08BD     		pop	{r3, pc}
 2874              	.L231:
 2875              		.align	2
 2876              	.L230:
 2877 094c 00000000 		.word	motorConfig
 2878              		.cfi_endproc
 2879              	.LFE38:
 2881              		.align	1
 2882              		.p2align 2,,3
 2883              		.global	bldc_setAdcI1Offset
 2884              		.syntax unified
 2885              		.thumb
 2886              		.thumb_func
 2888              	bldc_setAdcI1Offset:
 2889              	.LVL198:
 2890              	.LFB39:
 527:BLDC.c        **** 
 528:BLDC.c        **** bool bldc_setAdcI1Offset(int offset)
 529:BLDC.c        **** {
 2891              		.loc 1 529 1 is_stmt 1 view -0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
 530:BLDC.c        **** 	if(offset >= 0 && offset < 65536)
 2895              		.loc 1 530 2 view .LVU712
 2896              		.loc 1 530 4 is_stmt 0 view .LVU713
 2897 0950 B0F5803F 		cmp	r0, #65536
 2898 0954 01D3     		bcc	.L239
 531:BLDC.c        **** 	{
 532:BLDC.c        **** 		motorConfig.adc_I1_offset = offset;
 533:BLDC.c        **** 		tmc4671_setAdcI1Offset(DEFAULT_MC, motorConfig.adc_I1_offset);
 534:BLDC.c        **** 		return true;
 535:BLDC.c        **** 	}
 536:BLDC.c        **** 	return false;
 2899              		.loc 1 536 9 view .LVU714
 2900 0956 0020     		movs	r0, #0
 2901              	.LVL199:
 537:BLDC.c        **** }
 2902              		.loc 1 537 1 view .LVU715
 2903 0958 7047     		bx	lr
 2904              	.LVL200:
 2905              	.L239:
 532:BLDC.c        **** 		tmc4671_setAdcI1Offset(DEFAULT_MC, motorConfig.adc_I1_offset);
 2906              		.loc 1 532 3 is_stmt 1 view .LVU716
 529:BLDC.c        **** 	if(offset >= 0 && offset < 65536)
 2907              		.loc 1 529 1 is_stmt 0 view .LVU717
 2908 095a 08B5     		push	{r3, lr}
 2909              	.LCFI41:
 2910              		.cfi_def_cfa_offset 8
 2911              		.cfi_offset 3, -8
 2912              		.cfi_offset 14, -4
 532:BLDC.c        **** 		tmc4671_setAdcI1Offset(DEFAULT_MC, motorConfig.adc_I1_offset);
 2913              		.loc 1 532 29 view .LVU718
 2914 095c 044B     		ldr	r3, .L240
 2915 095e 81B2     		uxth	r1, r0
 533:BLDC.c        **** 		return true;
 2916              		.loc 1 533 3 view .LVU719
 2917 0960 0020     		movs	r0, #0
 2918              	.LVL201:
 532:BLDC.c        **** 		tmc4671_setAdcI1Offset(DEFAULT_MC, motorConfig.adc_I1_offset);
 2919              		.loc 1 532 29 view .LVU720
 2920 0962 A3F86610 		strh	r1, [r3, #102]	@ movhi
 533:BLDC.c        **** 		return true;
 2921              		.loc 1 533 3 is_stmt 1 view .LVU721
 2922 0966 FFF7FEFF 		bl	tmc4671_setAdcI1Offset
 2923              	.LVL202:
 534:BLDC.c        **** 	}
 2924              		.loc 1 534 3 view .LVU722
 534:BLDC.c        **** 	}
 2925              		.loc 1 534 10 is_stmt 0 view .LVU723
 2926 096a 0120     		movs	r0, #1
 2927              		.loc 1 537 1 view .LVU724
 2928 096c 08BD     		pop	{r3, pc}
 2929              	.L241:
 2930 096e 00BF     		.align	2
 2931              	.L240:
 2932 0970 00000000 		.word	motorConfig
 2933              		.cfi_endproc
 2934              	.LFE39:
 2936              		.align	1
 2937              		.p2align 2,,3
 2938              		.global	TIM1_TRG_COM_IRQHandler
 2939              		.syntax unified
 2940              		.thumb
 2941              		.thumb_func
 2943              	TIM1_TRG_COM_IRQHandler:
 2944              	.LFB40:
 538:BLDC.c        **** 
 539:BLDC.c        **** /* commutation interrupt, take over the new desired pwm */
 540:BLDC.c        **** void TIM1_TRG_COM_IRQHandler()
 541:BLDC.c        **** {
 2945              		.loc 1 541 1 is_stmt 1 view -0
 2946              		.cfi_startproc
 2947              		@ args = 0, pretend = 0, frame = 0
 2948              		@ frame_needed = 0, uses_anonymous_args = 0
 2949              		@ link register save eliminated.
 542:BLDC.c        **** 	// clear interrupt flag
 543:BLDC.c        **** 	TIM_ClearITPendingBit(TIM1, TIM_IT_COM);
 2950              		.loc 1 543 2 view .LVU726
 2951 0974 2021     		movs	r1, #32
 2952 0976 0148     		ldr	r0, .L243
 2953 0978 FFF7FEBF 		b	TIM_ClearITPendingBit
 2954              	.LVL203:
 2955              	.L244:
 2956              		.align	2
 2957              	.L243:
 2958 097c 002C0140 		.word	1073818624
 2959              		.cfi_endproc
 2960              	.LFE40:
 2962              		.align	1
 2963              		.p2align 2,,3
 2964              		.global	TIM1_UP_IRQHandler
 2965              		.syntax unified
 2966              		.thumb
 2967              		.thumb_func
 2969              	TIM1_UP_IRQHandler:
 2970              	.LFB41:
 544:BLDC.c        **** }
 545:BLDC.c        **** 
 546:BLDC.c        **** void TIM1_UP_IRQHandler()
 547:BLDC.c        **** {
 2971              		.loc 1 547 1 view -0
 2972              		.cfi_startproc
 2973              		@ args = 0, pretend = 0, frame = 0
 2974              		@ frame_needed = 0, uses_anonymous_args = 0
 2975              		@ link register save eliminated.
 548:BLDC.c        **** 	// clear update flag
 549:BLDC.c        **** 	TIM_ClearFlag(TIM1, TIM_FLAG_Update);
 2976              		.loc 1 549 2 view .LVU728
 2977 0980 0121     		movs	r1, #1
 2978 0982 0148     		ldr	r0, .L246
 2979 0984 FFF7FEBF 		b	TIM_ClearFlag
 2980              	.LVL204:
 2981              	.L247:
 2982              		.align	2
 2983              	.L246:
 2984 0988 002C0140 		.word	1073818624
 2985              		.cfi_endproc
 2986              	.LFE41:
 2988              		.align	1
 2989              		.p2align 2,,3
 2990              		.global	TIM2_IRQHandler
 2991              		.syntax unified
 2992              		.thumb
 2993              		.thumb_func
 2995              	TIM2_IRQHandler:
 2996              	.LFB42:
 550:BLDC.c        **** }
 551:BLDC.c        **** 
 552:BLDC.c        **** /* Interrupt handler for timer 2 */
 553:BLDC.c        **** void TIM2_IRQHandler(void)
 554:BLDC.c        **** {
 2997              		.loc 1 554 1 view -0
 2998              		.cfi_startproc
 2999              		@ args = 0, pretend = 0, frame = 0
 3000              		@ frame_needed = 0, uses_anonymous_args = 0
 3001              		@ link register save eliminated.
 555:BLDC.c        **** 	// clear the interrupt pending flag
 556:BLDC.c        **** 	TIM_ClearFlag(TIM2, TIM_FLAG_Update);
 3002              		.loc 1 556 2 view .LVU730
 3003 098c 0121     		movs	r1, #1
 3004 098e 4FF08040 		mov	r0, #1073741824
 3005 0992 FFF7FEBF 		b	TIM_ClearFlag
 3006              	.LVL205:
 3007              		.cfi_endproc
 3008              	.LFE42:
 3010              		.align	1
 3011 0996 00BF     		.p2align 2,,3
 3012              		.global	TIM3_IRQHandler
 3013              		.syntax unified
 3014              		.thumb
 3015              		.thumb_func
 3017              	TIM3_IRQHandler:
 3018              	.LFB43:
 557:BLDC.c        **** }
 558:BLDC.c        **** 
 559:BLDC.c        **** /* Interrupt handler for timer 3 */
 560:BLDC.c        **** void TIM3_IRQHandler(void)
 561:BLDC.c        **** {
 3019              		.loc 1 561 1 view -0
 3020              		.cfi_startproc
 3021              		@ args = 0, pretend = 0, frame = 0
 3022              		@ frame_needed = 0, uses_anonymous_args = 0
 3023              		@ link register save eliminated.
 562:BLDC.c        **** 	// clear the interrupt pending flag
 563:BLDC.c        **** 	TIM_ClearFlag(TIM3, TIM_FLAG_Update);
 3024              		.loc 1 563 2 view .LVU732
 3025 0998 0121     		movs	r1, #1
 3026 099a 0148     		ldr	r0, .L250
 3027 099c FFF7FEBF 		b	TIM_ClearFlag
 3028              	.LVL206:
 3029              	.L251:
 3030              		.align	2
 3031              	.L250:
 3032 09a0 00040040 		.word	1073742848
 3033              		.cfi_endproc
 3034              	.LFE43:
 3036              		.align	1
 3037              		.p2align 2,,3
 3038              		.global	TIM4_IRQHandler
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3043              	TIM4_IRQHandler:
 3044              	.LFB44:
 564:BLDC.c        **** }
 565:BLDC.c        **** 
 566:BLDC.c        **** void TIM4_IRQHandler(void)
 567:BLDC.c        **** {
 3045              		.loc 1 567 1 view -0
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 0, uses_anonymous_args = 0
 3049              		@ link register save eliminated.
 568:BLDC.c        **** 	// clear the interrupt pending flag
 569:BLDC.c        **** 	TIM_ClearFlag(TIM4, TIM_FLAG_Update);
 3050              		.loc 1 569 2 view .LVU734
 3051 09a4 0121     		movs	r1, #1
 3052 09a6 0148     		ldr	r0, .L253
 3053 09a8 FFF7FEBF 		b	TIM_ClearFlag
 3054              	.LVL207:
 3055              	.L254:
 3056              		.align	2
 3057              	.L253:
 3058 09ac 00080040 		.word	1073743872
 3059              		.cfi_endproc
 3060              	.LFE44:
 3062              		.align	1
 3063              		.p2align 2,,3
 3064              		.global	EXTI9_5_IRQHandler
 3065              		.syntax unified
 3066              		.thumb
 3067              		.thumb_func
 3069              	EXTI9_5_IRQHandler:
 3070              	.LFB45:
 570:BLDC.c        **** }
 571:BLDC.c        **** 
 572:BLDC.c        **** /* interrupt handler for encoder-Null-channel */
 573:BLDC.c        **** void EXTI9_5_IRQHandler()
 574:BLDC.c        **** {
 3071              		.loc 1 574 1 view -0
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 0
 3074              		@ frame_needed = 0, uses_anonymous_args = 0
 575:BLDC.c        **** 	if(EXTI_GetITStatus(EXTI_Line8) != RESET)
 3075              		.loc 1 575 2 view .LVU736
 574:BLDC.c        **** 	if(EXTI_GetITStatus(EXTI_Line8) != RESET)
 3076              		.loc 1 574 1 is_stmt 0 view .LVU737
 3077 09b0 08B5     		push	{r3, lr}
 3078              	.LCFI42:
 3079              		.cfi_def_cfa_offset 8
 3080              		.cfi_offset 3, -8
 3081              		.cfi_offset 14, -4
 3082              		.loc 1 575 5 view .LVU738
 3083 09b2 4FF48070 		mov	r0, #256
 3084 09b6 FFF7FEFF 		bl	EXTI_GetITStatus
 3085              	.LVL208:
 3086              		.loc 1 575 4 view .LVU739
 3087 09ba 00B9     		cbnz	r0, .L258
 576:BLDC.c        **** 	{
 577:BLDC.c        **** 		// clear interrupt bit
 578:BLDC.c        **** 		EXTI_ClearITPendingBit(EXTI_Line8);
 579:BLDC.c        **** 	}
 580:BLDC.c        **** }
 3088              		.loc 1 580 1 view .LVU740
 3089 09bc 08BD     		pop	{r3, pc}
 3090              	.L258:
 578:BLDC.c        **** 	}
 3091              		.loc 1 578 3 is_stmt 1 view .LVU741
 3092 09be 4FF48070 		mov	r0, #256
 3093              		.loc 1 580 1 is_stmt 0 view .LVU742
 3094 09c2 BDE80840 		pop	{r3, lr}
 3095              	.LCFI43:
 3096              		.cfi_restore 14
 3097              		.cfi_restore 3
 3098              		.cfi_def_cfa_offset 0
 578:BLDC.c        **** 	}
 3099              		.loc 1 578 3 view .LVU743
 3100 09c6 FFF7FEBF 		b	EXTI_ClearITPendingBit
 3101              	.LVL209:
 3102              		.cfi_endproc
 3103              	.LFE45:
 3105              		.align	1
 3106 09ca 00BF     		.p2align 2,,3
 3107              		.global	USART2_IRQHandler
 3108              		.syntax unified
 3109              		.thumb
 3110              		.thumb_func
 3112              	USART2_IRQHandler:
 3113              	.LFB46:
 581:BLDC.c        **** 
 582:BLDC.c        **** /* interrupt handler for uart interface */
 583:BLDC.c        **** void USART2_IRQHandler(){}
 3114              		.loc 1 583 25 is_stmt 1 view -0
 3115              		.cfi_startproc
 3116              		@ args = 0, pretend = 0, frame = 0
 3117              		@ frame_needed = 0, uses_anonymous_args = 0
 3118              		@ link register save eliminated.
 3119              		.loc 1 583 26 view .LVU745
 3120 09cc 7047     		bx	lr
 3121              		.cfi_endproc
 3122              	.LFE46:
 3124              		.align	1
 3125 09ce 00BF     		.p2align 2,,3
 3126              		.global	USART3_IRQHandler
 3127              		.syntax unified
 3128              		.thumb
 3129              		.thumb_func
 3131              	USART3_IRQHandler:
 3132              	.LFB51:
 3133              		.cfi_startproc
 3134              		@ args = 0, pretend = 0, frame = 0
 3135              		@ frame_needed = 0, uses_anonymous_args = 0
 3136              		@ link register save eliminated.
 3137 09d0 7047     		bx	lr
 3138              		.cfi_endproc
 3139              	.LFE51:
 3141              		.global	gMotionMode
 3142              		.global	gLastSetCommutationMode
 3143              		.global	gTargetTorque
 3144              		.global	gRampTargetTorque
 3145              		.global	gDesiredVelocity
 3146              		.global	gActualInput5V
 3147              		.global	gActualInput6V
 3148              		.global	gActualInput12V
 3149              		.global	gActualSupplyVoltage
 3150              		.global	gActualMotorTemperature
 3151              		.data
 3152              		.align	2
 3153              		.set	.LANCHOR0,. + 0
 3156              	gMotionMode:
 3157 0000 00010000 		.word	256
 3160              	gLastSetCommutationMode:
 3161 0004 FF       		.byte	-1
 3162              		.bss
 3163              		.align	2
 3164              		.set	.LANCHOR1,. + 0
 3167              	gTargetTorque:
 3168 0000 00000000 		.space	4
 3171              	gDesiredVelocity:
 3172 0004 00000000 		.space	4
 3175              	gActualSupplyVoltage:
 3176 0008 00000000 		.space	4
 3179              	gActualInput12V:
 3180 000c 00000000 		.space	4
 3183              	gActualInput6V:
 3184 0010 00000000 		.space	4
 3187              	gActualInput5V:
 3188 0014 00000000 		.space	4
 3191              	gActualMotorTemperature:
 3192 0018 00000000 		.space	4
 3195              	lastSystick.3:
 3196 001c 00000000 		.space	4
 3199              	gRampTargetTorque:
 3200 0020 00000000 		.space	4
 3203              	last50MSecCheckTime.2:
 3204 0024 00000000 		.space	4
 3207              	last90MSecCheckTime.1:
 3208 0028 00000000 		.space	4
 3211              	lastSecCheckTime.0:
 3212 002c 00000000 		.space	4
 3213              		.text
 3214              	.Letext0:
 3215              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 3216              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 3217              		.file 4 "TMC-API/tmc/helpers/Types.h"
 3218              		.file 5 "Definitions.h"
 3219              		.file 6 "./cpu/STM32F103/stm32f10x_type.h"
 3220              		.file 7 "./cpu/STM32F103/stm32f10x_map.h"
 3221              		.file 8 "./TMC-API/tmc/ramp/LinearRamp.h"
 3222              		.file 9 "hal/modules/TMC4671-LEV-REF_v1.0.h"
 3223              		.file 10 "./cpu/STM32F103/stm32f10x_exti.h"
 3224              		.file 11 "./cpu/STM32F103/stm32f10x_tim.h"
 3225              		.file 12 "./TMC-API/tmc/ic/TMC4671/TMC4671.h"
 3226              		.file 13 "hal/Flags.h"
 3227              		.file 14 "Sensor.h"
 3228              		.file 15 "hal/Debug.h"
 3229              		.file 16 "Button.h"
 3230              		.file 17 "hal/system/SysTick.h"
 3231              		.file 18 "hal/system/SystemInfo.h"
 3232              		.file 19 "Led.h"
 3233              		.file 20 "LedRear.h"
 3234              		.file 21 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\
DEFINED SYMBOLS
                            *ABS*:00000000 BLDC.c
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:17     .text:00000000 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:24     .text:00000000 bldc_switchToMotionMode
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:140    .text:00000064 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:144    .text:00000068 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:151    .text:00000068 bldc_init
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:216    .text:00000094 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:222    .text:00000098 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:229    .text:00000098 bldc_getActualMotorCurrent
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:246    .text:000000a4 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:250    .text:000000a8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:257    .text:000000a8 bldc_getTargetMotorCurrent
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:274    .text:000000b4 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:278    .text:000000b8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:285    .text:000000b8 bldc_setTargetMotorCurrent
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:372    .text:00000100 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:380    .text:0000010c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:387    .text:0000010c bldc_getTargetVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:415    .text:00000124 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:420    .text:0000012c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:427    .text:0000012c bldc_setTargetVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:529    .text:00000170 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:540    .text:00000180 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:547    .text:00000180 bldc_getRampGeneratorVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:577    .text:00000198 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:582    .text:000001a0 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:589    .text:000001a0 bldc_getActualVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:611    .text:000001b4 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:615    .text:000001b8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:622    .text:000001b8 bldc_getMaxVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:638    .text:000001c0 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:642    .text:000001c4 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:649    .text:000001c4 bldc_setMaxVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:701    .text:000001e8 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:707    .text:000001f4 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:714    .text:000001f4 bldc_setAcceleration
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:766    .text:00000218 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:772    .text:00000224 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:779    .text:00000224 bldc_setRampEnabled
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:818    .text:00000240 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:823    .text:00000248 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:830    .text:00000248 bldc_checkSupplyVoltage
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:978    .text:000002d0 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:987    .text:000002e8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:994    .text:000002e8 bldc_getSupplyVoltage
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1010   .text:000002f0 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1014   .text:000002f4 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1021   .text:000002f4 bldc_checkInput12V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1058   .text:00000318 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1064   .text:00000324 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1071   .text:00000324 bldc_getInput12V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1087   .text:0000032c $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1091   .text:00000330 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1098   .text:00000330 bldc_checkInput6V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1136   .text:00000354 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1142   .text:00000360 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1149   .text:00000360 bldc_getInput6V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1165   .text:00000368 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1169   .text:0000036c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1176   .text:0000036c bldc_checkInput5V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1214   .text:00000390 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1220   .text:0000039c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1227   .text:0000039c bldc_getInput5V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1243   .text:000003a4 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1255   .text:000003a8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1262   .text:000003a8 bldc_checkMotorTemperature
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1484   .text:000004b8 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1503   .text:000004f8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1510   .text:000004f8 bldc_getMotorTemperature
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1526   .text:00000500 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1530   .text:00000504 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1537   .text:00000504 bldc_checkCommutationMode
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1647   .text:0000058c $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1652   .text:00000594 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1659   .text:00000594 bldc_stopMotor
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1829   .text:000005fc $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1839   .text:00000608 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1846   .text:00000608 updateRampTargetTorque
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1962   .text:00000664 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1967   .text:0000066c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:1974   .text:0000066c bldc_processBLDC
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2451   .text:00000854 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2462   .text:00000874 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2469   .text:00000874 bldc_rampTargetTorque
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2485   .text:0000087c $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2489   .text:00000880 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2496   .text:00000880 bldc_getMotorPolePairs
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2522   .text:00000890 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2526   .text:00000894 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2533   .text:00000894 bldc_setCommutationMode
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2563   .text:000008a8 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2567   .text:000008ac $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2574   .text:000008ac bldc_getCommutationMode
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2590   .text:000008b4 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2594   .text:000008b8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2601   .text:000008b8 bldc_getOpenLoopAngle
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2633   .text:000008c8 bldc_getEncoderAngle
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2665   .text:000008d8 bldc_getDigitalHallAngle
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2697   .text:000008e8 bldc_setDualShuntFactor
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2721   .text:000008f4 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2725   .text:000008f8 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2732   .text:000008f8 bldc_getDualShuntFactor
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2748   .text:00000900 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2752   .text:00000904 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2759   .text:00000904 bldc_getAdcI0Offset
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2785   .text:00000914 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2789   .text:00000918 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2796   .text:00000918 bldc_setAdcI0Offset
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2840   .text:00000938 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2844   .text:0000093c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2851   .text:0000093c bldc_getAdcI1Offset
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2877   .text:0000094c $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2881   .text:00000950 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2888   .text:00000950 bldc_setAdcI1Offset
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2932   .text:00000970 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2936   .text:00000974 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2943   .text:00000974 TIM1_TRG_COM_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2958   .text:0000097c $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2962   .text:00000980 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2969   .text:00000980 TIM1_UP_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2984   .text:00000988 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2988   .text:0000098c $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:2995   .text:0000098c TIM2_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3017   .text:00000998 TIM3_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3032   .text:000009a0 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3036   .text:000009a4 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3043   .text:000009a4 TIM4_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3058   .text:000009ac $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3062   .text:000009b0 $t
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3069   .text:000009b0 EXTI9_5_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3112   .text:000009cc USART2_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3131   .text:000009d0 USART3_IRQHandler
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3156   .data:00000000 gMotionMode
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3160   .data:00000004 gLastSetCommutationMode
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3167   .bss:00000000 gTargetTorque
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3199   .bss:00000020 gRampTargetTorque
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3171   .bss:00000004 gDesiredVelocity
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3187   .bss:00000014 gActualInput5V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3183   .bss:00000010 gActualInput6V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3179   .bss:0000000c gActualInput12V
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3175   .bss:00000008 gActualSupplyVoltage
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3191   .bss:00000018 gActualMotorTemperature
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3152   .data:00000000 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3163   .bss:00000000 $d
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3195   .bss:0000001c lastSystick.3
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3203   .bss:00000024 last50MSecCheckTime.2
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3207   .bss:00000028 last90MSecCheckTime.1
C:\Users\forre\AppData\Local\Temp\cckV3HKS.s:3211   .bss:0000002c lastSecCheckTime.0

UNDEFINED SYMBOLS
flags_clearStatusFlag
flags_setStatusFlag
tmc4671_switchToMotionMode
tmc4671_getActualTorqueFluxSum_mA
motorConfig
tmc4671_getTargetTorqueFluxSum_mA
tmc4671_readInt
rampGenerator
tmc4671_writeInt
tmcm_getModuleSpecificADCValue
tmcm_disableDriver
ADC_SUPPLY_VOLTAGE
ADC_VOLTAGE_12V
ADC_VOLTAGE_6V
ADC_VOLTAGE_5V
__aeabi_ui2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_f2d
__aeabi_dsub
__aeabi_dadd
__aeabi_f2iz
log
tmcm_getDriverState
flags_getErrorFlags
flags_isStatusFlagSet
tmcm_enableDriver
ADC_MOT_TEMP
sensor_wheelVelocity
systick_getTimer
button_autoDeactivation
systemInfo_incCurrentLoopCounter
systemInfo_incVelocityLoopCounter
led_periodicJob
rear_led_periodicJob
sensor_brakeDetection
sensor_updatePedalTorque
sensor_computePedalTorqMinMax
sensor_updatePedalCounter
sensor_updateWheelCounter
sensor_updateWheelVelocity
sensor_updateActualTorqueLimit_Gain
sensor_updateMotorVelocity
sensor_updatePedalVelocity
sensor_mapSpeedTorque
tmc_linearRamp_computeRampVelocity
tmc4671_setTargetTorque_mA
tmc4671_setTargetFlux_mA
sensor_motorAssistance
debug_setTestVar1
sensor_cutOffDistance
button_batterySaving
tmc4671_getPolePairs
tmc4671_getAdcI0Offset
tmc4671_setAdcI0Offset
tmc4671_getAdcI1Offset
tmc4671_setAdcI1Offset
TIM_ClearITPendingBit
TIM_ClearFlag
EXTI_GetITStatus
EXTI_ClearITPendingBit
